@using System.Security.Claims
@using Microsoft.AspNetCore.Identity
@model IEnumerable<THYNK.Models.UserNotification>
@{
    ViewData["Title"] = "Notifications";
    Layout = "_CommunityLayout";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-header bg-white py-3">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">
                            <i class="fas fa-bell me-2 text-warning"></i>
                            My Notifications
                        </h5>
                        <div class="btn-group">
                            <button type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="fas fa-filter me-1"></i> Filter
                            </button>
                            <ul class="dropdown-menu dropdown-menu-end">
                                <li><a class="dropdown-item" href="@Url.Action("Alerts", new { type = "success" })">Success</a></li>
                                <li><a class="dropdown-item" href="@Url.Action("Alerts", new { type = "info" })">Info</a></li>
                                <li><a class="dropdown-item" href="@Url.Action("Alerts", new { type = "warning" })">Warning</a></li>
                                <li><a class="dropdown-item" href="@Url.Action("Alerts", new { type = "primary" })">Other</a></li>
                                <li><hr class="dropdown-divider"></li>
                                <li><a class="dropdown-item" href="@Url.Action("Alerts")">All Notifications</a></li>
                            </ul>
                        </div>
                    </div>
                </div>
                <div class="card-body p-0">
                    <div id="notifications-container">
                    @if (!Model.Any())
                    {
                        <div class="text-center py-5">
                            <i class="fas fa-bell-slash fa-3x text-muted mb-3"></i>
                            <h5 class="text-muted">No notifications at the moment</h5>
                                <p class="text-muted">You'll receive notifications when there are updates to your reports or posts</p>
                        </div>
                    }
                    else
                    {
                        <div class="list-group list-group-flush">
                            @foreach (var notification in Model)
                            {
                                    <div class="list-group-item notification-item @(!notification.IsRead ? "unread" : "")" data-id="@notification.Id">
                                        <div class="d-flex">
                                        <div class="flex-shrink-0 mt-1">
                                            <i class="fas fa-@(notification.NotificationType == "success" ? "check-circle text-success" : 
                                                             notification.NotificationType == "warning" ? "exclamation-circle text-warning" : 
                                                             notification.NotificationType == "info" ? "info-circle text-info" : 
                                                             "bell text-primary") fa-lg"></i>
                                        </div>
                                        <div class="flex-grow-1 ms-3">
                                            <div class="d-flex justify-content-between align-items-center mb-1">
                                                <h6 class="mb-0">@notification.Title</h6>
                                                <small class="text-muted">@notification.CreatedAt.ToString("MMM dd, yyyy hh:mm tt")</small>
                                            </div>
                                            <p class="mb-1">@notification.Message</p>
                                                @if (notification.RelatedEntityId.HasValue)
                                                {
                                                    if (notification.RelatedEntityType == "Report")
                                            {
                                                        <a href="@Url.Action("ReportDetails", "Community", new { id = notification.RelatedEntityId.Value })" class="btn btn-outline-primary btn-sm">
                                                    <i class="fas fa-eye me-1"></i> View Report
                                                </a>
                                            }
                                                    else if (notification.RelatedEntityType == "CommunityPost")
                                                    {
                                                        <a href="@Url.Action("CommunityFeed", "Community")" class="btn btn-outline-primary btn-sm">
                                                            <i class="fas fa-comments me-1"></i> View Post
                                                        </a>
                                                    }
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
    <script>
        $(document).ready(function() {
            // Initialize SignalR connection
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/communityHub")
                .withAutomaticReconnect([0, 2000, 5000, 10000, 20000])
                .configureLogging(signalR.LogLevel.Information)
                .build();

            // Handle new notifications
            connection.on("NotificationReceived", function(notification) {
                console.log("New notification received:", notification);
                addNotificationToList(notification);
            });

            // Handle post moderation updates
            connection.on("PostModerationUpdate", function(data) {
                console.log("Post moderation update received:", data);
                const notification = {
                    title: data.isApproved ? "Post Approved" : "Post Rejected",
                    message: data.isApproved ? 
                        "Your community post has been approved and is now visible in the community feed." :
                        (data.reason ? `Your post was rejected. Reason: ${data.reason}` : "Your post was rejected."),
                    notificationType: data.isApproved ? "success" : "warning",
                    createdAt: new Date(data.timestamp)
                };
                addNotificationToList(notification);
            });

            // Function to add a new notification to the list
            function addNotificationToList(notification) {
                const container = $("#notifications-container");
                const emptyState = container.find(".text-center");
                
                // Remove empty state if it exists
                if (emptyState.length > 0) {
                    emptyState.remove();
                }

                // Create notification element
                const notificationHtml = `
                    <div class="list-group-item notification-item unread" data-id="${notification.id}">
                        <div class="d-flex">
                            <div class="flex-shrink-0 mt-1">
                                <i class="fas fa-${notification.notificationType === 'success' ? 'check-circle text-success' : 
                                                 notification.notificationType === 'warning' ? 'exclamation-circle text-warning' : 
                                                 notification.notificationType === 'info' ? 'info-circle text-info' : 
                                                 'bell text-primary'} fa-lg"></i>
                            </div>
                            <div class="flex-grow-1 ms-3">
                                <div class="d-flex justify-content-between align-items-center mb-1">
                                    <h6 class="mb-0">${notification.title}</h6>
                                    <small class="text-muted">${new Date(notification.createdAt).toLocaleString('en-US', { 
                                        month: 'short', 
                                        day: 'numeric', 
                                        year: 'numeric', 
                                        hour: 'numeric', 
                                        minute: 'numeric', 
                                        hour12: true,
                                        timeZone: 'Asia/Manila'
                                    })}</small>
                                </div>
                                <p class="mb-1">${notification.message}</p>
                                ${notification.relatedEntityId ? `
                                    <a href="${notification.relatedEntityType === 'Report' ? 
                                        '/Community/ReportDetails/' + notification.relatedEntityId : 
                                        '/Community/CommunityFeed'}" 
                                        class="btn btn-outline-primary btn-sm">
                                        <i class="fas fa-${notification.relatedEntityType === 'Report' ? 'eye' : 'comments'} me-1"></i>
                                        View ${notification.relatedEntityType === 'Report' ? 'Report' : 'Post'}
                                    </a>
                                ` : ''}
                            </div>
                        </div>
                    </div>
                `;

                // Add to the top of the list
                const listGroup = container.find(".list-group");
                if (listGroup.length > 0) {
                    listGroup.prepend(notificationHtml);
                } else {
                    container.html(`<div class="list-group list-group-flush">${notificationHtml}</div>`);
                }

                // Add animation
                const newNotification = container.find(".notification-item").first();
                newNotification.hide().slideDown(300);
            }

            // Start SignalR connection
            connection.start()
                .then(() => {
                    console.log("SignalR Connected");
                    // Join user group
                    const userId = '@User.FindFirstValue(ClaimTypes.NameIdentifier)';
                    if (userId) {
                        connection.invoke("JoinUserGroup", userId)
                            .then(() => console.log("Joined user group:", userId))
                            .catch(err => console.error("Error joining user group:", err));
                    }
                })
                .catch(err => console.error("SignalR Connection Error:", err));

            // Mark notifications as read when clicked
            $(document).on("click", ".notification-item", function() {
                const notificationId = $(this).data("id");
                if (notificationId) {
                    $.post("/Community/MarkNotificationRead", { id: notificationId })
                        .then(() => {
                            $(this).removeClass("unread");
                        })
                        .catch(err => console.error("Error marking notification as read:", err));
                }
            });
        });
    </script>

    <style>
        .notification-item {
            transition: background-color 0.2s ease;
            border-left: 4px solid transparent;
        }

        .notification-item.unread {
            background-color: rgba(0, 0, 0, 0.02);
            border-left-color: var(--primary);
        }

        .notification-item:hover {
            background-color: rgba(0, 0, 0, 0.04);
        }

        .notification-item .btn-outline-primary {
            font-size: 0.8rem;
            padding: 0.25rem 0.5rem;
        }

        .notification-item i {
            font-size: 1.1rem;
        }
    </style>
} 