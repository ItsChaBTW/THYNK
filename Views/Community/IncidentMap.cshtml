@{
    ViewData["Title"] = "Incident Map";
    Layout = "_CommunityLayout";
}

<div class="container-fluid px-4 py-4">
    <div class="row g-4">
        <!-- Map Section -->
        <div class="col-lg-9">
            <div class="card shadow-sm border-0">
                <div class="card-body p-0">
                    <div class="map-header d-flex justify-content-between align-items-center p-4 border-bottom">
                <div class="d-flex align-items-center">
                            <div class="map-icon bg-primary bg-opacity-10 text-primary rounded-circle p-3 me-3">
                                <i class="fas fa-map-marked-alt fa-lg"></i>
                    </div>
                    <div>
                                <h5 class="mb-1">Incident Map</h5>
                                <p class="text-muted mb-0">View and track reported incidents in your area</p>
                            </div>
                        </div>
                        <div class="map-controls">
                            <button class="btn btn-light rounded-pill px-3 me-2" id="toggle-filters">
                                <i class="fas fa-filter me-1"></i>Filters
                            </button>
                            <button class="btn btn-light rounded-pill px-3" id="toggle-legend">
                                <i class="fas fa-info-circle me-1"></i>Legend
                            </button>
                        </div>
                    </div>
                    <div id="map" class="map-container"></div>
                </div>
            </div>
        </div>

        <!-- Sidebar -->
        <div class="col-lg-3">
            <!-- Filters Panel -->
            <div class="card shadow-sm border-0 mb-4" id="filters-panel">
                <div class="card-body p-4">
                    <h6 class="mb-3">Filter Incidents</h6>
                <div class="mb-3">
                        <label class="form-label small text-muted">Incident Type</label>
                        <select id="filter-type" class="form-select form-select-sm bg-light border-0">
                        <option value="all">All Types</option>
                        @foreach (var type in Enum.GetValues(typeof(DisasterType)))
                        {
                            <option value="@type">@type</option>
                        }
                    </select>
                </div>
                <div class="mb-3">
                        <label class="form-label small text-muted">Severity Level</label>
                        <select id="filter-severity" class="form-select form-select-sm bg-light border-0">
                        <option value="all">All Severity Levels</option>
                        @foreach (var severity in Enum.GetValues(typeof(SeverityLevel)))
                        {
                            <option value="@severity">@severity</option>
                        }
                    </select>
                </div>
                <div class="mb-3">
                        <label class="form-label small text-muted">Status</label>
                        <select id="filter-status" class="form-select form-select-sm bg-light border-0">
                        <option value="all">All Status</option>
                        @foreach (var status in Enum.GetValues(typeof(ReportStatus)))
                        {
                            <option value="@status">@status</option>
                        }
                    </select>
                </div>
                    <div class="mb-4">
                        <label class="form-label small text-muted">Date Range</label>
                    <div class="input-group input-group-sm mb-2">
                            <span class="input-group-text bg-light border-0">
                                <i class="far fa-calendar-alt text-muted"></i>
                            </span>
                            <input type="date" id="filter-date-from" class="form-control form-control-sm bg-light border-0">
                        </div>
                        <div class="input-group input-group-sm">
                            <span class="input-group-text bg-light border-0">
                                <i class="far fa-calendar-alt text-muted"></i>
                            </span>
                            <input type="date" id="filter-date-to" class="form-control form-control-sm bg-light border-0">
                        </div>
                    </div>
                    <div class="d-grid gap-2">
                        <button id="apply-filters" class="btn btn-primary rounded-pill">
                            <i class="fas fa-check me-1"></i>Apply Filters
                        </button>
                        <button id="reset-filters" class="btn btn-light rounded-pill">
                            <i class="fas fa-undo me-1"></i>Reset
                        </button>
                    </div>
            </div>
        </div>

            <!-- Legend Panel -->
            <div class="card shadow-sm border-0" id="legend-panel">
                <div class="card-body p-4">
                    <h6 class="mb-3">Map Legend</h6>
                    <div class="mb-4">
                        <label class="form-label small text-muted mb-2">Incident Type</label>
                        <div class="d-flex align-items-center mb-2">
                            <span class="legend-dot bg-danger me-2"></span>
                        <small>Earthquake</small>
                    </div>
                        <div class="d-flex align-items-center mb-2">
                            <span class="legend-dot bg-primary me-2"></span>
                        <small>Flood</small>
                    </div>
                        <div class="d-flex align-items-center mb-2">
                            <span class="legend-dot bg-warning me-2"></span>
                        <small>Fire</small>
                    </div>
                        <div class="d-flex align-items-center">
                            <span class="legend-dot bg-dark me-2"></span>
                        <small>Other</small>
                    </div>
                </div>
                <div>
                        <label class="form-label small text-muted mb-2">Severity Level</label>
                        <div class="d-flex align-items-center mb-2">
                            <span class="legend-dot bg-success me-2"></span>
                        <small>Low</small>
                    </div>
                        <div class="d-flex align-items-center mb-2">
                            <span class="legend-dot bg-warning me-2"></span>
                        <small>Medium</small>
                    </div>
                        <div class="d-flex align-items-center mb-2">
                            <span class="legend-dot bg-danger me-2"></span>
                        <small>High</small>
                    </div>
                    <div class="d-flex align-items-center">
                            <span class="legend-dot bg-dark me-2"></span>
                        <small>Critical</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Incident Modal -->
<div class="modal fade" id="incident-modal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border-0 shadow">
            <div class="modal-header border-0">
                <h5 class="modal-title" id="modal-title">Incident Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body p-4" id="modal-body">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <span id="modal-date" class="text-muted small"></span>
                    <span id="modal-severity" class="badge rounded-pill"></span>
                </div>
                <p id="modal-description" class="mb-4"></p>
                <div class="location-info mb-4">
                    <div class="d-flex align-items-center mb-2">
                        <i class="fas fa-map-marker-alt text-danger me-2"></i>
                        <h6 class="mb-0">Location</h6>
                    </div>
                    <p id="modal-location" class="mb-1"></p>
                    <p id="modal-detailed-location" class="small text-muted mb-0"></p>
                </div>
                <div class="d-flex justify-content-between align-items-center">
                    <span id="modal-type" class="badge bg-secondary rounded-pill"></span>
                    <span id="modal-status" class="badge rounded-pill"></span>
                </div>
            </div>
            <div class="modal-footer border-0">
                <a id="view-details-link" href="#" class="btn btn-primary rounded-pill px-4">
                    <i class="fas fa-external-link-alt me-1"></i>View Full Details
                </a>
                <button type="button" class="btn btn-light rounded-pill px-4" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .map-container {
            height: calc(100vh - 200px);
            min-height: 500px;
        }

        .map-icon {
            width: 48px;
            height: 48px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .legend-dot {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            display: inline-block;
        }

        .incident-marker {
            cursor: pointer;
            transition: transform 0.2s ease-in-out;
        }

        .incident-marker:hover {
            transform: scale(1.1);
        }

        .mapboxgl-popup {
            max-width: 300px !important;
        }

        .mapboxgl-popup-content {
            padding: 1rem;
            border-radius: 0.5rem;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .form-select:focus,
        .form-control:focus {
            box-shadow: none;
            border-color: #dee2e6;
        }

        @@media (max-width: 991.98px) {
            #filters-panel,
            #legend-panel {
                display: none;
            }
        }
    </style>
}

@section Scripts {
    <script>
        // Initialize the map
        mapboxgl.accessToken = 'pk.eyJ1IjoiY2hhYW5nZ2cwMTkzIiwiYSI6ImNtOHo5ODF6cDAxcTUyaXB0ODBtYXlhN3oifQ.SJ-eGgWUplbUFNE_UwK7JA';
        const map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/mapbox/streets-v11',
            center: [120.9842, 14.5995],
            zoom: 9
        });

        // Add map controls
        map.addControl(new mapboxgl.NavigationControl(), 'top-right');
        map.addControl(new mapboxgl.FullscreenControl(), 'top-right');
        map.addControl(new mapboxgl.GeolocateControl({
            positionOptions: {
                enableHighAccuracy: true
            },
            trackUserLocation: true
        }), 'top-right');

        // Store the markers and incidents
        let markers = [];
        let incidents = [];
        let organizations = new Set();

        // Get the incident modal
        const incidentModal = new bootstrap.Modal(document.getElementById('incident-modal'));

        // Toggle panels on mobile
        document.getElementById('toggle-filters').addEventListener('click', function() {
            const filtersPanel = document.getElementById('filters-panel');
            filtersPanel.style.display = filtersPanel.style.display === 'none' ? 'block' : 'none';
        });

        document.getElementById('toggle-legend').addEventListener('click', function() {
            const legendPanel = document.getElementById('legend-panel');
            legendPanel.style.display = legendPanel.style.display === 'none' ? 'block' : 'none';
        });

        // Load incidents when map is ready
        map.on('load', function() {
            loadIncidents();
            
            // Set up event listeners for filters
            document.getElementById('apply-filters').addEventListener('click', applyFilters);
            document.getElementById('reset-filters').addEventListener('click', resetFilters);
        });

        // Load incidents from the API
        function loadIncidents() {
            fetch('@Url.Action("GetMapData", "Community")')
                .then(response => response.json())
                .then(data => {
                    incidents = data;
                    // Collect unique organizations
                    organizations.clear();
                    incidents.forEach(incident => {
                        if (incident.assignedTo && incident.assignedTo.organization) {
                            organizations.add(incident.assignedTo.organization);
                        }
                    });
                    // Populate organization filter
                    populateOrganizationFilter();
                    // Render all markers initially
                    renderMarkers(incidents);
                })
                .catch(error => console.error('Error loading incidents:', error));
        }

        // Populate organization filter dropdown
        function populateOrganizationFilter() {
            const orgSelect = document.getElementById('filter-organization');
            // Clear existing options except the first one
            while (orgSelect.options.length > 1) {
                orgSelect.remove(1);
            }
            // Add organization options
            organizations.forEach(org => {
                const option = document.createElement('option');
                option.value = org;
                option.textContent = org;
                orgSelect.appendChild(option);
            });
        }

        // Render markers on the map
        function renderMarkers(data) {
            // Remove existing markers
            for (let marker of markers) {
                marker.remove();
            }
            markers = [];

            // Create bounds object to fit all markers
            const bounds = new mapboxgl.LngLatBounds();

            // Add new markers
            for (let incident of data) {
                // Set marker color based on incident type
                let markerColor;
                switch(incident.type) {
                    case 'Earthquake': markerColor = '#dc3545'; break; // Red
                    case 'Flood': markerColor = '#0d6efd'; break; // Blue
                    case 'Fire': markerColor = '#ffc107'; break; // Yellow
                    case 'Landslide': markerColor = '#6c757d'; break; // Gray
                    case 'Storm': markerColor = '#6610f2'; break; // Purple
                    case 'Accident': markerColor = '#fd7e14'; break; // Orange
                    default: markerColor = '#343a40'; // Dark gray
                }

                // Create custom HTML element for marker
                const el = document.createElement('div');
                el.className = 'incident-marker';
                el.style.backgroundColor = markerColor;
                el.style.width = '20px';
                el.style.height = '20px';
                el.style.borderRadius = '50%';
                el.style.border = '2px solid white';
                el.style.boxShadow = '0 2px 4px rgba(0,0,0,0.2)';
                
                // Create marker
                const marker = new mapboxgl.Marker(el)
                    .setLngLat([incident.longitude, incident.latitude])
                    .addTo(map);
                
                // Add click event
                el.addEventListener('click', () => showIncidentDetails(incident));
                
                markers.push(marker);
            }

            // Fit map to bounds if we have markers
            if (data.length > 0) {
                // Add padding to the bounds
                const padding = { top: 50, bottom: 50, left: 50, right: 50 };
                map.fitBounds(bounds, { padding: padding, maxZoom: 15 });
            }
        }

        // Show incident details in modal
        function showIncidentDetails(incident) {
            document.getElementById('modal-title').textContent = incident.title;
            document.getElementById('modal-date').textContent = new Date(incident.dateReported).toLocaleString();
            document.getElementById('modal-description').textContent = incident.description;
            document.getElementById('modal-location').textContent = incident.location;
            document.getElementById('modal-detailed-location').textContent = `${incident.latitude}, ${incident.longitude}`;
            
            // Set severity badge
            const severityBadge = document.getElementById('modal-severity');
            severityBadge.textContent = incident.severity;
            severityBadge.className = 'badge rounded-pill ' + 
                (incident.severity === 'Critical' ? 'bg-danger' :
                 incident.severity === 'High' ? 'bg-warning' :
                 incident.severity === 'Medium' ? 'bg-info' : 'bg-success');
            
            // Set type and status badges
            document.getElementById('modal-type').textContent = incident.type;
            document.getElementById('modal-status').textContent = incident.status;
            document.getElementById('modal-status').className = 'badge rounded-pill ' + 
                (incident.status === 'Resolved' ? 'bg-success' :
                 incident.status === 'InProgress' ? 'bg-warning' :
                 incident.status === 'Verified' ? 'bg-info' : 'bg-secondary');
            
            // Set view details link
            document.getElementById('view-details-link').href = `/Community/ViewReport/${incident.id}`;
            
            incidentModal.show();
        }

        // Apply filters
        function applyFilters() {
            const type = document.getElementById('filter-type').value;
            const severity = document.getElementById('filter-severity').value;
            const status = document.getElementById('filter-status').value;
            const dateFrom = document.getElementById('filter-date-from').value;
            const dateTo = document.getElementById('filter-date-to').value;

            const filteredIncidents = incidents.filter(incident => {
                const matchesType = type === 'all' || incident.type === type;
                const matchesSeverity = severity === 'all' || incident.severity === severity;
                const matchesStatus = status === 'all' || incident.status === status;
                
                let matchesDate = true;
                if (dateFrom) {
                    matchesDate = matchesDate && new Date(incident.dateReported) >= new Date(dateFrom);
                }
                if (dateTo) {
                    matchesDate = matchesDate && new Date(incident.dateReported) <= new Date(dateTo);
                }

                return matchesType && matchesSeverity && matchesStatus && matchesDate;
            });

            renderMarkers(filteredIncidents);
            
            // Show count of filtered incidents
            const count = filteredIncidents.length;
            const total = incidents.length;
            alert(`Showing ${count} of ${total} incidents`);
        }

        // Reset filters
        function resetFilters() {
            document.getElementById('filter-date-from').value = '';
            document.getElementById('filter-date-to').value = '';
            renderMarkers(incidents);
        }
    </script>
} 