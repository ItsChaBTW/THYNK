@model THYNK.Models.DisasterReport
@{
    ViewData["Title"] = "Incident Details";
    Layout = "_CommunityLayout";
}

<div class="row">
    <div class="col-md-8">
        <div class="card dashboard-card">
            <div class="card-header bg-danger text-white">
                <div class="d-flex align-items-center">
                    <div class="card-icon bg-white text-danger">
                        <i class="fas fa-exclamation-triangle"></i>
                    </div>
                    <div>
                        <h5 class="m-0">Incident Details</h5>
                        <small>@Model.Title</small>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div class="mb-4">
                    <div class="d-flex justify-content-between mb-3">
                        <div>
                            <h5>@Model.Title</h5>
                            <p class="text-muted mb-0">
                                <i class="fas fa-calendar-alt me-1"></i> Reported on @Model.DateReported.ToString("MMMM dd, yyyy hh:mm tt")
                            </p>
                        </div>
                        <div>
                            @switch (Model.Severity)
                            {
                                case SeverityLevel.Low:
                                    <span class="badge bg-success">Low Severity</span>
                                    break;
                                case SeverityLevel.Medium:
                                    <span class="badge bg-warning text-dark">Medium Severity</span>
                                    break;
                                case SeverityLevel.High:
                                    <span class="badge bg-danger">High Severity</span>
                                    break;
                                case SeverityLevel.Critical:
                                    <span class="badge bg-dark">Critical Severity</span>
                                    break;
                            }
                            <br />
                            @switch (Model.Status)
                            {
                                case ReportStatus.Pending:
                                    <span class="badge bg-warning text-dark mt-1">Pending</span>
                                    break;
                                case ReportStatus.Verified:
                                    <span class="badge bg-info text-dark mt-1">Verified</span>
                                    break;
                                case ReportStatus.InProgress:
                                    <span class="badge bg-primary mt-1">In Progress</span>
                                    break;
                                case ReportStatus.Resolved:
                                    <span class="badge bg-success mt-1">Resolved</span>
                                    break;
                                case ReportStatus.Declined:
                                    <span class="badge bg-danger mt-1">Declined</span>
                                    break;
                            }
                        </div>
                    </div>
                    
                    <div class="alert alert-primary d-flex align-items-center">
                        <div class="me-3">
                            @switch (Model.Type)
                            {
                                case DisasterType.Earthquake:
                                    <i class="fas fa-house-damage fa-2x text-danger"></i>
                                    break;
                                case DisasterType.Flood:
                                    <i class="fas fa-water fa-2x text-primary"></i>
                                    break;
                                case DisasterType.Fire:
                                    <i class="fas fa-fire fa-2x text-warning"></i>
                                    break;
                                case DisasterType.Landslide:
                                    <i class="fas fa-mountain fa-2x text-secondary"></i>
                                    break;
                                case DisasterType.Storm:
                                    <i class="fas fa-cloud-showers-heavy fa-2x text-info"></i>
                                    break;
                                case DisasterType.Accident:
                                    <i class="fas fa-car-crash fa-2x text-dark"></i>
                                    break;
                                default:
                                    <i class="fas fa-exclamation-circle fa-2x text-secondary"></i>
                                    break;
                            }
                        </div>
                        <div>
                            <h6 class="mb-0">@Model.Type</h6>
                            <small>Incident type</small>
                        </div>
                    </div>
                </div>
                
                <div class="mb-4">
                    <h6 class="text-primary mb-3">Description</h6>
                    <p>@Model.Description</p>
                </div>
                
                <div class="mb-4">
                    <h6 class="text-primary mb-3">Location Details</h6>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label fw-bold">Full Address</label>
                                <p>@Model.Location</p>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label class="form-label fw-bold">Coordinates</label>
                                <p>Latitude: @Model.Latitude.ToString("F6")<br>Longitude: @Model.Longitude.ToString("F6")</p>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3">
                            <div class="mb-3">
                                <label class="form-label fw-bold">Purok/Street</label>
                                <p>@(String.IsNullOrEmpty(Model.Purok) || Model.Purok == "Unknown" ? "Not specified" : Model.Purok)</p>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="mb-3">
                                <label class="form-label fw-bold">Barangay</label>
                                <p>@(String.IsNullOrEmpty(Model.Barangay) || Model.Barangay == "Unknown" ? "Not specified" : Model.Barangay)</p>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="mb-3">
                                <label class="form-label fw-bold">City/Municipality</label>
                                <p>@(String.IsNullOrEmpty(Model.City) || Model.City == "Unknown" ? "Not specified" : Model.City)</p>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="mb-3">
                                <label class="form-label fw-bold">Country</label>
                                <p>@Model.Country</p>
                            </div>
                        </div>
                    </div>
                </div>
                
                @if (!String.IsNullOrEmpty(Model.AdditionalInfo))
                {
                    <div class="mb-4">
                        <h6 class="text-primary mb-3">Additional Information</h6>
                        <p>@Model.AdditionalInfo</p>
                    </div>
                }
                
                <div class="d-flex justify-content-between mt-4">
                    <a asp-action="Dashboard" class="btn btn-secondary">
                        <i class="fas fa-arrow-left me-2"></i>Back to Dashboard
                    </a>
                    <a asp-action="IncidentMap" class="btn btn-primary">
                        <i class="fas fa-map-marked-alt me-2"></i>View on Map
                    </a>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card dashboard-card mb-4">
            <div class="card-header bg-primary text-white">
                <h5 class="m-0"><i class="fas fa-map-marked-alt me-2"></i>Location Map</h5>
            </div>
            <div class="card-body p-0">
                <div id="map" class="map-preview" style="height: 300px;"></div>
            </div>
        </div>
        
        @if (!String.IsNullOrEmpty(Model.ImageUrl) && Model.ImageUrl != "/images/default-report.jpg")
        {
            <div class="card dashboard-card mb-4">
                <div class="card-header bg-info text-white">
                    <h5 class="m-0"><i class="fas fa-image me-2"></i>Image</h5>
                </div>
                <div class="card-body p-0">
                    <img src="@Model.ImageUrl" alt="Incident Photo" class="img-fluid w-100" />
                </div>
            </div>
        }
        
        <div class="card dashboard-card">
            <div class="card-header bg-secondary text-white">
                <h5 class="m-0"><i class="fas fa-info-circle me-2"></i>Status Information</h5>
            </div>
            <div class="card-body">
                <div class="timeline">
                    <div class="timeline-item">
                        <div class="timeline-marker @(true ? "bg-success" : "bg-secondary")"></div>
                        <div class="timeline-content">
                            <h6 class="mb-0">Report Submitted</h6>
                            <small>@Model.DateReported.ToString("MMM dd, yyyy hh:mm tt")</small>
                        </div>
                    </div>
                    <div class="timeline-item">
                        <div class="timeline-marker @(Model.Status != ReportStatus.Pending ? "bg-success" : "bg-secondary")"></div>
                        <div class="timeline-content">
                            <h6 class="mb-0">Verification</h6>
                            <small>@(Model.Status != ReportStatus.Pending ? "Verified" : "Pending verification")</small>
                        </div>
                    </div>
                    <div class="timeline-item">
                        <div class="timeline-marker @(Model.Status == ReportStatus.InProgress || Model.Status == ReportStatus.Resolved ? "bg-success" : "bg-secondary")"></div>
                        <div class="timeline-content">
                            <h6 class="mb-0">Response In Progress</h6>
                            <small>@(Model.Status == ReportStatus.InProgress ? "Currently responding" : (Model.Status == ReportStatus.Resolved ? "Completed" : "Not started"))</small>
                        </div>
                    </div>
                    <div class="timeline-item">
                        <div class="timeline-marker @(Model.Status == ReportStatus.Resolved ? "bg-success" : "bg-secondary")"></div>
                        <div class="timeline-content">
                            <h6 class="mb-0">Resolution</h6>
                            <small>@(Model.Status == ReportStatus.Resolved ? "Incident resolved" : "Pending resolution")</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Initialize the map
        mapboxgl.accessToken = 'pk.eyJ1IjoiY2hhYW5nZ2cwMTkzIiwiYSI6ImNtOHo5ODF6cDAxcTUyaXB0ODBtYXlhN3oifQ.SJ-eGgWUplbUFNE_UwK7JA'; // Replace with your Mapbox access token
        const map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/mapbox/streets-v11',
            center: [@Model.Longitude, @Model.Latitude],
            zoom: 15
        });

        // Add map controls
        map.addControl(new mapboxgl.NavigationControl());
        
        // Add a marker
        const marker = new mapboxgl.Marker({
            color: '#E03131'
        }).setLngLat([@Model.Longitude, @Model.Latitude])
          .addTo(map);
          
        // Add a popup
        new mapboxgl.Popup({
            offset: 25,
            closeButton: false
        }).setLngLat([@Model.Longitude, @Model.Latitude])
          .setHTML('<strong>@Model.Title</strong><br><span class="text-muted">@Model.Type</span>')
          .addTo(map);
    </script>
}

@section Styles {
    <style>
        .map-preview {
            width: 100%;
            border-radius: 0 0 5px 5px;
        }
        
        .timeline {
            position: relative;
            padding-left: 25px;
        }
        
        .timeline-item {
            position: relative;
            padding-bottom: 25px;
        }
        
        .timeline-item:last-child {
            padding-bottom: 0;
        }
        
        .timeline-marker {
            position: absolute;
            left: -25px;
            top: 4px;
            width: 15px;
            height: 15px;
            border-radius: 50%;
            border: 2px solid white;
            box-shadow: 0 0 4px rgba(0,0,0,0.2);
        }
        
        .timeline:before {
            content: '';
            position: absolute;
            left: -17.5px;
            top: 10px;
            bottom: 10px;
            width: 1px;
            background-color: #dee2e6;
        }
    </style>
} 