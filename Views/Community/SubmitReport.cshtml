@model THYNK.Models.DisasterReport
@{
    ViewData["Title"] = "Report Incident";
    Layout = "_CommunityLayout";
}

<div class="container-fluid px-4 py-4">
    <div class="row g-4">
        <!-- Main Form Section -->
        <div class="col-lg-8">
            <div class="card shadow-sm border-0">
                <div class="card-body p-4">
                    <div class="d-flex align-items-center mb-4">
                        <div class="report-icon bg-danger bg-opacity-10 text-danger rounded-circle p-3 me-3">
                            <i class="fas fa-exclamation-triangle fa-lg"></i>
                        </div>
                        <div>
                            <h5 class="mb-1">Report Incident</h5>
                            <p class="text-muted mb-0">Submit details about a disaster or accident</p>
                        </div>
                    </div>

                    <!-- Form Progress Bar -->
                    <div class="form-progress mb-4">
                        <div class="progress" style="height: 4px;">
                            <div id="form-progress-bar" class="progress-bar bg-success" style="width: 0%"></div>
                        </div>
                        <div class="d-flex justify-content-between mt-2">
                            <div class="progress-step" data-step="1">
                                <div class="step-circle">1</div>
                                <div class="step-label small">Basic Info</div>
                            </div>
                            <div class="progress-step" data-step="2">
                                <div class="step-circle">2</div>
                                <div class="step-label small">Location</div>
                            </div>
                            <div class="progress-step" data-step="3">
                                <div class="step-circle">3</div>
                                <div class="step-label small">Additional Details</div>
                            </div>
                        </div>
                    </div>

                    <form asp-action="SubmitReport" method="post" enctype="multipart/form-data" id="report-form">
                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                        <!-- Step 1: Basic Information -->
                        <div id="step1">
                            <div class="mb-4">
                                <label asp-for="Title" class="form-label small text-muted">Title</label>
                                <input asp-for="Title" class="form-control form-control-lg bg-light border-0" 
                                       placeholder="Brief title of the incident" required />
                                <span asp-validation-for="Title" class="text-danger"></span>
                            </div>

                            <div class="row mb-4">
                                <div class="col-md-6">
                                    <label asp-for="Type" class="form-label small text-muted">Incident Type</label>
                                    <select asp-for="Type" class="form-select bg-light border-0" required>
                                        @foreach (var type in Enum.GetValues(typeof(DisasterType)))
                                        {
                                            <option value="@type">@type</option>
                                        }
                                    </select>
                                    <span asp-validation-for="Type" class="text-danger"></span>
                                </div>
                                <div class="col-md-6">
                                    <label asp-for="Severity" class="form-label small text-muted">Severity Level</label>
                                    <select asp-for="Severity" class="form-select bg-light border-0" required>
                                        @foreach (var severity in Enum.GetValues(typeof(SeverityLevel)))
                                        {
                                            <option value="@severity">@severity</option>
                                        }
                                    </select>
                                    <span asp-validation-for="Severity" class="text-danger"></span>
                                </div>
                            </div>

                            <div class="mb-4">
                                <label asp-for="Description" class="form-label small text-muted">Description</label>
                                <textarea asp-for="Description" class="form-control bg-light border-0" rows="4" 
                                          placeholder="Detailed description of what happened" required></textarea>
                                <span asp-validation-for="Description" class="text-danger"></span>
                            </div>

                            <div class="mb-4">
                                <div class="form-check">
                                    <input type="checkbox" class="form-check-input" id="isAnonymous" name="IsAnonymous" value="true" />
                                    <input type="hidden" name="IsAnonymous" value="false" />
                                    <label class="form-check-label" for="isAnonymous">
                                        <i class="fas fa-user-secret me-1"></i> Submit anonymously
                                    </label>
                                </div>
                                <small class="text-muted d-block mt-1">
                                    <i class="fas fa-info-circle me-1"></i>
                                    Your identity will be hidden from the public, but authorities may still access your information for verification purposes.
                                </small>
                            </div>

                            <div class="d-flex justify-content-end">
                                <button type="button" class="btn rounded-pill px-4 next-step step-1-btn" data-step="1">
                                    Next - Set Location <i class="fas fa-map-marker-alt ms-2"></i>
                                </button>
                            </div>
                        </div>

                        <!-- Step 2: Location Details -->
                        <div id="step2" class="d-none">
                            <div class="mb-4">
                                <label class="form-label small text-muted">Location</label>
                                <div class="alert alert-light border mb-3 user-friendly-alert">
                                    <div class="d-flex">
                                        <i class="fas fa-info-circle text-primary me-3 mt-1"></i>
                                        <div>
                                            <p class="mb-0">To mark the incident location:</p>
                                            <ul class="mb-0 ps-3 mt-1">
                                                <li>Click "Detect" to use your current location, or</li>
                                                <li>Click anywhere on the map to place a marker</li>
                                                <li>Drag the red marker to adjust the exact position</li>
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                                <div class="input-group mb-3">
                                    <input asp-for="Location" id="location" class="form-control bg-light border-0" 
                                           placeholder="Complete address" required />
                                    <button type="button" class="btn btn-primary rounded-end" id="detect-location">
                                        <i class="fas fa-map-marker-alt me-1"></i> Detect
                                    </button>
                                </div>
                                <span asp-validation-for="Location" class="text-danger"></span>
                                
                                <!-- Display map inside step 2 -->
                                <div id="map" class="map-preview rounded-3 mb-4 mt-3"></div>
                            </div>

                            <div class="row mb-4">
                                <div class="col-md-6">
                                    <label asp-for="Purok" class="form-label small text-muted">Purok/Street</label>
                                    <input type="hidden" asp-for="Purok" id="purok" class="form-control bg-light border-0" 
                                           placeholder="Purok or Street number" />
                                    <span asp-validation-for="Purok" class="text-danger"></span>
                                </div>
                                <div class="col-md-6">
                                    <label asp-for="Barangay" class="form-label small text-muted">Barangay</label>
                                    <input type="hidden" asp-for="Barangay" id="barangay" class="form-control bg-light border-0" 
                                           placeholder="Barangay name" />
                                    <span asp-validation-for="Barangay" class="text-danger"></span>
                                </div>
                            </div>
                            
                            <div class="row mb-4">
                                <div class="col-md-6">
                                    <label asp-for="City" class="form-label small text-muted">City/Municipality</label>
                                    <input type="hidden" asp-for="City" id="city" class="form-control bg-light border-0" 
                                           placeholder="City or Municipality" />
                                    <span asp-validation-for="City" class="text-danger"></span>
                                </div>
                                <div class="col-md-6">
                                    <label asp-for="Country" class="form-label small text-muted">Country</label>
                                    <input type="hidden" asp-for="Country" id="country" class="form-control bg-light border-0" 
                                           placeholder="Country" value="Philippines" />
                                    <span asp-validation-for="Country" class="text-danger"></span>
                                </div>
                            </div>

                            <!-- Hidden fields for coordinates -->
                            <input type="hidden" asp-for="Latitude" id="latitude" />
                            <input type="hidden" asp-for="Longitude" id="longitude" />

                            <div class="d-flex justify-content-between">
                                <button type="button" class="btn btn-light rounded-pill px-4 prev-step">
                                    <i class="fas fa-arrow-left me-2"></i> Back
                                </button>
                                <button type="button" class="btn rounded-pill px-4 next-step step-2-btn" data-step="2">
                                    Next - Additional Details <i class="fas fa-file-alt ms-2"></i>
                                </button>
                            </div>
                        </div>

                        <!-- Step 3: Additional Information -->
                        <div id="step3" class="d-none">
                            <div class="mb-4">
                                <label class="form-label small text-muted">Photo <span class="text-danger">*</span> <small>(Required)</small></label>
                                <div class="input-group">
                                    <input type="file" class="form-control bg-light border-0" id="photo" name="photo" 
                                           accept="image/*" required />
                                    <button type="button" class="btn btn-light border-0" id="clear-photo">
                                        <i class="fas fa-times"></i>
                                    </button>
                                </div>
                                <small class="text-muted">Upload a clear photo of the incident (required for verification).</small>
                                
                                <!-- Photo preview -->
                                <div id="photoPreview" class="mt-3 d-none">
                                    <img src="#" class="img-fluid rounded mx-auto d-block" style="max-height: 200px; object-fit: contain;">
                                    <p class="text-center text-muted small mt-2">Image successfully uploaded</p>
                                </div>
                                
                                <!-- Missing image alert - shown when trying to submit without an image -->
                                <div class="alert alert-danger mt-3 d-none" id="missingImageAlert">
                                    <div class="d-flex align-items-center">
                                        <i class="fas fa-exclamation-circle me-2"></i>
                                        <div>Please upload an image to complete your report</div>
                                    </div>
                                </div>
                            </div>

                            <div class="mb-4">
                                <label asp-for="AdditionalInfo" class="form-label small text-muted">Additional Information (Optional)</label>
                                <textarea asp-for="AdditionalInfo" class="form-control bg-light border-0" rows="3" 
                                          placeholder="Any other details you'd like to share"></textarea>
                            </div>

                            <div class="d-flex justify-content-between">
                                <button type="button" class="btn btn-light rounded-pill px-4 prev-step">
                                    <i class="fas fa-arrow-left me-1"></i> Back
                                </button>
                                <button type="submit" id="submit-report-btn" class="btn btn-success rounded-pill px-4" disabled>
                                    <i class="fas fa-paper-plane me-1"></i>Submit Report
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Sidebar -->
        <div class="col-lg-4">
            <!-- Guidelines -->
            <div class="card shadow-sm border-0">
                <div class="card-body p-4">
                    <div class="d-flex align-items-center mb-4">
                        <div class="guidelines-icon bg-info bg-opacity-10 text-info rounded-circle p-3 me-3">
                            <i class="fas fa-info-circle fa-lg"></i>
                        </div>
                        <div>
                            <h6 class="mb-1">Reporting Guidelines</h6>
                            <p class="text-muted small mb-0">Important information to remember</p>
                        </div>
                    </div>
                    <div class="guidelines-content">
                        <div class="guideline-item mb-3">
                            <div class="d-flex">
                                <div class="guideline-icon bg-success bg-opacity-10 text-success">
                                    <i class="fas fa-check"></i>
                                </div>
                                <div class="guideline-text">
                                    <h6 class="mb-1">Be Accurate</h6>
                                    <p class="text-muted small mb-0">Provide precise details about the incident</p>
                                </div>
                            </div>
                        </div>
                        <div class="guideline-item mb-3">
                            <div class="d-flex">
                                <div class="guideline-icon bg-warning bg-opacity-10 text-warning">
                                    <i class="fas fa-exclamation"></i>
                                </div>
                                <div class="guideline-text">
                                    <h6 class="mb-1">Stay Safe</h6>
                                    <p class="text-muted small mb-0">Do not put yourself in danger to report</p>
                                </div>
                            </div>
                        </div>
                        <div class="guideline-item">
                            <div class="d-flex">
                                <div class="guideline-icon bg-info bg-opacity-10 text-info">
                                    <i class="fas fa-camera"></i>
                                </div>
                                <div class="guideline-text">
                                    <h6 class="mb-1">Include Photos</h6>
                                    <p class="text-muted small mb-0">Add clear images if safely possible</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Report Verification Modal -->
<div class="modal fade" id="reportVerificationModal" tabindex="-1" aria-hidden="true" data-bs-backdrop="static">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border-0">
            <div class="modal-body p-0">
                <div class="text-center p-4">
                    <div class="verification-icon bg-success bg-opacity-10 mx-auto mb-4 rounded-circle">
                        <i class="fas fa-check-circle fa-3x text-success"></i>
                    </div>
                    <h4 class="mb-3">Report Submitted Successfully!</h4>
                    <p class="mb-4">Your incident report has been submitted and will be verified shortly by our team. Thank you for contributing to community safety!</p>
                    
                    <div class="d-flex justify-content-center mb-3">
                        <div class="verification-status">
                            <div class="d-flex align-items-center">
                                <div class="verification-stage active">
                                    <i class="fas fa-paper-plane"></i>
                                </div>
                                <div class="verification-line"></div>
                                <div class="verification-stage active">
                                    <i class="fas fa-inbox"></i>
                                </div>
                                <div class="verification-line"></div>
                                <div class="verification-stage">
                                    <i class="fas fa-clipboard-check"></i>
                                </div>
                                <div class="verification-line"></div>
                                <div class="verification-stage">
                                    <i class="fas fa-check"></i>
                                </div>
                            </div>
                            <div class="d-flex justify-content-between mt-2">
                                <span class="small text-muted">Submitted</span>
                                <span class="small text-muted">Received</span>
                                <span class="small text-muted">Verified</span>
                                <span class="small text-muted">Published</span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="alert alert-light border text-start mb-4">
                        <div class="d-flex">
                            <i class="fas fa-info-circle text-primary me-2 mt-1"></i>
                            <div>
                                <p class="mb-0 small">Your report will be processed within 30 minutes. You'll receive a notification once it's verified and published on the community map.</p>
                            </div>
                        </div>
                    </div>
                    
                    <a href="/Community/CommunityFeed" class="btn btn-success px-4 py-2">
                        Continue to Community Feed
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        /* Existing styles */
        .map-preview {
            height: 300px;
            border-radius: 0.5rem;
            width: 100%;
            border: 1px solid #ddd;
        }

        .report-icon,
        .map-icon,
        .guidelines-icon {
            width: 48px;
            height: 48px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .guideline-icon {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 1rem;
            margin-left: -1.5rem;
            box-shadow: 0 3px 6px rgba(0,0,0,0.1);
            position: relative;
            z-index: 2;
        }

        .guideline-item {
            border-left: 2px solid #f5f7fa;
            padding-left: 1rem;
            margin-left: 0.5rem;
            position: relative;
        }
        
        .guideline-item:last-child {
            border-left: 2px solid transparent;
        }
        
        .guideline-text {
            padding-top: 0.25rem;
        }
        
        .guidelines-content {
            position: relative;
            padding-top: 0.5rem;
        }

        /* Form controls improved styling */
        .form-control,
        .form-select,
        .form-control-lg,
        input.bg-light,
        select.bg-light,
        textarea.bg-light {
            background-color: #f5f7fa !important;
            border: 1px solid #e9ecef !important;
            color: #495057;
        }

        .form-control:focus,
        .form-select:focus {
            box-shadow: 0 0 0 0.15rem rgba(79, 111, 255, 0.15);
            border-color: #dee2e6;
        }

        .form-control,
        .form-select {
            transition: all 0.2s ease-in-out;
            font-size: 0.95rem;
        }

        .form-control-lg {
            font-size: 1rem;
        }

        textarea.form-control {
            min-height: 120px;
        }

        .form-control:hover,
        .form-select:hover {
            background-color: #f1f3f5 !important;
        }
        
        /* Labels and text consistency */
        .form-label {
            font-weight: 500;
            color: #495057;
            margin-bottom: 0.5rem;
            font-size: 0.9rem;
            letter-spacing: 0.01rem;
        }
        
        small.text-muted, 
        .small {
            color: #6c757d !important;
            font-size: 0.85rem;
        }
        
        /* Card styling adjustments */
        .card {
            box-shadow: 0 2px 12px rgba(0, 0, 0, 0.05) !important;
            border-radius: 12px;
            background-color: #ffffff;
        }
        
        .card-body {
            padding: 1.75rem !important;
        }

        /* Heading and title styles */
        h5.mb-1, h6.mb-1 {
            font-weight: 600;
            color: #343a40;
        }
        
        .text-muted {
            color: #6c757d !important;
        }

        .alert-light {
            background-color: #f8f9fa;
        }
        
        .mapboxgl-marker {
            cursor: pointer;
        }
        
        .mapboxgl-ctrl-group {
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }

        /* New styles for multi-step form */
        .form-progress {
            position: relative;
            padding: 0 10px;
            margin-bottom: 2rem;
        }

        .progress {
            background-color: #e9ecef;
            height: 5px !important;
        }
        
        .progress-bar {
            transition: width 0.5s ease;
        }

        .progress-step {
            display: flex;
            flex-direction: column;
            align-items: center;
            position: relative;
            z-index: 1;
        }

        .step-circle {
            width: 36px;
            height: 36px;
            border-radius: 50%;
            background-color: #f0f0f0;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            color: #6c757d;
            border: 2px solid #e9ecef;
            transition: all 0.3s ease;
            margin-bottom: 6px;
        }

        .step-label {
            margin-top: 3px;
            color: #6c757d;
            transition: all 0.3s ease;
            font-weight: 500;
        }

        .progress-step.active .step-circle {
            background-color: #4f6fff;
            color: white;
            border-color: #4f6fff;
            transform: scale(1.1);
            box-shadow: 0 0 0 4px rgba(79, 111, 255, 0.2);
        }

        .progress-step.active .step-label {
            color: #4f6fff;
            font-weight: 600;
        }

        .progress-step.completed .step-circle {
            background-color: #28a745;
            color: white;
            border-color: #28a745;
            box-shadow: 0 0 0 4px rgba(40, 167, 69, 0.2);
        }

        /* Animation for form steps */
        @@keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        #step1, #step2, #step3 {
            animation: fadeIn 0.3s ease;
        }

        /* Button style for multi-step form */
        .btn {
            transition: all 0.3s ease;
            font-weight: 500;
            font-size: 0.95rem;
            padding: 0.5rem 1.25rem;
            letter-spacing: 0.01rem;
            border: none;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        
        .btn-light {
            background-color: #f1f3f5;
            color: #495057;
        }
        
        .btn-light:hover {
            background-color: #e9ecef;
        }
        
        .step-1-btn {
            background-color: #199b37; /* Green color for step 1 */
            color: white;
        }
        
        .step-1-btn:hover {
            background-color: #40b45f;
            color: white;
        }
        
        .step-2-btn {
            background-color: #4f6fff; /* Blue color for step 2 */
            color: white;
        }
        
        .step-2-btn:hover {
            background-color: #3a5be0;
            color: white;
        }
        
        /* For form validation feedback */
        .field-required {
            position: relative;
        }
        
        .field-required::after {
            content: "Required";
            position: absolute;
            top: -8px;
            right: 10px;
            background-color: #dc3545;
            color: white;
            font-size: 10px;
            padding: 0 5px;
            border-radius: 3px;
            animation: fadeIn 0.3s ease;
        }
        
        .map-required {
            border: 2px solid #dc3545 !important;
            box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25) !important;
        }
        
        /* Animation for button shake on validation error */
        @@keyframes shake {
            0%, 100% { transform: translateX(0); }
            25% { transform: translateX(-5px); }
            75% { transform: translateX(5px); }
        }
        
        .shake-animation {
            animation: shake 0.3s ease;
        }
        
        /* Styling for user-friendly alerts */
        .user-friendly-alert {
            background-color: #f8f9fa;
            border-left: 4px solid #4f6fff !important;
            border-radius: 8px;
        }
        
        .user-friendly-alert ul {
            list-style-type: none;
        }
        
        .user-friendly-alert ul li {
            position: relative;
            padding-left: 8px;
            margin-bottom: 6px;
            font-size: 0.9rem;
        }
        
        .user-friendly-alert ul li:before {
            content: "•";
            position: absolute;
            left: -8px;
            color: #4f6fff;
        }
        
        /* Enhanced image preview */
        #photoPreview {
            background-color: #f8f9fa;
            border-radius: 8px;
            padding: 15px;
            transition: all 0.3s ease;
            border: 1px solid #e9ecef;
        }
        
        #photoPreview img {
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
            border: 3px solid white;
            max-width: 90%;
        }

        /* Verification modal styles */
        .verification-icon {
            width: 90px;
            height: 90px;
            display: flex;
            align-items: center;
            justify-content: center;
            animation: pulse 2s infinite;
        }
        
        @@keyframes pulse {
            0% {
                box-shadow: 0 0 0 0 rgba(40, 167, 69, 0.4);
            }
            70% {
                box-shadow: 0 0 0 15px rgba(40, 167, 69, 0);
            }
            100% {
                box-shadow: 0 0 0 0 rgba(40, 167, 69, 0);
            }
        }
        
        .verification-status {
            width: 100%;
            max-width: 400px;
        }
        
        .verification-stage {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: #f0f0f0;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #999;
            position: relative;
            z-index: 2;
        }
        
        .verification-stage.active {
            background-color: rgba(40, 167, 69, 0.1);
            color: #28a745;
        }
        
        .verification-line {
            flex-grow: 1;
            height: 3px;
            background-color: #f0f0f0;
            position: relative;
            z-index: 1;
        }
        
        .verification-stage.active + .verification-line {
            background-color: rgba(40, 167, 69, 0.1);
        }
        
        #reportVerificationModal .modal-content {
            border-radius: 16px;
            overflow: hidden;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        }
    </style>
}

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script src="https://api.mapbox.com/mapbox-gl-js/v2.9.1/mapbox-gl.js"></script>
    <script>
        // Initialize the map
        mapboxgl.accessToken = 'pk.eyJ1IjoiY2hhYW5nZ2cwMTkzIiwiYSI6ImNtOHo5ODF6cDAxcTUyaXB0ODBtYXlhN3oifQ.SJ-eGgWUplbUFNE_UwK7JA'; // Replace with your Mapbox access token
        const map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/mapbox/streets-v11',
            center: [120.9842, 14.5995], // Default to Philippines
            zoom: 12
        });

        // Add navigation controls
        map.addControl(new mapboxgl.NavigationControl(), 'top-right');

        // Initialize marker
        let marker = new mapboxgl.Marker({
            draggable: true
        })
        .setLngLat([120.9842, 14.5995])
        .addTo(map);

        // Update coordinates and address when marker is dragged
        marker.on('dragend', function() {
            const lngLat = marker.getLngLat();
            document.getElementById('latitude').value = lngLat.lat;
            document.getElementById('longitude').value = lngLat.lng;
            getAddressDetails(lngLat.lat, lngLat.lng);
        });

        // Detect current location
        document.getElementById('detect-location').addEventListener('click', function() {
            // Show loading state
            this.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Detecting...';
            this.disabled = true;
            
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function(position) {
                    const lat = position.coords.latitude;
                    const lng = position.coords.longitude;
                    
                    // Update form fields
                    document.getElementById('latitude').value = lat;
                    document.getElementById('longitude').value = lng;
                    
                    // Update map
                    map.flyTo({
                        center: [lng, lat],
                        zoom: 15,
                        essential: true
                    });
                    
                    marker.setLngLat([lng, lat]);
                    
                    // Get address details
                    getAddressDetails(lat, lng);
                    
                    // Reset button
                    document.getElementById('detect-location').innerHTML = '<i class="fas fa-map-marker-alt me-1"></i> Detect';
                    document.getElementById('detect-location').disabled = false;
                    
                }, function(error) {
                    console.error('Error getting location:', error);
                    alert('Could not get your location. Please enter it manually or pin on the map.');
                    
                    // Reset button
                    document.getElementById('detect-location').innerHTML = '<i class="fas fa-map-marker-alt me-1"></i> Detect';
                    document.getElementById('detect-location').disabled = false;
                }, {
                    enableHighAccuracy: true,
                    timeout: 10000,
                    maximumAge: 0
                });
            } else {
                alert('Geolocation is not supported by your browser. Please enter your location manually.');
                
                // Reset button
                document.getElementById('detect-location').innerHTML = '<i class="fas fa-map-marker-alt me-1"></i> Detect';
                document.getElementById('detect-location').disabled = false;
            }
        });
        
        // Function to extract address components from MapBox geocoding response
        function getAddressDetails(lat, lng) {
            fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${lng},${lat}.json?access_token=${mapboxgl.accessToken}&types=address,neighborhood,locality,place,region,country`)
                .then(response => response.json())
                .then(data => {
                    if (data.features && data.features.length > 0) {
                        // Set full address
                        document.getElementById('location').value = data.features[0].place_name;
                        
                        // Parse address components
                        let street = '';
                        let neighborhood = '';
                        let locality = '';
                        let region = '';
                        let country = 'Philippines';
                        
                        // Extract address components from features
                        data.features.forEach(feature => {
                            if (feature.place_type.includes('address')) {
                                street = feature.text || '';
                            }
                            if (feature.place_type.includes('neighborhood')) {
                                neighborhood = feature.text || '';
                            }
                            if (feature.place_type.includes('locality')) {
                                locality = feature.text || '';
                            }
                            if (feature.place_type.includes('place')) {
                                region = feature.text || '';
                            }
                            if (feature.place_type.includes('country')) {
                                country = feature.text || 'Philippines';
                            }
                        });
                        
                        // Try to extract more detailed info from the context
                        if (data.features[0].context) {
                            data.features[0].context.forEach(context => {
                                const id = context.id.split('.')[0];
                                
                                if (id === 'neighborhood' && !neighborhood) {
                                    neighborhood = context.text;
                                }
                                if (id === 'locality' && !locality) {
                                    locality = context.text;
                                }
                                if (id === 'place' && !region) {
                                    region = context.text;
                                }
                                if (id === 'country') {
                                    country = context.text;
                                }
                            });
                        }
                        
                        // Populate form fields
                        document.getElementById('purok').value = street || neighborhood || '';
                        document.getElementById('barangay').value = neighborhood || locality || '';
                        document.getElementById('city').value = locality || region || '';
                        document.getElementById('country').value = country;
                    }
                })
                .catch(error => {
                    console.error('Error reverse geocoding:', error);
                });
        }
        
        // Add click event to map to allow users to click anywhere and place marker
        map.on('click', function(e) {
            const lngLat = e.lngLat;
            
            // Update marker position
            marker.setLngLat(lngLat);
            
            // Update form fields
            document.getElementById('latitude').value = lngLat.lat;
            document.getElementById('longitude').value = lngLat.lng;
            
            // Get address details
            getAddressDetails(lngLat.lat, lngLat.lng);
        });

        // Handle photo upload preview
        document.getElementById('photo').addEventListener('change', function() {
            const file = this.files[0];
            if (file) {
                // Get preview container
                const preview = document.getElementById('photoPreview');
                
                // Create a new image element if it doesn't exist
                let previewImg = preview.querySelector('img');
                if (!previewImg) {
                    previewImg = document.createElement('img');
                    previewImg.className = 'img-fluid rounded mx-auto d-block';
                    previewImg.style.maxHeight = '200px';
                    previewImg.style.objectFit = 'contain';
                    preview.prepend(previewImg);
                }
                
                // Read and display the image
                const reader = new FileReader();
                reader.onload = function(e) {
                    previewImg.src = e.target.result;
                    preview.classList.remove('d-none');
                    
                    // Enable the submit button once image is uploaded
                    document.getElementById('submit-report-btn').disabled = false;
                    
                    // Hide the missing image alert if it was shown
                    document.getElementById('missingImageAlert').classList.add('d-none');
                };
                reader.readAsDataURL(file);
            }
        });
        
        // Clear photo button
        document.getElementById('clear-photo').addEventListener('click', function() {
            const photoInput = document.getElementById('photo');
            photoInput.value = '';
            document.getElementById('photoPreview').classList.add('d-none');
            document.getElementById('submit-report-btn').disabled = true;
        });

        // Form step navigation
        let currentStep = 1;
        const totalSteps = 3;
        
        // Function to handle field validation without notifications
        function handleRequiredFields(fieldIds) {
            // Remove previous highlighting
            document.querySelectorAll('.field-required').forEach(el => {
                el.classList.remove('field-required');
            });
            
            let emptyFieldFound = false;
            let firstEmptyField = null;
            
            // Check each field
            fieldIds.forEach(fieldId => {
                const field = document.getElementById(fieldId);
                if (field && !field.value.trim()) {
                    field.closest('.mb-4').classList.add('field-required');
                    
                    if (!emptyFieldFound) {
                        firstEmptyField = field;
                        emptyFieldFound = true;
                    }
                }
            });
            
            // Focus the first empty field if found
            if (firstEmptyField) {
                firstEmptyField.focus();
            }
            
            return !emptyFieldFound;
        }

        // Function to check map coordinates
        function validateMapLocation() {
            const hasCoordinates = document.getElementById('latitude').value && 
                                  document.getElementById('longitude').value;
            
            const mapElement = document.getElementById('map');
            
            if (!hasCoordinates) {
                mapElement.classList.add('map-required');
                return false;
            } else {
                mapElement.classList.remove('map-required');
                return true;
            }
        }

        // Next step buttons
        document.querySelectorAll('.next-step').forEach(button => {
            button.addEventListener('click', function() {
                const stepNumber = parseInt(this.getAttribute('data-step'));
                
                let isValid = true;
                
                // Step 1 validation
                if (stepNumber === 1) {
                    const step1Fields = ['Title', 'Description'];
                    isValid = handleRequiredFields(step1Fields);
                }
                
                // Step 2 validation
                if (stepNumber === 2) {
                    const step2Fields = ['location', 'purok', 'barangay', 'city'];
                    const fieldsValid = handleRequiredFields(step2Fields);
                    const mapValid = validateMapLocation();
                    
                    isValid = fieldsValid && mapValid;
                    
                    // If map is invalid but fields are valid, scroll to map
                    if (!mapValid && fieldsValid) {
                        document.getElementById('map').scrollIntoView({ behavior: 'smooth', block: 'center' });
                    }
                }
                
                // If validation passes, proceed to next step
                if (isValid) {
                    document.getElementById(`step${currentStep}`).classList.add('d-none');
                    document.querySelector(`.progress-step[data-step="${currentStep}"]`).classList.add('completed');
                    currentStep++;
                    document.getElementById(`step${currentStep}`).classList.remove('d-none');
                    document.querySelector(`.progress-step[data-step="${currentStep}"]`).classList.add('active');
                    updateProgressBar();
                    
                    // If this is step 2 appearing, trigger map resize to fix rendering issues
                    if (currentStep === 2) {
                        setTimeout(() => {
                            map.resize();
                        }, 100);
                    }
                } else {
                    // Subtle animation feedback on button
                    this.classList.add('shake-animation');
                    setTimeout(() => {
                        this.classList.remove('shake-animation');
                    }, 300);
                }
            });
        });
        
        // Previous step buttons
        document.querySelectorAll('.prev-step').forEach(button => {
            button.addEventListener('click', function() {
                // Hide current step
                document.getElementById(`step${currentStep}`).classList.add('d-none');
                
                // Remove active class from current step
                document.querySelector(`.progress-step[data-step="${currentStep}"]`).classList.remove('active');
                
                // Move to previous step
                currentStep--;
                
                // Show previous step
                document.getElementById(`step${currentStep}`).classList.remove('d-none');
                
                // Update progress bar
                updateProgressBar();
                
                // If going back to step 2, trigger map resize
                if (currentStep === 2) {
                    setTimeout(() => {
                        map.resize();
                    }, 100);
                }
            });
        });
        
        // Update progress bar
        function updateProgressBar() {
            const progressBar = document.getElementById('form-progress-bar');
            const progress = ((currentStep - 1) / (totalSteps - 1)) * 100;
            progressBar.style.width = `${progress}%`;
        }
        
        // Submit button handling
        document.getElementById('submit-report-btn').addEventListener('click', function(e) {
            e.preventDefault();
            
            // First check if an image is uploaded
            const photoInput = document.getElementById('photo');
            if (!photoInput.files || !photoInput.files[0]) {
                // Show the missing image alert
                document.getElementById('missingImageAlert').classList.remove('d-none');
                
                // Scroll to the photo section
                photoInput.scrollIntoView({ behavior: 'smooth', block: 'center' });
                
                // Add shake animation to the photo input
                photoInput.closest('.mb-4').classList.add('shake-animation');
                setTimeout(() => {
                    photoInput.closest('.mb-4').classList.remove('shake-animation');
                }, 500);
                
                return;
            }
            
            // Validate all fields in step 3
            let isValid = true;
            
            // If valid, show loading state and submit
            if (isValid) {
                // Disable the submit button to prevent double submission
                this.disabled = true;
                
                // Show loading state
                this.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>Submitting...';
                
                // Submit the form immediately
                document.getElementById('report-form').submit();
                
                // Show the verification modal after form submission
                $('#reportVerificationModal').modal('show');
            }
        });
        
        // Initialize first step
        document.querySelector(`.progress-step[data-step="1"]`).classList.add('active');
    </script>
}