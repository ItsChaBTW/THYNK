@model THYNK.Models.DisasterReport
@{
    ViewData["Title"] = "Report Incident";
    Layout = "_CommunityLayout";
}

<!-- Remove the notification element -->

<div class="container-fluid px-4 py-4">
    <div class="row g-4">
        <!-- Main Form Section -->
        <div class="col-lg-8">
            <div class="card shadow-sm border-0">
                <div class="card-body p-4">
                    <div class="d-flex align-items-center mb-4">
                        <div class="report-icon bg-danger-soft text-danger rounded-circle p-3 me-3">
                            <i class="fas fa-exclamation-triangle fa-lg"></i>
                        </div>
                        <div>
                            <h5 class="mb-1">Report Incident</h5>
                            <p class="text-muted mb-0">Submit details about a disaster or accident</p>
                        </div>
                    </div>

                    <!-- Notification Area -->
                    <div id="notification-area" class="mb-4 d-none">
                        <div class="alert alert-light-soft border-start border-2 ps-3 d-flex align-items-center">
                            <i class="fas fa-info-circle text-primary me-3"></i>
                            <span id="notification-message"></span>
                        </div>
                    </div>

                    <!-- Progress Steps -->
                    <div class="form-progress mb-4">
                        <div class="progress" style="height: 4px;">
                            <div class="progress-bar bg-primary" role="progressbar" style="width: 0%;" id="form-progress-bar"></div>
                        </div>
                        <div class="d-flex justify-content-between mt-2">
                            <span class="progress-step active" data-step="1">Basic Info</span>
                            <span class="progress-step" data-step="2">Location</span>
                            <span class="progress-step" data-step="3">Details</span>
                        </div>
                    </div>

                    <form asp-action="SubmitReport" method="post" enctype="multipart/form-data" id="report-form">
                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                        <!-- Step 1: Basic Information -->
                        <div class="form-step-content" id="step1">
                            <div class="mb-4">
                                <label asp-for="Title" class="form-label small text-muted">Title</label>
                                <input asp-for="Title" class="form-control form-control-lg bg-light-soft border-0" 
                                       placeholder="Brief title of the incident" required />
                                <span asp-validation-for="Title" class="text-danger"></span>
                            </div>

                            <div class="row mb-4">
                                <div class="col-md-6">
                                    <label asp-for="Type" class="form-label small text-muted">Incident Type</label>
                                    <select asp-for="Type" class="form-select bg-light-soft border-0" required>
                                        @foreach (var type in Enum.GetValues(typeof(DisasterType)))
                                        {
                                            <option value="@type">@type</option>
                                        }
                                    </select>
                                    <span asp-validation-for="Type" class="text-danger"></span>
                                </div>
                                <div class="col-md-6">
                                    <label asp-for="Severity" class="form-label small text-muted">Severity Level</label>
                                    <select asp-for="Severity" class="form-select bg-light-soft border-0" required>
                                        @foreach (var severity in Enum.GetValues(typeof(SeverityLevel)))
                                        {
                                            <option value="@severity">@severity</option>
                                        }
                                    </select>
                                    <span asp-validation-for="Severity" class="text-danger"></span>
                                </div>
                            </div>

                            <div class="mb-4">
                                <label asp-for="Description" class="form-label small text-muted">Description</label>
                                <textarea asp-for="Description" class="form-control bg-light-soft border-0" rows="4" 
                                          placeholder="Detailed description of what happened" required></textarea>
                                <span asp-validation-for="Description" class="text-danger"></span>
                            </div>

                            <div class="d-flex justify-content-end">
                                <button type="button" class="btn btn-primary-gradient rounded-pill px-4 next-step" data-step="1">
                                    Next <i class="fas fa-arrow-right ms-1"></i>
                                </button>
                            </div>
                        </div>

                        <!-- Step 2: Location Information -->
                        <div class="form-step-content d-none" id="step2">
                            <div class="mb-4">
                                <label class="form-label small text-muted">Location</label>
                                <div class="alert alert-light border-0 bg-info-soft mb-3">
                                    <i class="fas fa-info-circle text-primary me-2"></i>
                                    Use the map to pin the exact location or click "Detect" to use your current location.
                                </div>
                                <div class="input-group mb-3">
                                    <input asp-for="Location" id="location" class="form-control bg-light-soft border-0" 
                                           placeholder="Complete address" required />
                                    <button type="button" class="btn btn-primary-gradient rounded-end" id="detect-location">
                                        <i class="fas fa-map-marker-alt me-1"></i> Detect
                                    </button>
                                </div>
                                <span asp-validation-for="Location" class="text-danger"></span>
                            </div>

                            <div class="row mb-4">
                                <div class="col-md-6">
                                    <label asp-for="Purok" class="form-label small text-muted">Purok/Street</label>
                                    <input asp-for="Purok" id="purok" class="form-control bg-light-soft border-0" 
                                           placeholder="Purok or Street number" />
                                    <span asp-validation-for="Purok" class="text-danger"></span>
                                </div>
                                <div class="col-md-6">
                                    <label asp-for="Barangay" class="form-label small text-muted">Barangay</label>
                                    <input asp-for="Barangay" id="barangay" class="form-control bg-light-soft border-0" 
                                           placeholder="Barangay name" />
                                    <span asp-validation-for="Barangay" class="text-danger"></span>
                                </div>
                            </div>
                            
                            <div class="row mb-4">
                                <div class="col-md-6">
                                    <label asp-for="City" class="form-label small text-muted">City/Municipality</label>
                                    <input asp-for="City" id="city" class="form-control bg-light-soft border-0" 
                                           placeholder="City or Municipality" />
                                    <span asp-validation-for="City" class="text-danger"></span>
                                </div>
                                <div class="col-md-6">
                                    <label asp-for="Country" class="form-label small text-muted">Country</label>
                                    <input asp-for="Country" id="country" class="form-control bg-light-soft border-0" 
                                           placeholder="Country" value="Philippines" />
                                    <span asp-validation-for="Country" class="text-danger"></span>
                                </div>
                            </div>

                            <!-- Hidden fields for coordinates -->
                            <input type="hidden" asp-for="Latitude" id="latitude" />
                            <input type="hidden" asp-for="Longitude" id="longitude" />

                            <div class="d-flex justify-content-between">
                                <button type="button" class="btn btn-light-gradient rounded-pill px-4 prev-step">
                                    <i class="fas fa-arrow-left me-1"></i> Back
                                </button>
                                <button type="button" class="btn btn-primary-gradient rounded-pill px-4 next-step" data-step="2">
                                    Next <i class="fas fa-arrow-right ms-1"></i>
                                </button>
                            </div>
                        </div>

                        <!-- Step 3: Additional Details -->
                        <div class="form-step-content d-none" id="step3">
                            <div class="mb-4">
                                <label class="form-label small text-muted">Photo (Optional)</label>
                                <div class="photo-upload-area bg-light-soft rounded p-3 text-center mb-3">
                                    <div class="preview-area mb-3 d-none">
                                        <img id="photo-preview" class="img-fluid rounded mb-2" style="max-height: 200px;">
                                    </div>
                                    <div class="upload-prompt">
                                        <i class="fas fa-camera text-muted mb-2 fa-2x upload-icon"></i>
                                        <p class="text-muted mb-2 upload-text">Upload a photo of the incident</p>
                                        <div class="input-group">
                                            <input type="file" class="form-control bg-light-soft border-0" id="photo" name="photo" 
                                                   accept="image/*" />
                                            <button type="button" class="btn btn-light-gradient border-0" id="clear-photo">
                                                <i class="fas fa-times"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="mb-4">
                                <label asp-for="AdditionalInfo" class="form-label small text-muted">Additional Information (Optional)</label>
                                <textarea asp-for="AdditionalInfo" class="form-control bg-light-soft border-0" rows="3" 
                                          placeholder="Any other details you'd like to share"></textarea>
                            </div>

                            <div class="d-flex justify-content-between">
                                <button type="button" class="btn btn-light-gradient rounded-pill px-4 prev-step">
                                    <i class="fas fa-arrow-left me-1"></i> Back
                                </button>
                                <button type="button" id="submit-report-btn" class="btn btn-success-gradient rounded-pill px-4">
                                    <i class="fas fa-paper-plane me-1"></i>Submit Report
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <!-- Sidebar -->
        <div class="col-lg-4">
            <!-- Map Preview -->
            <div class="card shadow-sm border-0 mb-4">
                <div class="card-body p-4">
                    <div class="d-flex align-items-center mb-3">
                        <div class="map-icon bg-primary-soft text-primary rounded-circle p-3 me-3">
                            <i class="fas fa-map-marked-alt fa-lg"></i>
                        </div>
                        <div>
                            <h6 class="mb-1">Pin Location</h6>
                            <p class="text-muted small mb-0">Drag the marker to set the exact location</p>
                        </div>
                    </div>
                    <div id="map" class="map-preview rounded-3"></div>
                </div>
            </div>
            
            <!-- Guidelines -->
            <div class="card shadow-sm border-0">
                <div class="card-body p-4">
                    <div class="d-flex align-items-center mb-3">
                        <div class="guidelines-icon bg-info-soft text-info rounded-circle p-3 me-3">
                            <i class="fas fa-info-circle fa-lg"></i>
                        </div>
                        <div>
                            <h6 class="mb-1">Reporting Guidelines</h6>
                            <p class="text-muted small mb-0">Important information to remember</p>
                        </div>
                    </div>
                    <div class="guidelines-content">
                        <div class="d-flex mb-3">
                            <div class="guideline-icon bg-success-soft text-success rounded-circle p-2 me-3">
                                <i class="fas fa-check"></i>
                            </div>
                            <div>
                                <h6 class="mb-1">Be Accurate</h6>
                                <p class="text-muted small mb-0">Provide precise details about the incident</p>
                            </div>
                        </div>
                        <div class="d-flex mb-3">
                            <div class="guideline-icon bg-warning-soft text-warning rounded-circle p-2 me-3">
                                <i class="fas fa-exclamation"></i>
                            </div>
                            <div>
                                <h6 class="mb-1">Stay Safe</h6>
                                <p class="text-muted small mb-0">Do not put yourself in danger to report</p>
                            </div>
                        </div>
                        <div class="d-flex">
                            <div class="guideline-icon bg-info-soft text-info rounded-circle p-2 me-3">
                                <i class="fas fa-camera"></i>
                            </div>
                            <div>
                                <h6 class="mb-1">Include Photos</h6>
                                <p class="text-muted small mb-0">Add clear images if safely possible</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        :root {
            --primary-color: #4361ee;
            --danger-color: #ef476f;
            --light-bg: #f5f7fa;
            --dark-text: #2b2d42;
            --card-bg: #ffffff;
            --muted-text: #6c757d;
        }
        
        body {
            color: var(--dark-text);
        }
        
        .card {
            background-color: var(--card-bg);
            border-radius: 0.75rem;
        }
        
        .map-preview {
            height: 300px;
            border-radius: 0.5rem;
        }

        .report-icon,
        .map-icon,
        .guidelines-icon {
            width: 48px;
            height: 48px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .guideline-icon {
            width: 32px;
            height: 32px;
        }
        
        /* Softer background colors */
        .bg-light-soft {
            background-color: var(--light-bg);
        }
        
        .bg-primary-soft {
            background-color: rgba(67, 97, 238, 0.1);
        }
        
        .bg-danger-soft {
            background-color: rgba(239, 71, 111, 0.1);
        }
        
        .bg-success-soft {
            background-color: rgba(64, 191, 125, 0.1);
        }
        
        .bg-warning-soft {
            background-color: rgba(255, 209, 102, 0.1);
        }
        
        .bg-info-soft {
            background-color: rgba(103, 180, 204, 0.1);
        }

        .form-control:focus,
        .form-select:focus {
            box-shadow: none;
            border-color: #dee2e6;
        }

        .form-control,
        .form-select {
            transition: all 0.2s ease-in-out;
            background-color: rgba(245, 247, 250, 0.8) !important;
            border: 1px solid rgba(84, 84, 84, 0.1) !important;
        }

        .form-control:hover,
        .form-select:hover {
            background-color: rgba(245, 247, 250, 1) !important;
            border-color: rgba(84, 84, 84, 0.2) !important;
        }

        .form-control:focus,
        .form-select:focus {
            background-color: #ffffff !important;
            border-color: var(--primary-color) !important;
            box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.1);
        }

        .alert-light {
            background-color: #f8f9fa;
            border-color: #e9ecef;
        }

        .btn {
            transition: all 0.2s ease-in-out;
        }

        .btn:hover {
            transform: translateY(-1px);
        }

        .btn-light {
            background-color: #f8f9fa;
            border-color: #e9ecef;
        }

        .btn-light:hover {
            background-color: #e9ecef;
            border-color: #dee2e6;
        }
        
        /* Progress steps */
        .form-progress {
            position: relative;
        }
        
        .progress-step {
            font-size: 0.8rem;
            color: var(--muted-text);
            font-weight: 500;
            position: relative;
        }
        
        .progress-step::before {
            content: '';
            position: absolute;
            top: -16px;
            left: 50%;
            transform: translateX(-50%);
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background-color: #dee2e6;
            z-index: 1;
        }
        
        .progress-step.active {
            color: var(--primary-color);
        }
        
        .progress-step.active::before {
            background-color: var(--primary-color);
        }
        
        .progress-step.completed::before {
            background-color: var(--primary-color);
        }
        
        /* Photo upload area */
        .photo-upload-area {
            background-color: rgba(245, 247, 250, 0.8) !important;
            border: 2px dashed rgba(84, 84, 84, 0.2) !important;
        }
        
        .photo-upload-area:hover {
            background-color: rgba(245, 247, 250, 1) !important;
            border-color: var(--primary-color) !important;
        }
        
        .corner-label {
            position: absolute;
            top: 10px;
            right: 10px;
            background-color: rgba(67, 97, 238, 0.1);
            color: var(--primary-color);
            padding: 4px 10px;
            border-radius: 50px;
            font-size: 12px;
            font-weight: 500;
        }
        
        @@media (max-width: 992px) {
            .container-fluid {
                padding-left: 1rem;
                padding-right: 1rem;
            }
            
            .card-body {
                padding: 1.25rem !important;
            }
        }

        /* Button gradients */
        .btn-primary-gradient {
            background: linear-gradient(135deg, var(--primary-color), #6283fb);
            color: white;
            border: none;
            box-shadow: 0 2px 5px rgba(67, 97, 238, 0.3);
        }

        .btn-primary-gradient:hover {
            background: linear-gradient(135deg, #536ee8, #7b95f9);
            box-shadow: 0 4px 8px rgba(67, 97, 238, 0.4);
        }

        .btn-light-gradient {
            background: linear-gradient(135deg, #f8f9fa, #eaecef);
            color: var(--dark-text);
            border: none;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }

        .btn-light-gradient:hover {
            background: linear-gradient(135deg, #eaecef, #dee2e6);
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.08);
        }

        .btn-success-gradient {
            background: linear-gradient(135deg, #40bf7d, #29a267);
            color: white;
            border: none;
            box-shadow: 0 2px 5px rgba(64, 191, 125, 0.3);
        }

        .btn-success-gradient:hover {
            background: linear-gradient(135deg, #35a56d, #218858);
            box-shadow: 0 4px 8px rgba(64, 191, 125, 0.4);
        }

        /* Is invalid styling - more subtle */
        .is-invalid {
            border-color: rgba(239, 71, 111, 0.5) !important;
            background-color: rgba(239, 71, 111, 0.01) !important;
        }

        /* Ensure form validation shows immediately */
        .form-control:invalid:focus, 
        .form-select:invalid:focus {
            box-shadow: 0 0 0 0.15rem rgba(239, 71, 111, 0.1);
        }

        /* Error shake animation - more subtle */
        @@keyframes shake {
            0% { transform: translateX(0); }
            20% { transform: translateX(-3px); }
            40% { transform: translateX(3px); }
            60% { transform: translateX(-3px); }
            80% { transform: translateX(3px); }
            100% { transform: translateX(0); }
        }

        .shake-animation {
            animation: none;
        }
        
        /* New alert styles */
        .alert-light-soft {
            background-color: rgba(248, 249, 250, 0.7);
            color: var(--dark-text);
            border-radius: 6px;
            border-color: var(--primary-color);
            padding: 10px 16px;
        }

        .fade-out {
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        /* Minimalist validation styling */
        .field-required {
            position: relative;
        }

        .field-required input,
        .field-required select,
        .field-required textarea {
            background-color: rgba(245, 247, 250, 0.9) !important;
            border-color: rgba(84, 84, 84, 0.15) !important;
        }

        .field-required input:focus,
        .field-required select:focus,
        .field-required textarea:focus {
            background-color: #ffffff !important;
            border-color: var(--primary-color) !important;
        }

        /* Remove all validation messages */
        .validation-message {
            display: none;
        }

        /* Map validation styling */
        .map-required {
            box-shadow: 0 0 0 2px rgba(84, 84, 84, 0.1) !important;
            transition: all 0.3s ease;
        }

        .map-required:focus-within {
            box-shadow: 0 0 0 2px var(--primary-color) !important;
        }
    </style>
}

@section Scripts {
    <script>
        // Initialize the map
        mapboxgl.accessToken = 'pk.eyJ1IjoiY2hhYW5nZ2cwMTkzIiwiYSI6ImNtOHo5ODF6cDAxcTUyaXB0ODBtYXlhN3oifQ.SJ-eGgWUplbUFNE_UwK7JA';
        const map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/mapbox/streets-v11',
            center: [120.9842, 14.5995],
            zoom: 9
        });

        // Add navigation controls
        map.addControl(new mapboxgl.NavigationControl(), 'top-right');

        // Initialize marker
        let marker = new mapboxgl.Marker({
            draggable: true
        })
        .setLngLat([120.9842, 14.5995])
        .addTo(map);

        // Update coordinates when marker is dragged
        marker.on('dragend', function() {
            const lngLat = marker.getLngLat();
            document.getElementById('latitude').value = lngLat.lat;
            document.getElementById('longitude').value = lngLat.lng;
            
            // Reverse geocode to get address
            fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${lngLat.lng},${lngLat.lat}.json?access_token=${mapboxgl.accessToken}`)
                .then(response => response.json())
                .then(data => {
                    if (data.features && data.features.length > 0) {
                        const place = data.features[0];
                        document.getElementById('location').value = place.place_name;
                        
                        // Extract address components
                        const context = place.context || [];
                        let barangayFound = false;
                        let purokFound = false;
                        
                        // Try to find detailed address components
                        if (place.text) {
                            document.getElementById('purok').value = place.text;
                            purokFound = true;
                        }
                        
                        context.forEach(item => {
                            if (item.id.startsWith('neighborhood') || item.id.startsWith('locality')) {
                                document.getElementById('barangay').value = item.text;
                                barangayFound = true;
                            } else if (item.id.startsWith('place')) {
                                document.getElementById('city').value = item.text;
                            }
                        });
                        
                        // If barangay not found, try to extract it from the address
                        if (!barangayFound) {
                            // Look for address parts with "Barangay" or typical Filipino naming patterns
                            const addressParts = place.place_name.split(',');
                            for (let i = 0; i < addressParts.length; i++) {
                                const part = addressParts[i].trim();
                                if (part.includes('Barangay') || part.includes('Brgy.')) {
                                    document.getElementById('barangay').value = part;
                                    barangayFound = true;
                                    break;
                                }
                            }
                            
                            // If still not found, use a placeholder based on location
                            if (!barangayFound) {
                                const roundedLat = Math.round(lngLat.lat * 1000) / 1000;
                                const roundedLng = Math.round(lngLat.lng * 1000) / 1000;
                                document.getElementById('barangay').value = `Area near ${roundedLat}, ${roundedLng}`;
                            }
                        }
                        
                        // If purok not found, create a default value
                        if (!purokFound) {
                            const city = document.getElementById('city').value;
                            document.getElementById('purok').value = `Street in ${city || 'local area'}`;
                        }
                    }
                })
                .catch(error => {
                    console.error('Error reverse geocoding:', error);
                    // Set default values if geocoding fails
                    const roundedLat = Math.round(lngLat.lat * 1000) / 1000;
                    const roundedLng = Math.round(lngLat.lng * 1000) / 1000;
                    document.getElementById('purok').value = `Location ${roundedLat}, ${roundedLng}`;
                    document.getElementById('barangay').value = `Area ${roundedLat}, ${roundedLng}`;
                });
        });

        // Detect current location
        document.getElementById('detect-location').addEventListener('click', function() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function(position) {
                    const lngLat = {
                        lng: position.coords.longitude,
                        lat: position.coords.latitude
                    };
                    
                    marker.setLngLat(lngLat);
                    map.flyTo({
                        center: lngLat,
                        zoom: 15
                    });
                    
                    // Trigger dragend event to update form
                    marker.fire('dragend');
                }, function(error) {
                    console.error("Error getting location:", error);
                    alert('Could not detect your location. Please enter details manually or pin on the map.');
                    
                    // Set default values if geolocation fails
                    document.getElementById('purok').value = "Please enter Purok/Street";
                    document.getElementById('barangay').value = "Please enter Barangay";
                }, {
                    enableHighAccuracy: true,
                    timeout: 10000,
                    maximumAge: 0
                });
            } else {
                alert('Geolocation is not supported by your browser');
                
                // Set default values if geolocation is not supported
                document.getElementById('purok').value = "Please enter Purok/Street";
                document.getElementById('barangay').value = "Please enter Barangay";
            }
        });

        // Preview photo when selected
        document.getElementById('photo').addEventListener('change', function() {
            const file = this.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    document.getElementById('photo-preview').src = e.target.result;
                    document.querySelector('.preview-area').classList.remove('d-none');
                    
                    // Hide upload icon and text when photo is added
                    document.querySelector('.upload-icon').classList.add('d-none');
                    document.querySelector('.upload-text').classList.add('d-none');
                    
                    // Add a smaller photo label in the corner
                    const photoUploadArea = document.querySelector('.photo-upload-area');
                    if (!document.querySelector('.corner-label')) {
                        const cornerLabel = document.createElement('div');
                        cornerLabel.className = 'corner-label';
                        cornerLabel.innerHTML = '<i class="fas fa-camera me-1"></i> Photo Added';
                        photoUploadArea.appendChild(cornerLabel);
                    }
                }
                reader.readAsDataURL(file);
            }
        });

        // Clear photo input
        document.getElementById('clear-photo').addEventListener('click', function() {
            document.getElementById('photo').value = '';
            document.getElementById('photo-preview').src = '';
            document.querySelector('.preview-area').classList.add('d-none');
            
            // Show upload icon and text again
            document.querySelector('.upload-icon').classList.remove('d-none');
            document.querySelector('.upload-text').classList.remove('d-none');
            
            // Remove corner label if exists
            const cornerLabel = document.querySelector('.corner-label');
            if (cornerLabel) {
                cornerLabel.parentNode.removeChild(cornerLabel);
            }
        });

        // Auto-resize textarea
        const textareas = document.querySelectorAll('textarea');
        textareas.forEach(textarea => {
            textarea.addEventListener('input', function() {
                this.style.height = 'auto';
                this.style.height = (this.scrollHeight) + 'px';
            });
        });
        
        // Form step navigation
        let currentStep = 1;
        const totalSteps = 3;
        
        // Function to handle field validation without notifications
        function handleRequiredFields(fieldIds) {
            // Remove previous highlighting
            document.querySelectorAll('.field-required').forEach(el => {
                el.classList.remove('field-required');
            });
            
            let emptyFieldFound = false;
            let firstEmptyField = null;
            
            // Check each field
            fieldIds.forEach(fieldId => {
                const field = document.getElementById(fieldId);
                if (field && !field.value.trim()) {
                    const fieldContainer = field.parentElement;
                    fieldContainer.classList.add('field-required');
                    
                    if (!emptyFieldFound) {
                        firstEmptyField = field;
                        emptyFieldFound = true;
                    }
                }
            });
            
            // Focus the first empty field if found
            if (firstEmptyField) {
                firstEmptyField.focus();
            }
            
            return !emptyFieldFound;
        }

        // Function to check map coordinates
        function validateMapLocation() {
            const hasCoordinates = document.getElementById('latitude').value && 
                                  document.getElementById('longitude').value;
            
            const mapElement = document.getElementById('map');
            
            if (!hasCoordinates) {
                mapElement.classList.add('map-required');
                return false;
            } else {
                mapElement.classList.remove('map-required');
                return true;
            }
        }

        // Replace the existing submit validation
        document.getElementById('submit-report-btn').addEventListener('click', function() {
            const form = document.getElementById('report-form');
            
            // Required field IDs
            const requiredFields = [
                'Title', 
                'Description', 
                'location', 
                'purok', 
                'barangay', 
                'city'
            ];
            
            // Check required fields
            const fieldsValid = handleRequiredFields(requiredFields);
            
            // Check map coordinates
            const mapValid = validateMapLocation();
            
            // If everything is valid, submit the form
            if (fieldsValid && mapValid) {
                this.innerHTML = '<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>Submitting...';
                this.disabled = true;
                form.submit();
            } else {
                // Just prevent submission without showing errors
                // Scroll to the first invalid field or map
                if (!fieldsValid) {
                    // First invalid field already got focus
                } else if (!mapValid) {
                    document.getElementById('map').scrollIntoView({ behavior: 'smooth', block: 'center' });
                }
            }
        });

        // Modify the next step button validation
        document.querySelectorAll('.next-step').forEach(button => {
            button.addEventListener('click', function() {
                const stepNumber = parseInt(this.getAttribute('data-step'));
                
                let isValid = true;
                
                // Step 1 validation
                if (stepNumber === 1) {
                    const step1Fields = ['Title', 'Description'];
                    isValid = handleRequiredFields(step1Fields);
                }
                
                // Step 2 validation
                if (stepNumber === 2) {
                    const step2Fields = ['location', 'purok', 'barangay', 'city'];
                    const fieldsValid = handleRequiredFields(step2Fields);
                    const mapValid = validateMapLocation();
                    
                    isValid = fieldsValid && mapValid;
                    
                    // If map is invalid but fields are valid, scroll to map
                    if (!mapValid && fieldsValid) {
                        document.getElementById('map').scrollIntoView({ behavior: 'smooth', block: 'center' });
                    }
                }
                
                // If validation passes, proceed to next step
                if (isValid) {
                    document.getElementById(`step${currentStep}`).classList.add('d-none');
                    document.querySelector(`.progress-step[data-step="${currentStep}"]`).classList.add('completed');
                    currentStep++;
                    document.getElementById(`step${currentStep}`).classList.remove('d-none');
                    document.querySelector(`.progress-step[data-step="${currentStep}"]`).classList.add('active');
                    updateProgressBar();
                } else {
                    // Subtle animation feedback on button
                    this.classList.add('shake-animation');
                    setTimeout(() => {
                        this.classList.remove('shake-animation');
                    }, 300);
                }
            });
        });
        
        // Previous step buttons
        document.querySelectorAll('.prev-step').forEach(button => {
            button.addEventListener('click', function() {
                // Hide current step
                document.getElementById(`step${currentStep}`).classList.add('d-none');
                
                // Remove active class from current step
                document.querySelector(`.progress-step[data-step="${currentStep}"]`).classList.remove('active');
                
                // Move to previous step
                currentStep--;
                
                // Show previous step
                document.getElementById(`step${currentStep}`).classList.remove('d-none');
                
                // Update progress bar
                updateProgressBar();
            });
        });
        
        // Update progress bar
        function updateProgressBar() {
            const progressBar = document.getElementById('form-progress-bar');
            const progress = ((currentStep - 1) / (totalSteps - 1)) * 100;
            progressBar.style.width = `${progress}%`;
        }
        
        // Initialize first step
        document.querySelector(`.progress-step[data-step="1"]`).classList.add('active');
    </script>
} 