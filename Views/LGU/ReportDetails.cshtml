@model THYNK.Models.DisasterReport
@{
    ViewData["Title"] = "Report Details";
    Layout = "_LGULayout";
}

<style>
    /* Minimalist detailed report styles */
    .report-container {
        padding: 1.25rem 0;
    }
    
    .page-header {
        display: flex;
        align-items: center;
        margin-bottom: 1.25rem;
        padding-bottom: 0.75rem;
        border-bottom: 1px solid rgba(0, 0, 0, 0.05);
        position: relative;
    }
    
    .page-header::after {
        content: '';
        position: absolute;
        bottom: -1px;
        left: 0;
        width: 80px;
        height: 2px;
        background: linear-gradient(to right, #1ABC9C, rgba(26, 188, 156, 0.1));
    }
    
    .page-title {
        font-size: 1.2rem;
        font-weight: 500;
        color: var(--primary);
        margin: 0;
        letter-spacing: 0.01em;
    }
    
    .page-subtitle {
        font-size: 0.8rem;
        color: var(--dark-alt);
        margin-top: 0.25rem;
        max-width: 600px;
    }
    
    .alert {
        border: none;
        border-radius: 0.25rem;
        padding: 0.75rem 1rem;
        margin-bottom: 1rem;
        font-size: 0.8rem;
        animation: fadeIn 0.5s ease;
    }
    
    .alert-success {
        background-color: rgba(106, 141, 115, 0.1);
        color: var(--success);
        border-left: 3px solid var(--success);
    }
    
    .alert-danger {
        background-color: rgba(181, 99, 87, 0.1);
        color: var(--danger);
        border-left: 3px solid var(--danger);
    }
    
    .report-card {
        border-radius: 0.4rem;
        overflow: hidden;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        background-color: #fff;
        margin-bottom: 1rem;
        border: none;
        transition: all 0.3s ease;
    }
    
    .report-card:hover {
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
        transform: translateY(-2px);
    }
    
    .card-header {
        background-color: white;
        padding: 0.9rem 1.25rem;
        border-bottom: 1px solid rgba(0, 0, 0, 0.05);
        position: relative;
    }
    
    .card-header::after {
        content: '';
        position: absolute;
        bottom: -1px;
        left: 0;
        width: 40px;
        height: 2px;
        background: #1ABC9C;
    }
    
    .card-title {
        font-size: 0.9rem;
        font-weight: 500;
        color: var(--primary);
        margin: 0;
        display: flex;
        align-items: center;
    }
    
    .card-title i {
        margin-right: 0.6rem;
        color: #1ABC9C;
        font-size: 1rem;
    }
    
    .card-body {
        padding: 1.1rem 1.25rem;
    }
    
    .info-label {
        font-size: 0.7rem;
        font-weight: 600;
        color: var(--dark);
        margin-bottom: 0.35rem;
        letter-spacing: 0.03em;
        text-transform: uppercase;
        position: relative;
        display: inline-block;
        padding-bottom: 0.25rem;
    }
    
    .info-label::after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 0;
        width: 20px;
        height: 2px;
        background-color: rgba(26, 188, 156, 0.3);
    }
    
    .info-value {
        font-size: 0.85rem;
        color: var(--dark);
        margin-bottom: 1rem;
        line-height: 1.4;
        font-weight: 400;
    }
    
    .info-value:last-child {
        margin-bottom: 0;
    }
    
    .badge {
        font-weight: 400;
        padding: 0.3em 0.6em;
        font-size: 0.7rem;
        border-radius: 3px;
        letter-spacing: 0.02em;
    }
    
    .severity-badge {
        border-radius: 50px;
        padding: 0.35em 0.7em;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }
    
    .map-container {
        height: 280px;
        min-height: 280px;
        border-radius: 0.4rem;
        overflow: hidden;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    }
    
    .action-btn {
        border-radius: 0.3rem;
        padding: 0.7rem 1.1rem;
        font-weight: 500;
        font-size: 0.85rem;
        letter-spacing: 0.02em;
        transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
        display: flex;
        align-items: center;
        justify-content: center;
        border: none;
    }
    
    .action-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
    }
    
    .action-btn i {
        margin-right: 0.5rem;
        font-size: 0.85rem;
    }
    
    .action-btn.btn-back {
        background-color: rgba(0, 0, 0, 0.05);
        color: var(--dark);
    }
    
    .action-btn.btn-back:hover {
        background-color: rgba(0, 0, 0, 0.08);
    }
    
    .action-btn.btn-primary {
        background-color: #1ABC9C;
        color: white;
    }
    
    .action-btn.btn-primary:hover {
        background-color: #16a085;
    }
    
    .incident-marker {
        cursor: pointer;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
        transition: transform 0.2s ease;
    }
    
    .incident-marker:hover {
        transform: scale(1.2);
    }
    
    .mapboxgl-popup {
        max-width: 300px;
    }
    
    .mapboxgl-popup-content {
        padding: 0;
        overflow: hidden;
        border-radius: 0.25rem;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    }
    
    .popup-header {
        background-color: #1ABC9C;
        color: white;
        padding: 0.6rem 0.9rem;
        font-weight: 500;
        font-size: 0.85rem;
    }
    
    .popup-body {
        padding: 0.8rem 0.9rem;
    }
    
    .report-image {
        border-radius: 0.4rem;
        overflow: hidden;
        position: relative;
        max-height: 240px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    }
    
    .report-image img {
        width: 100%;
        height: 240px;
        object-fit: cover;
        object-position: center;
    }
    
    .image-overlay {
        position: absolute;
        bottom: 0;
        right: 0;
        padding: 0.5rem;
    }
    
    .expand-btn {
        background: rgba(0, 0, 0, 0.5);
        border: none;
        color: white;
        width: 28px;
        height: 28px;
        border-radius: 4px;
        font-size: 0.75rem;
        cursor: pointer;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .expand-btn:hover {
        background: rgba(0, 0, 0, 0.7);
        transform: scale(1.1);
    }
    
    .image-modal .modal-content {
        border: none;
        border-radius: 0.4rem;
        overflow: hidden;
    }
    
    .image-modal .modal-header {
        padding: 0.75rem 1rem;
        border-bottom: 1px solid rgba(0, 0, 0, 0.05);
    }
    
    .info-group {
        margin-bottom: 0.8rem;
    }
    
    .info-group:last-child {
        margin-bottom: 0;
    }
    
    .row-compact {
        margin-left: -0.5rem;
        margin-right: -0.5rem;
    }
    
    .row-compact > [class*="col-"] {
        padding-left: 0.5rem;
        padding-right: 0.5rem;
    }
    
    @@keyframes fadeIn {
        from { opacity: 0; transform: translateY(8px); }
        to { opacity: 1; transform: translateY(0); }
    }
    
    .animate-in {
        animation: fadeIn 0.4s ease forwards;
    }
    
    .animate-in:nth-child(2) {
        animation-delay: 0.08s;
    }
    
    .animate-in:nth-child(3) {
        animation-delay: 0.16s;
    }
    
    .animate-in:nth-child(4) {
        animation-delay: 0.24s;
    }
    
    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .card-body {
            padding: 1rem;
        }
        
        .map-container {
            height: 250px;
            min-height: 250px;
        }
        
        .report-image, .report-image img {
            height: 200px;
            max-height: 200px;
        }
    }
</style>

<div class="report-container">
    <div class="page-header">
            <div>
            <h1 class="page-title">Incident Report Details</h1>
            <p class="page-subtitle">View comprehensive information about this disaster report</p>
        </div>
    </div>
    
        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                <i class="fas fa-check-circle me-2"></i>@TempData["SuccessMessage"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }
        @if (TempData["ErrorMessage"] != null)
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                <i class="fas fa-exclamation-circle me-2"></i>@TempData["ErrorMessage"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }

    <div class="row row-compact">
            <div class="col-md-8">
            <!-- Report Information -->
            <div class="report-card animate-in">
                    <div class="card-header">
                    <h5 class="card-title"><i class="fas fa-clipboard-list"></i>Report Information</h5>
                    </div>
                    <div class="card-body">
                    <div class="row row-compact">
                            <div class="col-md-6">
                            <div class="info-group">
                                <div class="info-label">Title</div>
                                <div class="info-value">@Model.Title</div>
                            </div>
                            </div>
                            <div class="col-md-6">
                            <div class="info-group">
                                <div class="info-label">Status</div>
                                <div class="info-value">
                                <span class="badge @(Model.Status == THYNK.Models.ReportStatus.Pending ? "bg-warning" : 
                                                  Model.Status == THYNK.Models.ReportStatus.Verified ? "bg-info" : 
                                                  Model.Status == THYNK.Models.ReportStatus.InProgress ? "bg-primary" : 
                                                  Model.Status == THYNK.Models.ReportStatus.Resolved ? "bg-success" : "bg-secondary")">
                                    @Model.Status
                                </span>
                            </div>
                        </div>
                        </div>
                    </div>
                    <div class="row row-compact">
                            <div class="col-md-6">
                            <div class="info-group">
                                <div class="info-label">Type</div>
                                <div class="info-value">
                                <span class="badge bg-secondary">@Model.Type</span>
                                </div>
                            </div>
                            </div>
                            <div class="col-md-6">
                            <div class="info-group">
                                <div class="info-label">Severity</div>
                                <div class="info-value">
                                    <span class="badge severity-badge @(Model.Severity == THYNK.Models.SeverityLevel.Low ? "bg-info" : 
                                                  Model.Severity == THYNK.Models.SeverityLevel.Medium ? "bg-warning" : 
                                                  Model.Severity == THYNK.Models.SeverityLevel.High ? "bg-danger" : "bg-dark")">
                                    @Model.Severity
                                </span>
                            </div>
                        </div>
                        </div>
                    </div>
                    <div class="row row-compact">
                            <div class="col-12">
                            <div class="info-group">
                                <div class="info-label">Description</div>
                                <div class="info-value">@Model.Description</div>
                            </div>
                        </div>
                    </div>
                    <div class="row row-compact">
                            <div class="col-md-6">
                            <div class="info-group">
                                <div class="info-label">Location</div>
                                <div class="info-value">
                                    @if (!string.IsNullOrEmpty(Model.Location))
                                    {
                                        @Model.Location
                                    }
                                    else
                                    {
                                        <span class="text-muted">Not specified</span>
                                    }
                                </div>
                            </div>
                            </div>
                            <div class="col-md-6">
                            <div class="info-group">
                                <div class="info-label">Date Reported</div>
                                <div class="info-value">@Model.DateReported.ToString("MMM dd, yyyy HH:mm")</div>
                            </div>
                            </div>
                        </div>
                        @if (!string.IsNullOrEmpty(Model.AdditionalInfo))
                        {
                        <div class="row row-compact">
                                <div class="col-12">
                                <div class="info-group">
                                    <div class="info-label">Additional Information</div>
                                    <div class="info-value">@Model.AdditionalInfo</div>
                                </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>

            <!-- Location Map -->
            <div class="report-card animate-in">
                <div class="card-header">
                    <h5 class="card-title"><i class="fas fa-map-marker-alt"></i>Location Map</h5>
                </div>
                <div class="card-body p-0">
                    <div id="map" class="map-container"></div>
                </div>
            </div>
            
            <!-- Report Image -->
                @if (!string.IsNullOrEmpty(Model.ImageUrl))
                {
                <div class="report-card animate-in">
                        <div class="card-header">
                        <h5 class="card-title"><i class="fas fa-image"></i>Report Image</h5>
                    </div>
                    <div class="card-body p-0">
                        <div class="report-image">
                            <img src="@Model.ImageUrl" alt="Report Image" class="img-fluid" />
                            <div class="image-overlay">
                                <button class="expand-btn" data-bs-toggle="modal" data-bs-target="#imageModal">
                                    <i class="fas fa-expand-alt"></i>
                                </button>
                        </div>
                        </div>
                        </div>
                    </div>
                }
        </div>

        <div class="col-md-4">
            <!-- Reporter Information -->
            <div class="report-card animate-in">
                    <div class="card-header">
                    <h5 class="card-title"><i class="fas fa-user"></i>Reporter Information</h5>
                </div>
                <div class="card-body">
                    <div class="info-group">
                        <div class="info-label">Name</div>
                        <div class="info-value">
                            @if (Model.IsAnonymous)
                            {
                                <span><i class="fas fa-user-secret me-1"></i> Anonymous</span>
                            }
                            else
                            {
                                @(Model.User?.FirstName + " " + Model.User?.LastName ?? "Unknown")
                            }
                        </div>
                    </div>
                    
                    <div class="info-group">
                        <div class="info-label">Email</div>
                        <div class="info-value">
                            @if (Model.IsAnonymous)
                            {
                                <span class="text-muted">Hidden for anonymous reports</span>
                            }
                            else
                            {
                                @(Model.User?.Email ?? "Not available")
                            }
                        </div>
                    </div>
                </div>
            </div>

            <!-- Assigned To -->
            @if (Model.AssignedTo != null)
            {
                <div class="report-card animate-in">
                    <div class="card-header">
                        <h5 class="card-title"><i class="fas fa-users"></i>Assigned To</h5>
                    </div>
                    <div class="card-body">
                        <div class="info-group">
                            <div class="info-label">Organization</div>
                            <div class="info-value">@Model.AssignedTo.OrganizationName</div>
                        </div>
                        
                        <div class="info-group">
                            <div class="info-label">Name</div>
                            <div class="info-value">@(Model.AssignedTo.FirstName + " " + Model.AssignedTo.LastName)</div>
                </div>

                        <div class="info-group">
                            <div class="info-label">Assigned Date</div>
                            <div class="info-value">@Model.AssignedAt?.ToString("MMM dd, yyyy HH:mm")</div>
                            </div>
                        </div>
                    </div>
                }

            <!-- Actions -->
            <div class="report-card animate-in">
                    <div class="card-header">
                    <h5 class="card-title"><i class="fas fa-cog"></i>Actions</h5>
                    </div>
                    <div class="card-body">
                        <div class="d-grid gap-2">
                        <a href="@Url.Action("ManageReports", "LGU")" class="action-btn btn-back">
                            <i class="fas fa-arrow-left"></i>Back to Reports
                        </a>
                        <a href="@Url.Action("IncidentMap", "LGU")" class="action-btn btn-primary">
                            <i class="fas fa-map"></i>View on Map
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Image Modal -->
@if (!string.IsNullOrEmpty(Model.ImageUrl))
{
    <div class="modal fade image-modal" id="imageModal" tabindex="-1" aria-labelledby="imageModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content border-0">
                <div class="modal-header">
                    <h5 class="modal-title fs-6" id="imageModalLabel">Report Image - @Model.Title</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body p-0">
                    <img src="@Model.ImageUrl" alt="Report Image" class="img-fluid w-100">
                </div>
            </div>
        </div>
    </div>
}

@section Scripts {
    <script src="https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.js"></script>
    <link href="https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.css" rel="stylesheet">
    <script>
        // Initialize the map
        mapboxgl.accessToken = 'pk.eyJ1IjoiY2hhYW5nZ2cwMTkzIiwiYSI6ImNtOHo5ODF6cDAxcTUyaXB0ODBtYXlhN3oifQ.SJ-eGgWUplbUFNE_UwK7JA';
        const map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/mapbox/streets-v11',
            center: [@Model.Longitude, @Model.Latitude],
            zoom: 15
        });

        // Add map controls
        map.addControl(new mapboxgl.NavigationControl());
        map.addControl(new mapboxgl.FullscreenControl());
        map.addControl(new mapboxgl.GeolocateControl({
            positionOptions: {
                enableHighAccuracy: true
            },
            trackUserLocation: true
        }));

        // Get marker color based on severity
        function getSeverityColor(severity) {
            switch(severity) {
                case 'Low':
                    return '#0D6EFD'; // Bootstrap primary blue
                case 'Medium':
                    return '#FFC107'; // Bootstrap warning yellow
                case 'High':
                    return '#DC3545'; // Bootstrap danger red
                case 'Critical':
                    return '#212529'; // Bootstrap dark
                default:
                    return '#6C757D'; // Bootstrap secondary gray
            }
        }

        // Create popup content
        const popup = new mapboxgl.Popup({ offset: 25 })
            .setHTML(`
                <div>
                    <div class="popup-header">@Model.Title</div>
                    <div class="popup-body">
                    <p class="mb-1 small text-muted">@Model.Type</p>
                    <p class="mb-0 small">
                        <span class="badge @(Model.Severity == THYNK.Models.SeverityLevel.Low ? "bg-info" : 
                                          Model.Severity == THYNK.Models.SeverityLevel.Medium ? "bg-warning" : 
                                          Model.Severity == THYNK.Models.SeverityLevel.High ? "bg-danger" : "bg-dark")">
                            @Model.Severity
                        </span>
                    </p>
                    </div>
                </div>
            `);
        
        // Add a marker with popup
        const marker = new mapboxgl.Marker({
            color: getSeverityColor('@Model.Severity')
        })
        .setLngLat([@Model.Longitude, @Model.Latitude])
        .setPopup(popup)
        .addTo(map);

        // Show popup by default
        popup.addTo(map);
    </script>
} 