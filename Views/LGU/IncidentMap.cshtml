@{
    ViewData["Title"] = "Incident Map";
    Layout = "_LGULayout";
}

<div class="row">
    <div class="col-md-9">
        <div class="card dashboard-card">
            <div class="card-header bg-primary text-white">
                <div class="d-flex align-items-center">
                    <div class="card-icon bg-white text-primary">
                        <i class="fas fa-map-marked-alt"></i>
                    </div>
                    <div>
                        <h5 class="m-0">Incident Map</h5>
                        <small>View all reported incidents on the map</small>
                    </div>
                </div>
            </div>
            <div class="card-body p-0">
                <div id="map" class="map-container"></div>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="card dashboard-card mb-4">
            <div class="card-header bg-secondary text-white">
                <h5 class="m-0"><i class="fas fa-filter me-2"></i>Date Filter</h5>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <label class="form-label">Date Range</label>
                    <div class="input-group input-group-sm mb-2">
                        <span class="input-group-text">From</span>
                        <input type="date" id="filter-date-from" class="form-control form-control-sm">
                    </div>
                    <div class="input-group input-group-sm">
                        <span class="input-group-text">To</span>
                        <input type="date" id="filter-date-to" class="form-control form-control-sm">
                    </div>
                </div>
                <button id="apply-filters" class="btn btn-primary btn-sm w-100">Apply Date Filter</button>
                <button id="reset-filters" class="btn btn-outline-secondary btn-sm w-100 mt-2">Reset Filter</button>
            </div>
        </div>

        <div class="card dashboard-card">
            <div class="card-header bg-info text-white">
                <h5 class="m-0"><i class="fas fa-info-circle me-2"></i>Legend</h5>
            </div>
            <div class="card-body">
                <div class="mb-2">
                    <h6 class="mb-2">Incident Types</h6>
                    <div class="d-flex align-items-center mb-1">
                        <i class="fas fa-circle text-danger me-2"></i>
                        <small>Earthquake</small>
                    </div>
                    <div class="d-flex align-items-center mb-1">
                        <i class="fas fa-circle text-primary me-2"></i>
                        <small>Flood</small>
                    </div>
                    <div class="d-flex align-items-center mb-1">
                        <i class="fas fa-circle text-warning me-2"></i>
                        <small>Fire</small>
                    </div>
                    <div class="d-flex align-items-center mb-1">
                        <i class="fas fa-circle text-secondary me-2"></i>
                        <small>Landslide</small>
                    </div>
                    <div class="d-flex align-items-center mb-1">
                        <i class="fas fa-circle text-purple me-2"></i>
                        <small>Storm</small>
                    </div>
                    <div class="d-flex align-items-center mb-1">
                        <i class="fas fa-circle text-orange me-2"></i>
                        <small>Accident</small>
                    </div>
                </div>
                <div>
                    <h6 class="mb-2">Status</h6>
                    <div class="d-flex align-items-center mb-1">
                        <i class="fas fa-circle text-primary me-2"></i>
                        <small>In Progress</small>
                    </div>
                    <div class="d-flex align-items-center mb-1">
                        <i class="fas fa-circle text-success me-2"></i>
                        <small>Resolved</small>
                    </div>
                    <button id="reset-filters-alert" class="btn btn-sm btn-warning mt-2">
                        <i class="fas fa-undo-alt me-1"></i>Reset Filters
                                </button>
                            </div>
            </div>
                        </div>
                    </div>

    <!-- Sidebar with Active Filters and Live Incident Feed -->
    <div class="col-md-3">
        <!-- Recent Incidents Feed - Expanded for better visibility -->
        <div class="card dashboard-card border-0 shadow-sm h-100">
            <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                <h5 class="m-0"><i class="fas fa-bell me-2"></i>Recent Incidents</h5>
                <div>
                    <button id="reset-filters-quick" class="btn btn-sm btn-outline-light me-1" title="Reset all filters">
                        <i class="fas fa-undo"></i>
                    </button>
                    <span class="badge bg-light text-primary rounded-pill" id="recent-count">0</span>
            </div>
            </div>
            <div class="card-body p-0">
                <div class="incidents-filter-bar d-flex align-items-center p-2 bg-light border-bottom">
                    <div class="input-group input-group-sm">
                        <span class="input-group-text bg-white">
                            <i class="fas fa-search text-muted"></i>
                            </span>
                        <input type="text" class="form-control form-control-sm border-start-0" id="incidents-search" placeholder="Search incidents...">
                        </div>
                            </div>
                <div class="list-group list-group-flush" id="recent-incidents-list">
                    <!-- This will be populated with recent incidents -->
                    <div class="recent-incidents-loading text-center py-4">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="text-muted mt-2">Loading recent incidents...</p>
                    </div>
                </div>
            </div>
            <div class="card-footer bg-light p-2">
                <div class="d-flex justify-content-between align-items-center">
                    <span class="text-muted small" id="incidents-last-updated">Last updated: Just now</span>
                    <button class="btn btn-sm btn-outline-primary" id="refresh-incidents">
                        <i class="fas fa-sync-alt me-1"></i>Refresh
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="incident-modal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modal-title">Incident Report Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-8">
                        <div class="card mb-4">
                            <div class="card-header">
                                <h5 class="m-0">Report Information</h5>
                            </div>
                            <div class="card-body">
                                <div class="row mb-3">
                                    <div class="col-md-6">
                                        <h6 class="text-muted mb-2">Title</h6>
                                        <p class="mb-0" id="modal-title-text"></p>
                                    </div>
                                    <div class="col-md-6">
                                        <h6 class="text-muted mb-2">Status</h6>
                                        <span id="modal-status" class="badge"></span>
                                    </div>
                                </div>
                                <div class="row mb-3">
                                    <div class="col-md-6">
                                        <h6 class="text-muted mb-2">Type</h6>
                                        <span id="modal-type" class="badge bg-secondary"></span>
                                    </div>
                                    <div class="col-md-6">
                                        <h6 class="text-muted mb-2">Severity</h6>
                                        <span id="modal-severity" class="badge"></span>
                                    </div>
                                </div>
                                <div class="row mb-3">
                                    <div class="col-12">
                                        <h6 class="text-muted mb-2">Description</h6>
                                        <p class="mb-0" id="modal-description"></p>
                                    </div>
                                </div>
                                <div class="row mb-3">
                                    <div class="col-md-6">
                                        <h6 class="text-muted mb-2">Location</h6>
                                        <p class="mb-0" id="modal-location"></p>
                                        <p class="small text-muted mb-0" id="modal-detailed-location"></p>
                                    </div>
                                    <div class="col-md-6">
                                        <h6 class="text-muted mb-2">Date Reported</h6>
                                        <p class="mb-0" id="modal-date"></p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="card mb-4">
                            <div class="card-header">
                                <h5 class="m-0">Reporter Information</h5>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <h6 class="text-muted mb-2">Name</h6>
                                    <p class="mb-0" id="modal-reporter-name"></p>
                                </div>
                                <div class="mb-3">
                                    <h6 class="text-muted mb-2">Email</h6>
                                    <p class="mb-0" id="modal-reporter-email"></p>
                                </div>
                            </div>
                        </div>

                        <div class="card">
                            <div class="card-header">
                                <h5 class="m-0">Assigned To</h5>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <h6 class="text-muted mb-2">Organization</h6>
                                    <p class="mb-0" id="modal-org-name"></p>
                                </div>
                                <div class="mb-3">
                                    <h6 class="text-muted mb-2">Name</h6>
                                    <p class="mb-0" id="modal-assigned-name"></p>
                                </div>
                                <div class="mb-3">
                                    <h6 class="text-muted mb-2">Assigned Date</h6>
                                    <p class="mb-0" id="modal-assigned-date"></p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <a id="view-details-link" href="#" class="btn btn-primary">
                    <i class="fas fa-file-alt me-2"></i>View Full Details
                </a>
                <a href="/LGU/ManageReports" class="btn btn-secondary">
                    <i class="fas fa-list me-2"></i>View Reports
                </a>
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.js"></script>
    <link href="https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.css" rel="stylesheet">
    <script>
        // Initialize the map
        mapboxgl.accessToken = 'pk.eyJ1IjoiY2hhYW5nZ2cwMTkzIiwiYSI6ImNtOHo5ODF6cDAxcTUyaXB0ODBtYXlhN3oifQ.SJ-eGgWUplbUFNE_UwK7JA'; // Replace with your Mapbox access token
        const map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/mapbox/streets-v11',
            center: [120.9842, 14.5995], // Default to Philippines
            zoom: 9
        });

        // Add map controls
        map.addControl(new mapboxgl.NavigationControl(), 'top-right');
        map.addControl(new mapboxgl.FullscreenControl(), 'top-right');
        map.addControl(new mapboxgl.GeolocateControl({
            positionOptions: {
                enableHighAccuracy: true
            },
            trackUserLocation: true,
            showUserHeading: true
        }), 'top-right');

        // Store the markers and incidents
        let markers = [];
        let incidents = [];
        let organizations = new Set();

        // Get the incident modal
        const incidentModal = new bootstrap.Modal(document.getElementById('incident-modal'));
        
        // Setup legend toggle and tabs functionality
        document.getElementById('legend-toggle').addEventListener('click', toggleLegend);
        document.getElementById('legend-close').addEventListener('click', toggleLegend);
        
        // Setup legend tabs
        const legendTabs = document.querySelectorAll('.legend-tab');
        legendTabs.forEach(tab => {
            tab.addEventListener('click', function() {
                // Remove active class from all tabs and contents
                document.querySelectorAll('.legend-tab').forEach(t => t.classList.remove('active'));
                document.querySelectorAll('.legend-content').forEach(c => c.classList.remove('active'));
                
                // Add active class to clicked tab
                this.classList.add('active');
                
                // Show corresponding content
                const tabId = this.getAttribute('data-tab');
                document.getElementById(tabId + '-content').classList.add('active');
            });
        });

        function toggleLegend() {
            const legend = document.getElementById('floating-legend');
            const toggleBtn = document.getElementById('legend-toggle');
            
            legend.classList.toggle('visible');
            
            // Update button text when toggled
            if (legend.classList.contains('visible')) {
                toggleBtn.innerHTML = '<i class="fas fa-times me-1"></i><span class="d-none d-md-inline">Hide Legend</span>';
            } else {
                toggleBtn.innerHTML = '<i class="fas fa-map-signs me-1"></i><span class="d-none d-md-inline">Legend</span>';
            }
        }

        // Load incidents when map is ready
        map.on('load', function() {
            // Add loading indicator
            showMapLoading(true);
            
            loadIncidents();
            
            // Set up event listeners for filters
            document.getElementById('apply-filters').addEventListener('click', applyFilters);
            document.getElementById('reset-filters').addEventListener('click', resetFilters);
        });

        // Show/hide loading indicator
        function showMapLoading(show) {
            const loadingIndicator = document.querySelector('.map-loading');
            if (show) {
                if (!loadingIndicator) {
                    const loader = document.createElement('div');
                    loader.className = 'map-loading';
                    loader.innerHTML = `
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <span class="ms-2">Loading incidents...</span>
                    `;
                    document.querySelector('.map-container').appendChild(loader);
                }
            } else {
                if (loadingIndicator) {
                    loadingIndicator.remove();
                }
            }
        }

        // Load incidents from the API
        function loadIncidents() {
            fetch('@Url.Action("GetMapData", "LGU")')
                .then(response => response.json())
                .then(data => {
                    incidents = data;
                    
                    // Hide loading indicator
                    showMapLoading(false);
                    
                    // Update incident count
                    updateIncidentCount(incidents.length);
                    
                    // Collect unique organizations
                    organizations.clear();
                    incidents.forEach(incident => {
                        if (incident.assignedTo && incident.assignedTo.organization) {
                            organizations.add(incident.assignedTo.organization);
                        }
                    });
                    
                    // Render all markers initially
                    renderMarkers(incidents);
                    
                    // Populate recent incidents list
                    populateRecentIncidents(incidents);
                })
                .catch(error => {
                    console.error('Error loading incidents:', error);
                    showMapLoading(false);
                    
                    // Show error message
                    const mapContainer = document.querySelector('.map-container');
                    const errorMsg = document.createElement('div');
                    errorMsg.className = 'map-error-message';
                    errorMsg.innerHTML = `
                        <div class="alert alert-danger">
                            <i class="fas fa-exclamation-circle me-2"></i>
                            Error loading incidents. Please try again later.
                        </div>
                    `;
                    mapContainer.appendChild(errorMsg);
                    
                    // Show error in recent incidents
                    document.querySelector('.recent-incidents-loading').innerHTML = `
                        <i class="fas fa-exclamation-circle text-danger fa-2x"></i>
                        <p class="text-muted mt-2">Error loading incidents</p>
                    `;
                });
        }

        // Update incident count
        function updateIncidentCount(count) {
            const countElement = document.getElementById('incident-count');
            const inProgressCount = incidents.filter(i => {
                let statusNum = i.status;
                if (typeof statusNum === 'string') {
                    if (statusNum === 'InProgress') statusNum = 2;
                    else if (statusNum === 'Resolved') statusNum = 3;
                    else if (statusNum === 'Pending') statusNum = 0;
                    else if (statusNum === 'Declined') statusNum = 1;
                    else statusNum = -1;
                }
                return statusNum === 2;
            }).length;
            const resolvedCount = incidents.filter(i => i.status === 3).length;
            
            // Update the count display to show both status counts
            countElement.innerHTML = `
                <span class="badge bg-primary me-1">${inProgressCount} In Progress</span>
                <span class="badge bg-success">${resolvedCount} Resolved</span>
            `;
        }

        // Modified renderMarkers function to handle no incidents scenario
        function renderMarkers(data) {
            // Remove existing markers
            for (let marker of markers) {
                marker.remove();
            }
            markers = [];

            // Update incident count
            updateIncidentCount(data.length);
            
            // Hide the no incidents alert by default
            document.getElementById('no-incidents-alert').classList.add('d-none');

            // If no incidents, show alert only if filters were applied
            if (data.length === 0) {
                // Check if filters are active
                const dateFrom = document.getElementById('filter-date-from').value;
                const dateTo = document.getElementById('filter-date-to').value;
                const allTypesSelected = document.querySelectorAll('.type-filter:checked').length === document.querySelectorAll('.type-filter').length;
                const allStatusesSelected = document.querySelectorAll('.status-filter:checked').length === document.querySelectorAll('.status-filter').length;
                const allSeveritiesSelected = document.querySelectorAll('.severity-filter:checked').length === document.querySelectorAll('.severity-filter').length;
                
                const filtersApplied = dateFrom || dateTo || !allTypesSelected || !allStatusesSelected || !allSeveritiesSelected;
                
                if (filtersApplied) {
                    // Show the no incidents alert
                    document.getElementById('no-incidents-alert').classList.remove('d-none');
                }
                
                // We don't create the map-no-data-message anymore to avoid duplication
                return;
            } else {
                // Remove any existing no data message
                const noDataMsg = document.querySelector('.map-no-data-message');
                if (noDataMsg) noDataMsg.remove();
            }

            // Create bounds object to fit all markers
            const bounds = new mapboxgl.LngLatBounds();

            // Add new markers
            for (let incident of data) {
                // Set marker color based on incident type
                let markerColor, markerIcon;
                switch(incident.type) {
                    case 'Earthquake': 
                        markerColor = '#dc3545'; 
                        markerIcon = 'fa-house-damage';
                        break;
                    case 'Flood': 
                        markerColor = '#0d6efd'; 
                        markerIcon = 'fa-water';
                        break;
                    case 'Fire': 
                        markerColor = '#ffc107'; 
                        markerIcon = 'fa-fire';
                        break;
                    case 'Landslide': 
                        markerColor = '#6c757d'; 
                        markerIcon = 'fa-mountain';
                        break;
                    case 'Storm': 
                        markerColor = '#6610f2'; 
                        markerIcon = 'fa-cloud-showers-heavy';
                        break;
                    case 'Accident': 
                        markerColor = '#fd7e14'; 
                        markerIcon = 'fa-car-crash';
                        break;
                    default: 
                        markerColor = '#343a40';
                        markerIcon = 'fa-exclamation-triangle';
                }

                // Create custom HTML element for marker
                const el = document.createElement('div');
                el.className = 'incident-marker';
                el.style.backgroundColor = markerColor;
                
                // Set status outline
                let statusColor = '#6c757d'; // Default gray
                switch(incident.status) {
                    case 'InProgress': statusColor = '#0d6efd'; break; // Blue
                    case 'Resolved': statusColor = '#198754'; break; // Green
                    case 'Pending': statusColor = '#ffc107'; break; // Yellow
                    case 'Declined': statusColor = '#dc3545'; break; // Red
                }
                el.style.borderColor = statusColor;
                
                // Create marker
                const marker = new mapboxgl.Marker(el)
                    .setLngLat([incident.longitude, incident.latitude])
                    .addTo(map);
                
                // Extend bounds to include this marker
                bounds.extend([incident.longitude, incident.latitude]);
                
                // Add popup information
                const popup = new mapboxgl.Popup({
                    offset: 25,
                    closeButton: false,
                    className: 'incident-popup'
                }).setHTML(`
                    <div class="incident-popup-content">
                        <h6 class="mb-1">${incident.title}</h6>
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <span class="badge bg-secondary">${incident.type}</span>
                            <span class="badge ${getStatusClass(incident.status)}">${formatStatus(incident.status)}</span>
                        </div>
                        <p class="small mb-2 text-truncate">${incident.location}</p>
                        <button class="btn btn-sm btn-primary w-100">View Details</button>
                    </div>
                `);
                
                marker.setPopup(popup);
                
                // Show popup on hover
                marker.getElement().addEventListener('mouseenter', () => marker.togglePopup());
                marker.getElement().addEventListener('mouseleave', () => marker.togglePopup());
                
                // Add click event
                marker.getElement().addEventListener('click', () => showIncidentDetails(incident));
                
                // Also add click event to the popup button
                marker.getElement().addEventListener('click', function() {
                    setTimeout(() => {
                        const button = document.querySelector('.incident-popup button');
                        if (button) {
                            button.addEventListener('click', function(e) {
                                e.preventDefault();
                                showIncidentDetails(incident);
                            });
                        }
                    }, 100);
                });
                
                markers.push(marker);
            }

            // Fit map to bounds if we have markers
            if (data.length > 0) {
                // Add padding to the bounds
                const padding = { top: 50, bottom: 50, left: 50, right: 50 };
                map.fitBounds(bounds, { padding: padding, maxZoom: 15 });
            }
        }

        // Get status class for badges
        function getStatusClass(status) {
            switch (status) {
                case 2: return 'bg-primary text-white'; // In Progress
                case 3: return 'bg-success text-white'; // Resolved
                case 0: return 'bg-warning text-dark'; // Pending
                case 1: return 'bg-danger text-white'; // Declined
                default: return 'bg-secondary text-white';
            }
        }
        
        // Format status text
        function formatStatus(status) {
            if (status === 'InProgress') return 'In Progress';
            return status;
        }
        
        // Get type icon
        function getTypeIcon(type) {
            switch (type) {
                case 0: return 'fas fa-house-damage'; // Earthquake
                case 1: return 'fas fa-water'; // Flood
                case 2: return 'fas fa-fire'; // Fire
                case 3: return 'fas fa-mountain'; // Landslide
                case 4: return 'fas fa-cloud-showers-heavy'; // Storm
                case 5: return 'fas fa-car-crash'; // Accident
                case 6: return 'fas fa-question'; // Other
                default: return 'fas fa-exclamation-triangle';
            }
        }
        
        // Get type color
        function getTypeColor(type) {
            switch (type) {
                case 0: return '#dc3545'; // Earthquake - red
                case 1: return '#0d6efd'; // Flood - blue
                case 2: return '#ffc107'; // Fire - yellow
                case 3: return '#6c757d'; // Landslide - gray
                case 4: return '#6610f2'; // Storm - purple
                case 5: return '#fd7e14'; // Accident - orange
                case 6: return '#343a40'; // Other - dark gray
                default: return '#343a40';
            }
        }

        // Show incident details in modal
        function showIncidentDetails(incident) {
            // Reset previous organization info if exists
            const previousOrgInfo = document.getElementById('assigned-organization-container');
            previousOrgInfo.classList.add('d-none');
            
            // Set basic information
            document.getElementById('modal-title').textContent = incident.title;
            document.getElementById('modal-date').textContent = formatDate(incident.dateModified || incident.dateReported);
            document.getElementById('modal-description').textContent = incident.description;
            document.getElementById('modal-location').textContent = incident.location;
            document.getElementById('modal-id').textContent = `Incident ID: ${incident.id}`;
            
            // Set type and icon
            document.getElementById('modal-type').textContent = incident.type;
            const typeIcon = document.getElementById('modal-type-icon');
            typeIcon.innerHTML = `<i class="fas ${getTypeIcon(incident.type)}"></i>`;
            typeIcon.style.backgroundColor = `${getTypeColor(incident.type)}20`;
            typeIcon.style.color = getTypeColor(incident.type);
            
            // Set detailed location if available
            let detailedLocation = '';
            if (incident.barangay && incident.barangay !== 'Unknown') {
                detailedLocation += `Barangay ${incident.barangay}, `;
            }
            if (incident.city && incident.city !== 'Unknown') {
                detailedLocation += incident.city;
            }
            document.getElementById('modal-detailed-location').textContent = detailedLocation;
            
            // Add assigned organization information if available
            if (incident.assignedTo) {
                document.getElementById('assigned-organization-container').classList.remove('d-none');
                document.getElementById('modal-organization').textContent = incident.assignedTo.organization;
                document.getElementById('modal-assignee').textContent = `Assigned to: ${incident.assignedTo.name}`;
            }
            
            // Set status badge and description
            const statusBadge = document.getElementById('modal-status');
            statusBadge.textContent = formatStatus(incident.status);
            statusBadge.className = `badge badge-lg ${getStatusClass(incident.status)}`;
            
            // Set status icon
            const statusIcon = document.getElementById('modal-status-icon');
            statusIcon.innerHTML = `<i class="fas ${getStatusIcon(incident.status)}"></i>`;
            statusIcon.style.color = getStatusIconColor(incident.status);
            
            const statusDesc = document.getElementById('status-description');
            switch(incident.status) {
                case 'Pending': 
                    statusDesc.textContent = 'This incident is awaiting initial verification.';
                    break;
                case 'Verified': 
                    statusDesc.textContent = 'This incident has been verified and is pending assignment.';
                    break;
                case 'InProgress': 
                    statusDesc.textContent = 'This incident is currently being addressed by the assigned team.';
                    break;
                case 'Resolved': 
                    statusDesc.textContent = 'This incident has been successfully resolved.';
                    break;
                case 'Declined': 
                    statusDesc.textContent = 'This incident has been declined due to verification issues.';
                    break;
                default: 
                    statusDesc.textContent = '';
            }
            
            // Set severity badge
            const severityBadge = document.getElementById('modal-severity');
            severityBadge.textContent = incident.severity;
            switch(incident.severity) {
                case 'Low': 
                    severityBadge.className = 'badge badge-lg bg-success'; 
                    break;
                case 'Medium': 
                    severityBadge.className = 'badge badge-lg bg-warning text-dark'; 
                    break;
                case 'High': 
                    severityBadge.className = 'badge badge-lg bg-danger'; 
                    break;
                case 'Critical': 
                    severityBadge.className = 'badge badge-lg bg-dark'; 
                    break;
                default: 
                    severityBadge.className = 'badge badge-lg bg-secondary';
            }
            
            // Set view details link
            document.getElementById('view-details-link').href = `/LGU/ReportDetails/${incident.id}`;
            
            // Show modal
            incidentModal.show();
        }

        // Format date nicely
        function formatDate(dateString) {
            const options = { 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            };
            return new Date(dateString).toLocaleDateString('en-US', options);
        }

        // Initialize filter modal
        const filterModal = new bootstrap.Modal(document.getElementById('filter-modal'));
        
        // Store active filters for display
        let activeFilters = {
            dateFrom: null,
            dateTo: null,
            types: [],
            statuses: [],
            severities: []
        };
        
        // Add event listeners for select/clear all buttons
        document.querySelector('.select-all-types').addEventListener('click', function() {
            document.querySelectorAll('.type-filter').forEach(checkbox => checkbox.checked = true);
        });
        
        document.querySelector('.clear-all-types').addEventListener('click', function() {
            document.querySelectorAll('.type-filter').forEach(checkbox => checkbox.checked = false);
        });
        
        document.querySelector('.select-all-statuses').addEventListener('click', function() {
            document.querySelectorAll('.status-filter').forEach(checkbox => checkbox.checked = true);
        });
        
        document.querySelector('.clear-all-statuses').addEventListener('click', function() {
            document.querySelectorAll('.status-filter').forEach(checkbox => checkbox.checked = false);
        });
        
        document.querySelector('.select-all-severities').addEventListener('click', function() {
            document.querySelectorAll('.severity-filter').forEach(checkbox => checkbox.checked = true);
        });
        
        document.querySelector('.clear-all-severities').addEventListener('click', function() {
            document.querySelectorAll('.severity-filter').forEach(checkbox => checkbox.checked = false);
        });
        
        // Quick status filter buttons
        document.querySelectorAll('.quick-status').forEach(button => {
            button.addEventListener('click', function() {
                const statusValue = this.getAttribute('data-status');
                // Remove active class from all buttons
                document.querySelectorAll('.quick-status').forEach(btn => btn.classList.remove('active'));
                this.classList.add('active');
                if (statusValue === 'all') {
                    fetchIncidentsCommunity({}); // No status param, show all
                } else {
                    fetchIncidentsCommunity({ status: statusValue });
                }
            });
        });
        
        // Updated quick date filter buttons with better labels
        document.querySelectorAll('.quick-date').forEach(button => {
            button.addEventListener('click', function() {
                const days = this.getAttribute('data-days');
                const today = new Date();
                
                // Clear existing date filters
                document.getElementById('filter-date-from').value = '';
                document.getElementById('filter-date-to').value = '';
                
                if (days !== 'all') {
                    // Calculate the start date based on days
                    const startDate = new Date();
                    startDate.setDate(today.getDate() - parseInt(days));
                    
                    // Format date as YYYY-MM-DD
                    const formattedStartDate = startDate.toISOString().split('T')[0];
                    const formattedEndDate = today.toISOString().split('T')[0];
                    
                    document.getElementById('filter-date-from').value = formattedStartDate;
                    document.getElementById('filter-date-to').value = formattedEndDate;
                }
                
                // Apply the filter immediately
                applyFilters();
                
                // Add active state to this button and remove from others
                document.querySelectorAll('.quick-date').forEach(btn => {
                    btn.classList.remove('active');
                });
                this.classList.add('active');
            });
        });
        
        // Update the Apply Filters function to update active filters display
        document.getElementById('apply-filters').addEventListener('click', function() {
            applyFilters();
            filterModal.hide();
        });
        
        // Reset filters in modal
        document.getElementById('reset-filters').addEventListener('click', function() {
            resetFilters();
            filterModal.hide();
        });
        
        // Apply filters function
        function applyFilters() {
            // Remove any no data message
            const noDataMsg = document.querySelector('.map-no-data-message');
            if (noDataMsg) noDataMsg.remove();
            // Show loading indicator
            showMapLoading(true);
            const dateFromFilter = document.getElementById('filter-date-from').value;
            const dateToFilter = document.getElementById('filter-date-to').value;
            // Get selected incident types (as numbers)
            const selectedTypes = Array.from(document.querySelectorAll('.type-filter:checked')).map(cb => Number(cb.value));
            // Get selected statuses (as numbers)
            const selectedStatuses = Array.from(document.querySelectorAll('.status-filter:checked')).map(cb => Number(cb.value));
            // Get selected severities (as numbers)
            const selectedSeverities = Array.from(document.querySelectorAll('.severity-filter:checked')).map(cb => Number(cb.value));
            // Store active filters for display
            activeFilters = {
                dateFrom: dateFromFilter,
                dateTo: dateToFilter,
                types: selectedTypes,
                statuses: selectedStatuses,
                severities: selectedSeverities
            };
            // Update active filters display
            updateActiveFiltersDisplay();
            let filteredIncidents = [...incidents];
            // Filter by date range (using modification date)
            if (dateFromFilter) {
                const fromDate = new Date(dateFromFilter);
                fromDate.setHours(0, 0, 0, 0); // Set to start of day
                filteredIncidents = filteredIncidents.filter(incident => {
                    const incidentDate = new Date(incident.dateModified || incident.dateReported);
                    return incidentDate >= fromDate;
                });
            }
            if (dateToFilter) {
                const toDate = new Date(dateToFilter);
                toDate.setHours(23, 59, 59, 999); // Set to end of day
                filteredIncidents = filteredIncidents.filter(incident => {
                    const incidentDate = new Date(incident.dateModified || incident.dateReported);
                    return incidentDate <= toDate;
                });
            }
            // Filter by incident type (zero-based)
            if (selectedTypes.length > 0 && selectedTypes.length < document.querySelectorAll('.type-filter').length) {
                filteredIncidents = filteredIncidents.filter(incident => selectedTypes.includes(incident.type));
            }
            // Filter by status (zero-based)
            if (selectedStatuses.length > 0 && selectedStatuses.length < document.querySelectorAll('.status-filter').length) {
                filteredIncidents = filteredIncidents.filter(incident => {
                    // Convert string status to number if needed
                    let statusNum = incident.status;
                    if (typeof statusNum === 'string') {
                        if (statusNum === 'InProgress') statusNum = 2;
                        else if (statusNum === 'Resolved') statusNum = 3;
                        else if (statusNum === 'Pending') statusNum = 0;
                        else if (statusNum === 'Declined') statusNum = 1;
                        else statusNum = -1;
                    }
                    return selectedStatuses.includes(statusNum);
                });
            }
            // Filter by severity (zero-based)
            if (selectedSeverities.length > 0 && selectedSeverities.length < document.querySelectorAll('.severity-filter').length) {
                filteredIncidents = filteredIncidents.filter(incident => selectedSeverities.includes(incident.severity));
            }
            // Delay slightly to show the loading indicator
            setTimeout(() => {
                renderMarkers(filteredIncidents);
                document.getElementById('incident-count').textContent = `${filteredIncidents.length} Incident${filteredIncidents.length !== 1 ? 's' : ''} Displayed`;
                showMapLoading(false);
                showFilterToast(filteredIncidents.length, incidents.length);
                const noIncidentsAlert = document.getElementById('no-incidents-alert');
                if (filteredIncidents.length === 0) {
                    noIncidentsAlert.classList.remove('d-none');
                } else {
                    noIncidentsAlert.classList.add('d-none');
                }
                populateRecentIncidents(filteredIncidents);
            }, 300);
        }
        
        // Display active filters
        function updateActiveFiltersDisplay() {
            const container = document.getElementById('active-filters-container');
            const noFiltersMsg = document.getElementById('no-filters-message');
            
            // Check if any filters are applied
            const hasDateFilters = activeFilters.dateFrom || activeFilters.dateTo;
            const hasTypeFilters = activeFilters.types.length > 0 && activeFilters.types.length < 6; // Not all types
            const hasStatusFilters = activeFilters.statuses.length > 0 && activeFilters.statuses.length < 5; // Not all statuses
            const hasSeverityFilters = activeFilters.severities.length > 0 && activeFilters.severities.length < 4; // Not all severities
            
            if (hasDateFilters || hasTypeFilters || hasStatusFilters || hasSeverityFilters) {
                // Hide the no filters message
                noFiltersMsg.classList.add('d-none');
                
                // Clear container
                container.innerHTML = '';
                
                // Add date filters
                if (hasDateFilters) {
                    let dateText = 'Date: ';
                    if (activeFilters.dateFrom && activeFilters.dateTo) {
                        dateText += `${formatDateShort(activeFilters.dateFrom)} to ${formatDateShort(activeFilters.dateTo)}`;
                    } else if (activeFilters.dateFrom) {
                        dateText += `From ${formatDateShort(activeFilters.dateFrom)}`;
                    } else {
                        dateText += `Until ${formatDateShort(activeFilters.dateTo)}`;
                    }
                    
                    container.appendChild(createFilterBadge(dateText, 'date'));
                }
                
                // Add type filters
                if (hasTypeFilters) {
                    activeFilters.types.forEach(type => {
                        container.appendChild(createFilterBadge(type, 'type-' + type.toLowerCase()));
                    });
                }
                
                // Add status filters
                if (hasStatusFilters) {
                    activeFilters.statuses.forEach(status => {
                        const displayStatus = status === 'InProgress' ? 'In Progress' : status;
                        container.appendChild(createFilterBadge(displayStatus, 'status-' + status.toLowerCase()));
                    });
                }
                
                // Add severity filters
                if (hasSeverityFilters) {
                    activeFilters.severities.forEach(severity => {
                        container.appendChild(createFilterBadge(severity, 'severity-' + severity.toLowerCase()));
                    });
                }
            } else {
                // Show the no filters message
                noFiltersMsg.classList.remove('d-none');
                container.innerHTML = '';
            }
        }
        
        // Create a filter badge element
        function createFilterBadge(text, type) {
            const badge = document.createElement('span');
            badge.className = 'badge filter-badge';
            
            // Set badge color based on type
            if (type === 'date') {
                badge.classList.add('bg-primary');
            } else if (type.startsWith('type-')) {
                if (type === 'type-earthquake') badge.classList.add('bg-danger');
                else if (type === 'type-flood') badge.classList.add('bg-primary');
                else if (type === 'type-fire') badge.classList.add('bg-warning', 'text-dark');
                else if (type === 'type-landslide') badge.classList.add('bg-secondary');
                else if (type === 'type-storm') badge.classList.add('bg-purple');
                else if (type === 'type-accident') badge.classList.add('bg-orange');
                else badge.classList.add('bg-secondary');
            } else if (type.startsWith('status-')) {
                if (type === 'status-pending') badge.classList.add('bg-warning', 'text-dark');
                else if (type === 'status-verified') badge.classList.add('bg-info', 'text-dark');
                else if (type === 'status-inprogress') badge.classList.add('bg-primary');
                else if (type === 'status-resolved') badge.classList.add('bg-success');
                else if (type === 'status-declined') badge.classList.add('bg-danger');
                else badge.classList.add('bg-secondary');
            } else if (type.startsWith('severity-')) {
                if (type === 'severity-low') badge.classList.add('bg-success');
                else if (type === 'severity-medium') badge.classList.add('bg-warning', 'text-dark');
                else if (type === 'severity-high') badge.classList.add('bg-danger');
                else if (type === 'severity-critical') badge.classList.add('bg-dark');
                else badge.classList.add('bg-secondary');
            }
            
            badge.textContent = text;
            return badge;
        }
        
        // Format date for display in filter badges
        function formatDateShort(dateString) {
            const date = new Date(dateString);
            return date.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });
        }
        
        // Reset filters function
        function resetFilters() {
            document.getElementById('filter-date-from').value = '';
            document.getElementById('filter-date-to').value = '';
            
            // Reset all filter checkboxes
            document.querySelectorAll('.type-filter, .status-filter, .severity-filter').forEach(checkbox => {
                checkbox.checked = true;
            });
            
            // Clear active filters
            activeFilters = {
                dateFrom: null,
                dateTo: null,
                types: [],
                statuses: [],
                severities: []
            };
            
            // Update active filters display
            updateActiveFiltersDisplay();
            
            // Show loading indicator
            showMapLoading(true);
            
            // Delay slightly to show the loading indicator
            setTimeout(() => {
            renderMarkers(incidents);
                
                // Hide loading indicator
                showMapLoading(false);
                
                // Show toast notification
                showFilterToast(incidents.length, incidents.length, true);
            }, 300);
        }
        
        // Show toast notification for filter results
        function showFilterToast(count, total, isReset = false) {
            // Remove any existing toast
            const existingToast = document.querySelector('.map-filter-toast');
            if (existingToast) existingToast.remove();
            
            // Create toast container if not exists
            let toastContainer = document.querySelector('.toast-container');
            if (!toastContainer) {
                toastContainer = document.createElement('div');
                toastContainer.className = 'toast-container position-fixed bottom-0 end-0 p-3';
                document.body.appendChild(toastContainer);
            }
            
            // Create toast
            const toast = document.createElement('div');
            toast.className = 'toast map-filter-toast show';
            toast.setAttribute('role', 'alert');
            toast.setAttribute('aria-live', 'assertive');
            toast.setAttribute('aria-atomic', 'true');
            
            let toastClass, icon, message;
            if (isReset) {
                toastClass = 'bg-info text-white';
                icon = 'fa-undo';
                message = `Filters reset. Showing all ${total} incidents.`;
            } else if (count === 0) {
                toastClass = 'bg-warning text-dark';
                icon = 'fa-exclamation-triangle';
                message = `No incidents match your filter criteria.`;
            } else {
                toastClass = 'bg-success text-white';
                icon = 'fa-check';
                message = `Showing ${count} of ${total} incidents.`;
            }
            
            toast.innerHTML = `
                <div class="toast-header ${toastClass}">
                    <i class="fas ${icon} me-2"></i>
                    <strong class="me-auto">Filter Results</strong>
                    <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
                <div class="toast-body">
                    ${message}
                </div>
            `;
            
            toastContainer.appendChild(toast);
            
            // Auto hide after 3 seconds
            setTimeout(() => {
                toast.classList.remove('show');
                setTimeout(() => toast.remove(), 500);
            }, 3000);
        }

        // Add event listener for the reset button in the alert
        document.getElementById('reset-filters-alert').addEventListener('click', resetFilters);

        // Function to get an appropriate status icon
        function getStatusIcon(status) {
            switch (status) {
                case 2: return 'fas fa-tools'; // In Progress
                case 3: return 'fas fa-check-circle'; // Resolved
                case 0: return 'fas fa-clock'; // Pending
                case 1: return 'fas fa-times-circle'; // Declined
                default: return 'fas fa-question-circle';
            }
        }
        
        // Function to get status icon color
        function getStatusIconColor(status) {
            switch(status) {
                case 'Pending': return '#ffc107';
                case 'Verified': return '#0dcaf0';
                case 'InProgress': return '#0d6efd';
                case 'Resolved': return '#198754';
                case 'Declined': return '#dc3545';
                default: return '#6c757d';
            }
        }
        
        // Populate recent incidents list
        function populateRecentIncidents(incidents) {
            const recentIncidentsList = document.getElementById('recent-incidents-list');
            
            // Remove loading indicator
            recentIncidentsList.innerHTML = '';
            
            // Sort incidents by date (newest first)
            const sortedIncidents = [...incidents].sort((a, b) => 
                new Date(b.dateReported) - new Date(a.dateReported)
            );
            
            // Take most recent 10
            const recentIncidents = sortedIncidents.slice(0, 10);
            
            // Update count
            document.getElementById('recent-count').textContent = recentIncidents.length;
            
            if (recentIncidents.length === 0) {
                recentIncidentsList.innerHTML = `
                    <div class="text-center py-4">
                        <p class="text-muted">No incidents to display</p>
                    </div>
                `;
                return;
            }
            
            // Add each incident to the list
            recentIncidents.forEach(incident => {
                recentIncidentsList.appendChild(createRecentIncidentItem(incident));
            });
        }
        
        // Function to create recent incident item with enhanced details
        function createRecentIncidentItem(incident) {
            const item = document.createElement('a');
            item.href = '#';
            item.className = 'list-group-item list-group-item-action p-3 border-start-0 border-end-0';
            item.setAttribute('data-incident-id', incident.id);
            item.addEventListener('click', function(e) {
                e.preventDefault();
                
                // Highlight this item
                const allItems = document.querySelectorAll('#recent-incidents-list a.list-group-item');
                allItems.forEach(i => i.classList.remove('active'));
                this.classList.add('active');
                
                // Find the marker for this incident and pan to it
                const marker = markers.find(m => m.incidentId === incident.id);
                if (marker) {
                    // Pan to the marker
                    map.flyTo({
                        center: [incident.longitude, incident.latitude],
                        zoom: 14,
                        speed: 1.5
                    });
                    
                    // Simulate a click on the marker after the map has moved
                    setTimeout(() => {
                        marker.getElement().click();
                    }, 1000);
                } else {
                    // Just show the incident details if marker isn't found
                    showIncidentDetails(incident);
                }
            });
            
            const typeIconClass = getTypeIcon(incident.type);
            const typeColor = getTypeColor(incident.type);
            
            // Format the date and time
            const displayDate = incident.dateModified || incident.dateReported;
            const formattedDate = new Date(displayDate).toLocaleDateString('en-US', {
                month: 'short',
                day: 'numeric',
                year: 'numeric'
            });
            
            const formattedTime = new Date(displayDate).toLocaleTimeString('en-US', {
                hour: '2-digit',
                minute: '2-digit'
            });

            // Create a detailed location string
            let locationDetails = incident.location;
            if (incident.barangay && incident.barangay !== 'Unknown') {
                locationDetails += `, Barangay ${incident.barangay}`;
            }
            if (incident.city && incident.city !== 'Unknown') {
                locationDetails += `, ${incident.city}`;
            }
            
            item.innerHTML = `
                <div class="d-flex">
                    <div class="incident-list-icon me-3" style="color: ${typeColor}">
                        <i class="fas ${typeIconClass}"></i>
                    </div>
                    <div class="flex-grow-1 min-width-0">
                        <div class="d-flex justify-content-between align-items-start mb-1">
                            <div>
                                <span class="badge ${getStatusClass(incident.status)} mb-1">
                                    <i class="${getStatusIcon(incident.status)} me-1"></i>${mapStatus(incident.status)}
                                </span>
                                <span class="badge" style="background-color: ${typeColor}20; color: ${typeColor}; border: 1px solid ${typeColor}">
                                    <i class="${getTypeIcon(incident.type)} me-1"></i>${mapType(incident.type)}
                                </span>
                                <span class="badge ms-1 ${getSeverityClass(incident.severity)}">
                                    <i class="${getSeverityIcon(incident.severity)} me-1"></i>${getSeverityLabel(incident.severity)}
                                </span>
                            </div>
                            <div class="text-end">
                                <div class="text-muted small">${formattedDate}</div>
                                <div class="text-muted small">${formattedTime}</div>
                            </div>
                        </div>
                        <div class="incident-title fw-bold mb-1">${incident.title}</div>
                        <div class="incident-location small text-muted mb-1">
                            <i class="fas fa-map-marker-alt me-1"></i>${locationDetails}
                        </div>
                    </div>
                </div>
            `;
            
            return item;
        }

        // Update the styles for the recent incidents list
        const styleSheet = document.createElement('style');
        styleSheet.textContent = `
            .incident-list-icon {
                width: 40px;
                height: 40px;
                display: flex;
                align-items: center;
                justify-content: center;
                font-size: 1.2rem;
                border-radius: 8px;
                background-color: rgba(0,0,0,0.05);
            }
            
            .incident-location {
                color: #6c757d;
                font-size: 0.85rem;
                line-height: 1.4;
            }
            
            .incident-description {
                color: #495057;
                line-height: 1.4;
                max-height: 2.8em;
                overflow: hidden;
                display: -webkit-box;
                -webkit-line-clamp: 2;
                -webkit-box-orient: vertical;
            }
            
            .list-group-item {
                transition: all 0.2s ease;
                border-left: 3px solid transparent;
            }
            
            .list-group-item:hover {
                background-color: #f8f9fa;
                border-left-color: #0d6efd;
            }
            
            .list-group-item.active {
                background-color: #f0f7ff !important;
                border-left-color: #0d6efd !important;
            }
            
            .badge {
                font-weight: 500;
                padding: 0.35em 0.65em;
                font-size: 0.75em;
            }
            
            #recent-incidents-list {
                max-height: calc(100vh - 300px);
                overflow-y: auto;
                scrollbar-width: thin;
            }
            
            #recent-incidents-list::-webkit-scrollbar {
                width: 6px;
            }
            
            #recent-incidents-list::-webkit-scrollbar-track {
                background: #f1f1f1;
            }
            
            #recent-incidents-list::-webkit-scrollbar-thumb {
                background: #c1c1c1;
                border-radius: 3px;
            }
        `;
        document.head.appendChild(styleSheet);

        // Initialize search functionality for incidents
        document.getElementById('incidents-search').addEventListener('input', function(e) {
            const searchTerm = e.target.value.toLowerCase().trim();
            const incidentItems = document.querySelectorAll('#recent-incidents-list a.list-group-item');
            
            incidentItems.forEach(item => {
                const title = item.querySelector('.incident-title')?.textContent.toLowerCase() || '';
                const location = item.querySelector('.incident-location')?.textContent.toLowerCase() || '';
                // No description in markup
                if (title.includes(searchTerm) || location.includes(searchTerm)) {
                    item.classList.remove('d-none');
                } else {
                    item.classList.add('d-none');
                }
            });
            // Show "no results" message if all items are hidden
            const visibleItems = document.querySelectorAll('#recent-incidents-list a.list-group-item:not(.d-none)').length;
            const noResultsMsg = document.getElementById('no-search-results');
            if (visibleItems === 0 && searchTerm !== '') {
                if (!noResultsMsg) {
                    const msg = document.createElement('div');
                    msg.id = 'no-search-results';
                    msg.className = 'text-center p-3 text-muted';
                    msg.innerHTML = `
                        <i class="fas fa-search fa-lg mb-2"></i>
                        <p>No incidents found matching "${searchTerm}"</p>
                    `;
                    document.getElementById('recent-incidents-list').appendChild(msg);
                }
            } else if (noResultsMsg) {
                noResultsMsg.remove();
            }
        });
        
        // Refresh incidents
        document.getElementById('refresh-incidents').addEventListener('click', function() {
            // Show loading spinner in place
            const refreshBtn = this;
            const originalContent = refreshBtn.innerHTML;
            refreshBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>';
            refreshBtn.disabled = true;
            
            // Reload incidents using LGU controller
            fetch('@Url.Action("GetMapData", "LGU")')
                .then(response => response.json())
                .then(data => {
                    incidents = data;
                    
                    // Update incident count
                    updateIncidentCount(incidents.length);
                    
                    // Re-render all markers
                    renderMarkers(incidents);
                    
                    // Populate recent incidents list
                    populateRecentIncidents(incidents);
                    
                    // Update last updated time
                    const now = new Date();
                    const formattedTime = now.toLocaleTimeString('en-US', {
                        hour: '2-digit',
                        minute: '2-digit'
                    });
                    document.getElementById('incidents-last-updated').textContent = `Last updated: ${formattedTime}`;
                    
                    // Reset button
                    refreshBtn.innerHTML = originalContent;
                    refreshBtn.disabled = false;
                })
                .catch(error => {
                    console.error('Error refreshing incidents:', error);
                    
                    // Show error message
                    refreshBtn.innerHTML = originalContent;
                    refreshBtn.disabled = false;
                    
                    alert('Error refreshing incidents. Please try again.');
                });
        });

        // Add event listener for the date filter apply button
        document.getElementById('apply-quick-date-filter').addEventListener('click', function() {
            // Sync quick filter dates to modal dates
            document.getElementById('filter-date-from').value = document.getElementById('quick-filter-date-from').value;
            document.getElementById('filter-date-to').value = document.getElementById('quick-filter-date-to').value;
            applyFilters();
        });
        // Add event listeners for quick date inputs to sync with modal and apply filter on change
        document.getElementById('quick-filter-date-from').addEventListener('change', function() {
            document.getElementById('filter-date-from').value = this.value;
            applyFilters();
        });
        document.getElementById('quick-filter-date-to').addEventListener('change', function() {
            document.getElementById('filter-date-to').value = this.value;
            applyFilters();
        });
        // When modal date changes, sync to quick filter
        document.getElementById('filter-date-from').addEventListener('change', function() {
            document.getElementById('quick-filter-date-from').value = this.value;
        });
        document.getElementById('filter-date-to').addEventListener('change', function() {
            document.getElementById('quick-filter-date-to').value = this.value;
        });

        // Remove the old quick date filter event listeners and add new date validation
        function validateDateRange() {
            const fromDate = document.getElementById('filter-date-from').value;
            const toDate = document.getElementById('filter-date-to').value;
            
            if (fromDate && toDate) {
                const start = new Date(fromDate);
                const end = new Date(toDate);
                
                if (start > end) {
                    // If start date is after end date, swap them
                    document.getElementById('filter-date-from').value = toDate;
                    document.getElementById('filter-date-to').value = fromDate;
                }
            }
        }

        // Add validation to date inputs
        document.getElementById('filter-date-from').addEventListener('change', validateDateRange);
        document.getElementById('filter-date-to').addEventListener('change', validateDateRange);

        // Update the reset filters function
        function resetFilters() {
            document.getElementById('filter-date-from').value = '';
            document.getElementById('filter-date-to').value = '';
            
            // Reset all filter checkboxes
            document.querySelectorAll('.type-filter, .status-filter, .severity-filter').forEach(checkbox => {
                checkbox.checked = true;
            });
            
            // Clear active filters
            activeFilters = {
                dateFrom: null,
                dateTo: null,
                types: [],
                statuses: [],
                severities: []
            };
            
            // Update active filters display
            updateActiveFiltersDisplay();
            
            // Show loading indicator
            showMapLoading(true);
            
            // Apply the reset
            setTimeout(() => {
                renderMarkers(incidents);
                showMapLoading(false);
                showFilterToast(incidents.length, incidents.length, true);
            }, 300);
        }

        function mapStatus(status) {
            switch (status) {
                case 2: return 'In Progress';
                case 3: return 'Resolved';
                case 0: return 'Pending';
                case 1: return 'Declined';
                default: return status; // fallback if already a string
            }
        }

        function mapType(type) {
            switch (type) {
                case 0: return 'Earthquake';
                case 1: return 'Flood';
                case 2: return 'Fire';
                case 3: return 'Landslide';
                case 4: return 'Storm';
                case 5: return 'Accident';
                case 6: return 'Other';
                default: return type; // fallback if already a string
            }
        }

        // Add helper functions for severity icon and class
        function getSeverityLabel(severity) {
            switch (severity) {
                case 0: return 'Low';
                case 1: return 'Medium';
                case 2: return 'High';
                case 3: return 'Critical';
                default: return severity; // fallback if already a string
            }
        }

        function getSeverityIcon(severity) {
            switch (severity) {
                case 0: return 'fa-solid fa-circle-check text-success';
                case 1: return 'fa-solid fa-circle-exclamation text-warning';
                case 2: return 'fa-solid fa-triangle-exclamation text-danger';
                case 3: return 'fa-solid fa-skull-crossbones text-dark';
                default: return 'fa-solid fa-circle-question text-secondary';
            }
        }

        function getSeverityClass(severity) {
            switch (severity) {
                case 0: return 'bg-success text-white';
                case 1: return 'bg-warning text-dark';
                case 2: return 'bg-danger text-white';
                case 3: return 'bg-dark text-white';
                default: return 'bg-secondary text-white';
            }
        }

        // Add this function for fetching incidents with filters
        function fetchIncidentsCommunity(filters) {
            let url = '@Url.Action("GetMapData", "LGU")';
            let params = [];
            if (filters.status && filters.status !== 'all') params.push('status=' + filters.status);
            if (filters.dateFrom) params.push('dateFrom=' + filters.dateFrom);
            if (filters.dateTo) params.push('dateTo=' + filters.dateTo);
            if (params.length > 0) url += '?' + params.join('&');
            showMapLoading(true);
            fetch(url)
                .then(response => response.json())
                .then(data => {
                    incidents = data;
                    showMapLoading(false);
                    renderMarkers(incidents);
                    populateRecentIncidents(incidents);
                    updateIncidentCount(incidents.length);
                })
                .catch(error => {
                    console.error('Error fetching incidents:', error);
                    showMapLoading(false);
                    // Show error message
                    const mapContainer = document.querySelector('.map-container');
                    const errorMsg = document.createElement('div');
                    errorMsg.className = 'map-error-message';
                    errorMsg.innerHTML = `
                        <div class="alert alert-danger">
                            <i class="fas fa-exclamation-circle me-2"></i>
                            Error loading incidents. Please try again later.
                        </div>
                    `;
                    mapContainer.appendChild(errorMsg);
                });
        }

        // Helper to get the currently selected status
        function getSelectedStatus() {
            const activeBtn = document.querySelector('.quick-status.active');
            return activeBtn ? activeBtn.getAttribute('data-status') : 'all';
        }

        // Listen for changes on the date inputs
        document.getElementById('quick-filter-date-from').addEventListener('change', function() {
            fetchIncidentsCommunity({
                status: getSelectedStatus(),
                dateFrom: this.value,
                dateTo: document.getElementById('quick-filter-date-to').value
            });
        });
        document.getElementById('quick-filter-date-to').addEventListener('change', function() {
            fetchIncidentsCommunity({
                status: getSelectedStatus(),
                dateFrom: document.getElementById('quick-filter-date-from').value,
                dateTo: this.value
            });
        });
    </script>
}

@section Styles {
    <style>
        .map-container {
            height: 75vh;
            min-height: 500px;
        }
        .mapboxgl-popup {
            max-width: 300px;
        }
        .incident-marker {
            cursor: pointer;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
            transition: transform 0.2s ease;
        }
        .incident-marker:hover {
            transform: scale(1.2);
        }
        .text-purple {
            color: #6610f2;
        }
        .text-orange {
            color: #fd7e14;
        }
        .modal-lg {
            max-width: 900px;
        }
        .card {
            border: 1px solid rgba(0,0,0,.125);
            border-radius: 0.25rem;
        }
        .card-header {
            background-color: #f8f9fa;
            border-bottom: 1px solid rgba(0,0,0,.125);
            padding: 0.75rem 1.25rem;
        }
    </style>
} 