s@{
    ViewData["Title"] = "Incident Map";
    Layout = "_LGULayout";
}

<!-- Introduction and Guidelines Section -->
<div class="row mb-4">
    <div class="col-12">
        <div class="card dashboard-card border-0 shadow-sm">
            <div class="card-body">
                <div class="d-flex align-items-center mb-3">
                    <div class="guidelines-icon bg-primary bg-opacity-10 text-primary rounded-circle p-3 me-3">
                        <i class="fas fa-info-circle fa-lg"></i>
                    </div>
                    <div>
                        <h5 class="mb-1">LGU Incident Management Map</h5>
                        <p class="text-muted mb-0">Interactive visualization of all reported incidents assigned to your organization</p>
                    </div>
                </div>
                
                <div class="row mt-3">
                    <div class="col-md-3">
                        <div class="guide-item d-flex">
                            <div class="guide-icon rounded-circle me-3 bg-success bg-opacity-10">
                                <i class="fas fa-mouse-pointer text-success"></i>
                            </div>
                            <div>
                                <h6 class="mb-1">Interactive Map</h6>
                                <p class="small text-muted mb-0">Click on any marker to view detailed incident information</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="guide-item d-flex">
                            <div class="guide-icon rounded-circle me-3 bg-info bg-opacity-10">
                                <i class="fas fa-filter text-info"></i>
                            </div>
                            <div>
                                <h6 class="mb-1">Advanced Filtering</h6>
                                <p class="small text-muted mb-0">Use filters to find specific incidents by date, type, or status</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="guide-item d-flex">
                            <div class="guide-icon rounded-circle me-3 bg-warning bg-opacity-10">
                                <i class="fas fa-map-marker-alt text-warning"></i>
                            </div>
                            <div>
                                <h6 class="mb-1">Incident Details</h6>
                                <p class="small text-muted mb-0">Get comprehensive information on each incident</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="guide-item d-flex">
                            <div class="guide-icon rounded-circle me-3 bg-danger bg-opacity-10">
                                <i class="fas fa-chart-area text-danger"></i>
                            </div>
                            <div>
                                <h6 class="mb-1">Heatmap View</h6>
                                <p class="small text-muted mb-0">Toggle heatmap to visualize incident density in your area</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-9">
        <div class="card dashboard-card border-0 shadow-sm">
            <div class="card-header bg-primary text-white">
                <div class="d-flex align-items-center justify-content-between">
                    <div class="d-flex align-items-center">
                        <div class="card-icon bg-white text-primary">
                            <i class="fas fa-map-marked-alt"></i>
                        </div>
                        <div>
                            <h5 class="m-0">Incident Map</h5>
                            <small>View all reported incidents on the map</small>
                        </div>
                    </div>
                    <div>
                        <button class="btn btn-light btn-sm me-2" id="toggle-heatmap">
                            <i class="fas fa-fire me-1"></i><span class="d-none d-md-inline">Heatmap</span>
                        </button>
                        <button class="btn btn-light btn-sm" id="legend-toggle">
                            <i class="fas fa-map-signs me-1"></i><span class="d-none d-md-inline">Legend</span>
                        </button>
                    </div>
                </div>
            </div>
            
            <!-- Quick Filters Bar -->
            <div class="quick-filters-bar p-2 bg-light border-bottom">
                <div class="container-fluid px-1">
                    <div class="row g-2 align-items-center">
                        <div class="col-auto d-none d-md-block">
                            <span class="quick-filter-label text-primary fw-bold"><i class="fas fa-bolt me-1"></i>Quick Filters:</span>
                        </div>
                        <div class="col-md-auto col-12">
                            <div class="quick-filter-section">
                                <div class="input-group input-group-sm">
                                    <span class="input-group-text"><i class="fas fa-calendar-alt"></i></span>
                                    <input type="date" id="filter-date-from" class="form-control form-control-sm" placeholder="Start Date">
                                    <span class="input-group-text bg-white">to</span>
                                    <input type="date" id="filter-date-to" class="form-control form-control-sm" placeholder="End Date">
                                    <button class="btn btn-outline-primary" id="apply-filters">
                                        <i class="fas fa-filter"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-auto col-12">
                            <div class="quick-filter-section">
                                <div class="btn-group btn-group-sm">
                                    <button type="button" class="btn btn-outline-primary quick-status" data-status="2">In Progress</button>
                                    <button type="button" class="btn btn-outline-success quick-status" data-status="3">Resolved</button>
                                    <button type="button" class="btn btn-outline-secondary quick-status" data-status="all">All</button>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-auto col-12 ms-md-auto">
                            <button id="reset-filters" class="btn btn-sm btn-secondary w-100">
                                <i class="fas fa-undo-alt me-1"></i><span class="d-none d-md-inline">Reset Filters</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="card-body p-0 position-relative">
                <div id="map" class="map-container"></div>
                <div class="map-overlay-info">
                    <span id="incident-count" class="badge bg-primary"></span>
                </div>
                
                <!-- No incidents alert -->
                <div id="no-incidents-alert" class="alert alert-info m-3 d-none">
                    <i class="fas fa-info-circle me-2"></i>
                    No incidents match your filter criteria. Try adjusting your filters or <a href="#" id="reset-filters-alert">reset all filters</a>.
                </div>
                
                <!-- Improved Floating Collapsible Legend with Tabs -->
                <div id="floating-legend" class="map-legend shadow">
                    <div class="legend-header">
                        <h6 class="m-0"><i class="fas fa-info-circle me-2"></i>Map Legend</h6>
                        <button type="button" class="btn-close" id="legend-close"></button>
                    </div>
                    <div class="legend-tabs">
                        <button class="legend-tab active" data-tab="status">Status</button>
                        <button class="legend-tab" data-tab="severity">Severity</button>
                        <button class="legend-tab" data-tab="types">Types</button>
                    </div>
                    <div class="legend-body">
                        <div class="legend-content active" id="status-content">
                            <div class="d-flex align-items-center mb-2">
                                <span class="legend-dot bg-primary me-2"></span>
                                <span>In Progress</span>
                            </div>
                            <div class="d-flex align-items-center mb-2">
                                <span class="legend-dot bg-success me-2"></span>
                                <span>Resolved</span>
                            </div>
                        </div>
                        <div class="legend-content" id="severity-content">
                            <div class="d-flex align-items-center mb-2">
                                <span class="legend-dot bg-success me-2"></span>
                                <span>Low</span>
                            </div>
                            <div class="d-flex align-items-center mb-2">
                                <span class="legend-dot bg-warning me-2"></span>
                                <span>Medium</span>
                            </div>
                            <div class="d-flex align-items-center mb-2">
                                <span class="legend-dot bg-danger me-2"></span>
                                <span>High</span>
                            </div>
                            <div class="d-flex align-items-center mb-2">
                                <span class="legend-dot bg-dark me-2"></span>
                                <span>Critical</span>
                            </div>
                        </div>
                        <div class="legend-content" id="types-content">
                            <div class="d-flex align-items-center mb-2">
                                <span class="legend-dot" style="background-color: #dc3545"></span>
                                <span>Earthquake</span>
                            </div>
                            <div class="d-flex align-items-center mb-2">
                                <span class="legend-dot" style="background-color: #0d6efd"></span>
                                <span>Flood</span>
                            </div>
                            <div class="d-flex align-items-center mb-2">
                                <span class="legend-dot" style="background-color: #ffc107"></span>
                                <span>Fire</span>
                            </div>
                            <div class="d-flex align-items-center mb-2">
                                <span class="legend-dot" style="background-color: #6c757d"></span>
                                <span>Landslide</span>
                            </div>
                            <div class="d-flex align-items-center mb-2">
                                <span class="legend-dot" style="background-color: #6610f2"></span>
                                <span>Storm</span>
                            </div>
                            <div class="d-flex align-items-center mb-2">
                                <span class="legend-dot" style="background-color: #fd7e14"></span>
                                <span>Accident</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Recent Incidents Feed - Improved sidebar -->
    <div class="col-md-3">
        <div class="card dashboard-card border-0 shadow-sm h-100">
            <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                <h5 class="m-0"><i class="fas fa-bell me-2"></i>Recent Incidents</h5>
                <div>
                    <button id="refresh-incidents" class="btn btn-sm btn-outline-light" title="Refresh incident list">
                        <i class="fas fa-sync-alt"></i>
                    </button>
                    <span class="badge bg-light text-primary rounded-pill ms-2" id="recent-count">0</span>
                </div>
            </div>
            <div class="card-body p-0">
                <div class="incidents-filter-bar d-flex align-items-center p-2 bg-light border-bottom">
                    <div class="input-group input-group-sm">
                        <span class="input-group-text bg-white">
                            <i class="fas fa-search text-muted"></i>
                        </span>
                        <input type="text" class="form-control form-control-sm border-start-0" id="incidents-search" placeholder="Search incidents...">
                    </div>
                </div>
                <div class="list-group list-group-flush" id="recent-incidents-list">
                    <!-- This will be populated with recent incidents -->
                    <div class="recent-incidents-loading text-center py-4">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="text-muted mt-2">Loading recent incidents...</p>
                    </div>
                </div>
            </div>
            <div class="card-footer bg-light p-2">
                <div class="d-flex justify-content-between align-items-center">
                    <span class="text-muted small" id="incidents-last-updated">Last updated: Just now</span>
                    <a href="@Url.Action("ManageReports", "LGU")" class="btn btn-sm btn-primary">
                        <i class="fas fa-list me-1"></i>All Reports
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Enhanced Incident Modal -->
<div class="modal fade" id="incident-modal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content border-0 shadow">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="modal-title">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    <span id="modal-title-text">Incident Report Details</span>
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-8">
                        <div class="card mb-4 border-0 shadow-sm">
                            <div class="card-header bg-light">
                                <h5 class="m-0 d-flex align-items-center">
                                    <i class="fas fa-info-circle me-2 text-primary"></i>Report Information
                                </h5>
                            </div>
                            <div class="card-body">
                                <div class="row mb-3">
                                    <div class="col-md-6">
                                        <h6 class="text-muted mb-1 small">INCIDENT TITLE</h6>
                                        <p class="mb-0 fw-bold" id="modal-title-text-content"></p>
                                    </div>
                                    <div class="col-md-6">
                                        <h6 class="text-muted mb-1 small">STATUS</h6>
                                        <div id="modal-status-wrapper"></div>
                                    </div>
                                </div>
                                <div class="row mb-3">
                                    <div class="col-md-6">
                                        <h6 class="text-muted mb-1 small">TYPE</h6>
                                        <div id="modal-type-wrapper"></div>
                                    </div>
                                    <div class="col-md-6">
                                        <h6 class="text-muted mb-1 small">SEVERITY</h6>
                                        <div id="modal-severity-wrapper"></div>
                                    </div>
                                </div>
                                <div class="row mb-3">
                                    <div class="col-12">
                                        <h6 class="text-muted mb-1 small">DESCRIPTION</h6>
                                        <div class="p-3 bg-light rounded">
                                            <p class="mb-0" id="modal-description"></p>
                                        </div>
                                    </div>
                                </div>
                                <div class="row mb-3">
                                    <div class="col-md-6">
                                        <h6 class="text-muted mb-1 small">LOCATION</h6>
                                        <p class="mb-0 fw-bold" id="modal-location"></p>
                                        <p class="small text-muted mb-0" id="modal-detailed-location"></p>
                                    </div>
                                    <div class="col-md-6">
                                        <h6 class="text-muted mb-1 small">DATE REPORTED</h6>
                                        <p class="mb-0" id="modal-date">
                                            <i class="fas fa-calendar-alt me-1 text-primary"></i>
                                            <span id="modal-date-value"></span>
                                        </p>
                                    </div>
                                </div>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input type-filter" type="checkbox" value="Fire" id="type-fire" checked>
                                <label class="form-check-label" for="type-fire">Fire</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input type-filter" type="checkbox" value="Landslide" id="type-landslide" checked>
                                <label class="form-check-label" for="type-landslide">Landslide</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input type-filter" type="checkbox" value="4" id="type-storm" checked>
                                <label class="form-check-label" for="type-storm">Storm</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input type-filter" type="checkbox" value="Accident" id="type-accident" checked>
                                <label class="form-check-label" for="type-accident">Accident</label>
                            </div>
                        </div>
                        <div class="d-flex mt-1">
                            <button class="btn btn-sm btn-outline-secondary me-2 select-all-types">Select All</button>
                            <button class="btn btn-sm btn-outline-secondary clear-all-types">Clear All</button>
                        </div>
    </div>
</div>

                <div class="row">
                    <!-- Status Filter -->
                    <div class="col-md-6 mb-4">
                        <label class="form-label fw-bold">Status</label>
                        <div class="status-filters">
                            <div class="form-check form-check-inline">
                                <input class="form-check-input status-filter" type="checkbox" value="2" id="status-inprogress" checked>
                                <label class="form-check-label" for="status-inprogress">In Progress</label>
                            </div>
                            <div class="form-check form-check-inline">
                                <input class="form-check-input status-filter" type="checkbox" value="3" id="status-resolved" checked>
                                <label class="form-check-label" for="status-resolved">Resolved</label>
                            </div>
                        </div>
                        <div class="d-flex mt-1">
                            <button class="btn btn-sm btn-outline-secondary me-2 select-all-statuses">Select All</button>
                            <button class="btn btn-sm btn-outline-secondary clear-all-statuses">Clear All</button>
                        </div>
                    </div>

                    <div class="col-md-4">
                        <div class="card mb-4 border-0 shadow-sm">
                            <div class="card-header bg-light">
                                <h5 class="m-0 d-flex align-items-center">
                                    <i class="fas fa-user me-2 text-primary"></i>Reporter
                                </h5>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <h6 class="text-muted mb-1 small">NAME</h6>
                                    <p class="mb-0" id="modal-reporter-name"></p>
                                </div>
                                <div class="mb-3">
                                    <h6 class="text-muted mb-1 small">EMAIL</h6>
                                    <p class="mb-0" id="modal-reporter-email"></p>
                                </div>
                            </div>
                        </div>

                        <div class="card border-0 shadow-sm">
                            <div class="card-header bg-light">
                                <h5 class="m-0 d-flex align-items-center">
                                    <i class="fas fa-user-shield me-2 text-primary"></i>Assignment
                                </h5>
                            </div>
                            <div class="card-body">
                                <div class="mb-3">
                                    <h6 class="text-muted mb-1 small">ORGANIZATION</h6>
                                    <p class="mb-0 fw-bold" id="modal-org-name"></p>
                                </div>
                                <div class="mb-3">
                                    <h6 class="text-muted mb-1 small">ASSIGNED TO</h6>
                                    <p class="mb-0" id="modal-assigned-name"></p>
                                </div>
                                <div class="mb-3">
                                    <h6 class="text-muted mb-1 small">ASSIGNED DATE</h6>
                                    <p class="mb-0" id="modal-assigned-date">
                                        <i class="fas fa-calendar-check me-1 text-primary"></i>
                                        <span id="modal-assigned-date-value"></span>
                                    </p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-footer bg-light">
                <a id="view-details-link" href="#" class="btn btn-primary">
                    <i class="fas fa-info-circle me-2"></i>View Full Details
                </a>
                <a href="@Url.Action("ManageReports", "LGU")" class="btn btn-outline-primary">
                    <i class="fas fa-list me-2"></i>View All Reports
                </a>
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.js"></script>
    <link href="https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.css" rel="stylesheet">
    <style>
        /* Map styles */
        .map-container {
            height: 70vh;
            width: 100%;
            position: relative;
            border-radius: 0 0 0.25rem 0.25rem;
        }
        
        /* Map loading indicator */
        .map-loading {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: rgba(255, 255, 255, 0.9);
            padding: 1rem 2rem;
            border-radius: 0.5rem;
            display: flex;
            align-items: center;
            box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
            z-index: 10;
        }
        
        /* No data message */
        .map-no-data-message {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: rgba(255, 255, 255, 0.9);
            padding: 1.5rem;
            border-radius: 0.5rem;
            text-align: center;
            max-width: 80%;
            box-shadow: 0 0.25rem 0.5rem rgba(0, 0, 0, 0.1);
            z-index: 10;
        }
        
        /* Error message */
        .map-error-message {
            position: absolute;
            top: 1rem;
            left: 1rem;
            right: 1rem;
            z-index: 10;
        }
        
        /* Map info overlay */
        .map-overlay-info {
            position: absolute;
            top: 1rem;
            left: 1rem;
            z-index: 5;
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }
        
        /* Incident count badge */
        #incident-count {
            padding: 0.5rem 0.75rem;
            font-size: 0.875rem;
            border-radius: 0.375rem;
            box-shadow: 0 0.25rem 0.5rem rgba(0, 0, 0, 0.1);
        }
        
        /* Custom marker */
        .custom-marker {
            width: 2.5rem;
            height: 2.5rem;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            box-shadow: 0 0.25rem 0.5rem rgba(0, 0, 0, 0.15);
            cursor: pointer;
            transition: all 0.2s ease-in-out;
            border: 2px solid white;
            color: white;
        }
        
        .custom-marker:hover {
            transform: scale(1.1);
        }
        
        /* Legend styles */
        #legend-toggle {
            bottom: 1rem;
            right: 1rem;
            z-index: 5;
            border-radius: 0.375rem;
            padding: 0.5rem 0.75rem;
            font-size: 0.875rem;
        }
        
        .map-legend {
            position: absolute;
            bottom: 1rem;
            right: 1rem;
            background-color: white;
            border-radius: 0.5rem;
            width: 16rem;
            overflow: hidden;
            transform: translateY(150%);
            opacity: 0;
            transition: all 0.3s ease-in-out;
            z-index: 15;
        }
        
        .map-legend.visible {
            transform: translateY(0);
            opacity: 1;
        }
        
        .legend-header {
            padding: 0.75rem 1rem;
            background-color: #f8f9fa;
            border-bottom: 1px solid #e9ecef;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .legend-tabs {
            display: flex;
            border-bottom: 1px solid #e9ecef;
        }
        
        .legend-tab {
            flex: 1;
            text-align: center;
            padding: 0.5rem;
            background-color: #f8f9fa;
            border: none;
            cursor: pointer;
            transition: all 0.2s ease-in-out;
            font-size: 0.875rem;
        }
        
        .legend-tab.active {
            background-color: white;
            border-bottom: 2px solid #0d6efd;
            color: #0d6efd;
        }
        
        .legend-body {
            padding: 1rem;
        }
        
        .legend-content {
            display: none;
        }
        
        .legend-content.active {
            display: block;
        }
        
        .legend-dot {
            width: 1rem;
            height: 1rem;
            border-radius: 50%;
            display: inline-block;
        }
        
        /* Recent incidents sidebar */
        .recent-incidents-loading {
            padding: 2rem 0;
        }
        
        .incident-item {
            border-left: 3px solid transparent;
            transition: all 0.2s ease-in-out;
        }
        
        .incident-item:hover {
            background-color: rgba(13, 110, 253, 0.05);
            border-left-color: #0d6efd;
        }
        
        .incident-item.active {
            background-color: rgba(13, 110, 253, 0.1);
            border-left-color: #0d6efd;
        }
        
        /* Quick filters */
        .quick-filters-bar {
            border-bottom: 1px solid rgba(0,0,0,0.1);
        }
        
        .quick-filter-label {
            font-size: 0.875rem;
        }
        
        .quick-filter-section {
            width: 100%;
        }
        
        /* Guide item styles */
        .guide-icon {
            width: 2.5rem;
            height: 2.5rem;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        /* Status badges */
        .status-badge {
            display: inline-flex;
            align-items: center;
            padding: 0.35rem 0.65rem;
            border-radius: 50rem;
            font-weight: 500;
            font-size: 0.75rem;
            text-transform: uppercase;
        }
        
        .status-badge i {
            margin-right: 0.25rem;
        }
        
        /* Type badges */
        .type-badge {
            display: inline-flex;
            align-items: center;
            padding: 0.35rem 0.65rem;
            border-radius: 50rem;
            font-weight: 500;
            font-size: 0.75rem;
        }
        
        .type-badge i {
            margin-right: 0.25rem;
        }
        
        /* Severity badges */
        .severity-badge {
            display: inline-flex;
            align-items: center;
            padding: 0.35rem 0.65rem;
            border-radius: 50rem;
            font-weight: 500;
            font-size: 0.75rem;
            text-transform: uppercase;
        }
        
        .severity-badge i {
            margin-right: 0.25rem;
        }
    </style>
    <script>
        // Initialize the map
        mapboxgl.accessToken = 'pk.eyJ1IjoiY2hhYW5nZ2cwMTkzIiwiYSI6ImNtOHo5ODF6cDAxcTUyaXB0ODBtYXlhN3oifQ.SJ-eGgWUplbUFNE_UwK7JA'; // Replace with your Mapbox access token
        const map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/mapbox/streets-v11',
            center: [120.9842, 14.5995], // Default to Philippines
            zoom: 9
        });

        // Add map controls
        map.addControl(new mapboxgl.NavigationControl(), 'top-right');
        map.addControl(new mapboxgl.FullscreenControl(), 'top-right');
        map.addControl(new mapboxgl.GeolocateControl({
            positionOptions: {
                enableHighAccuracy: true
            },
            trackUserLocation: true,
            showUserHeading: true
        }), 'top-right');

        // Store the markers and incidents
        let markers = [];
        let incidents = [];
        let heatmapLayer = null;
        let heatmapVisible = false;

        // Get the incident modal
        const incidentModal = new bootstrap.Modal(document.getElementById('incident-modal'));
        
        // Setup legend toggle and tabs functionality
        document.getElementById('legend-toggle').addEventListener('click', toggleLegend);
        document.getElementById('legend-close').addEventListener('click', toggleLegend);
        
        // Setup legend tabs
        const legendTabs = document.querySelectorAll('.legend-tab');
        legendTabs.forEach(tab => {
            tab.addEventListener('click', function() {
                // Remove active class from all tabs and contents
                document.querySelectorAll('.legend-tab').forEach(t => t.classList.remove('active'));
                document.querySelectorAll('.legend-content').forEach(c => c.classList.remove('active'));
                
                // Add active class to clicked tab
                this.classList.add('active');
                
                // Show corresponding content
                const tabId = this.getAttribute('data-tab');
                document.getElementById(tabId + '-content').classList.add('active');
            });
        });

        // Toggle heatmap
        document.getElementById('toggle-heatmap').addEventListener('click', toggleHeatmap);

        function toggleLegend() {
            const legend = document.getElementById('floating-legend');
            
            legend.classList.toggle('visible');
        }

        function toggleHeatmap() {
            if (!map.getSource('incidents-heat')) {
                // Initialize heatmap if not already created
                createHeatmapLayer();
            }
            
            if (heatmapVisible) {
                // Hide heatmap layer
                map.setLayoutProperty('incidents-heat', 'visibility', 'none');
                document.getElementById('toggle-heatmap').innerHTML = '<i class="fas fa-fire me-1"></i><span class="d-none d-md-inline">Heatmap</span>';
                // Show markers
                markers.forEach(marker => marker.getElement().style.display = 'flex');
            } else {
                // Show heatmap layer
                map.setLayoutProperty('incidents-heat', 'visibility', 'visible');
                document.getElementById('toggle-heatmap').innerHTML = '<i class="fas fa-map-marker-alt me-1"></i><span class="d-none d-md-inline">Markers</span>';
                // Hide markers
                markers.forEach(marker => marker.getElement().style.display = 'none');
            }
            
            heatmapVisible = !heatmapVisible;
        }
        
        function createHeatmapLayer() {
            // Check if we have incidents data
            if (incidents.length === 0) return;
            
            // Create a GeoJSON source with the incident points
            const heatmapData = {
                type: 'FeatureCollection',
                features: incidents.map(incident => ({
                    type: 'Feature',
                    properties: {
                        id: incident.id,
                        intensity: getIncidentIntensity(incident)
                    },
                    geometry: {
                        type: 'Point',
                        coordinates: [incident.longitude, incident.latitude]
                    }
                }))
            };
            
            // Add the source to the map
            map.addSource('incidents-heat', {
                type: 'geojson',
                data: heatmapData
            });
            
            // Add a heatmap layer
            map.addLayer({
                id: 'incidents-heat',
                type: 'heatmap',
                source: 'incidents-heat',
                layout: {
                    visibility: 'none'
                },
                paint: {
                    // Increase the heatmap weight based on incident severity
                    'heatmap-weight': [
                        'interpolate',
                        ['linear'],
                        ['get', 'intensity'],
                        0, 0.1,
                        1, 0.3,
                        2, 0.5,
                        3, 0.7,
                        4, 1
                    ],
                    // Increase the heatmap color weight by zoom level
                    'heatmap-intensity': [
                        'interpolate',
                        ['linear'],
                        ['zoom'],
                        0, 1,
                        9, 3
                    ],
                    // Color ramp for heatmap from severity levels
                    'heatmap-color': [
                        'interpolate',
                        ['linear'],
                        ['heatmap-density'],
                        0, 'rgba(33,102,172,0)',
                        0.2, 'rgb(103,169,207)',
                        0.4, 'rgb(209,229,240)',
                        0.6, 'rgb(253,219,199)',
                        0.8, 'rgb(239,138,98)',
                        1, 'rgb(178,24,43)'
                    ],
                    // Adjust the heatmap radius by zoom level
                    'heatmap-radius': [
                        'interpolate',
                        ['linear'],
                        ['zoom'],
                        0, 2,
                        9, 20
                    ],
                    // Transition from heatmap to circle layer by zoom level
                    'heatmap-opacity': [
                        'interpolate',
                        ['linear'],
                        ['zoom'],
                        7, 1,
                        12, 0.5
                    ]
                }
            }, 'waterway-label');
        }
        
        // Helper function to calculate incident intensity for heatmap
        function getIncidentIntensity(incident) {
            let intensity = 0;
            
            // Base on severity
            if (incident.severity === 0) intensity = 0.3; // Low
            else if (incident.severity === 1) intensity = 0.5; // Medium
            else if (incident.severity === 2) intensity = 0.7; // High
            else if (incident.severity === 3) intensity = 1.0; // Critical
            
            // Add more weight for specific incident types
            if (incident.type === 'Earthquake' || incident.type === 'Fire') {
                intensity += 0.2;
            }
            
            // Less weight for resolved incidents
            if (incident.status === 3) { // Resolved
                intensity *= 0.7;
            }
            
            // Cap intensity at 1.0
            return Math.min(intensity, 1.0);
        }

        // Load incidents when map is ready
        map.on('load', function() {
            // Add loading indicator
            showMapLoading(true);
            
            loadIncidents();
            
            // Set up event listeners for filters
            document.getElementById('apply-filters').addEventListener('click', applyFilters);
            document.getElementById('reset-filters').addEventListener('click', resetFilters);
            document.getElementById('reset-filters-alert').addEventListener('click', resetFilters);
            document.getElementById('refresh-incidents').addEventListener('click', refreshIncidents);
            
            // Set up quick status filters
            document.querySelectorAll('.quick-status').forEach(btn => {
                btn.addEventListener('click', function() {
                    const status = this.getAttribute('data-status');
                    applyQuickStatusFilter(status);
                });
            });
            
            // Set up search functionality
            document.getElementById('incidents-search').addEventListener('input', searchIncidents);
        });

        // Show/hide loading indicator
        function showMapLoading(show) {
            const loadingIndicator = document.querySelector('.map-loading');
            if (show) {
                if (!loadingIndicator) {
                    const loader = document.createElement('div');
                    loader.className = 'map-loading';
                    loader.innerHTML = `
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <span class="ms-2">Loading incidents...</span>
                    `;
                    document.querySelector('.map-container').appendChild(loader);
                }
            } else {
                if (loadingIndicator) {
                    loadingIndicator.remove();
                }
            }
        }

        // Load incidents from the API
        function loadIncidents() {
            fetch('@Url.Action("GetMapData", "LGU")')
                .then(response => response.json())
                .then(data => {
                    incidents = data;
                    
                    // Hide loading indicator
                    showMapLoading(false);
                    
                    // Update incident count
                    updateIncidentCount(incidents.length);
                    
                    // Render all markers initially
                    renderMarkers(incidents);
                    
                    // Create heatmap layer (but don't show it yet)
                    if (incidents.length > 0) {
                        createHeatmapLayer();
                    }
                    
                    // Populate recent incidents list
                    populateRecentIncidents(incidents);
                    
                    // Update last updated timestamp
                    updateLastUpdated();
                })
                .catch(error => {
                    console.error('Error loading incidents:', error);
                    showMapLoading(false);
                    
                    // Show error message
                    const mapContainer = document.querySelector('.map-container');
                    const errorMsg = document.createElement('div');
                    errorMsg.className = 'map-error-message';
                    errorMsg.innerHTML = `
                        <div class="alert alert-danger">
                            <i class="fas fa-exclamation-circle me-2"></i>
                            Error loading incidents. Please try again later.
                        </div>
                    `;
                    mapContainer.appendChild(errorMsg);
                    
                    // Show error in recent incidents
                    document.querySelector('.recent-incidents-loading').innerHTML = `
                        <i class="fas fa-exclamation-circle text-danger fa-2x"></i>
                        <p class="text-muted mt-2">Error loading incidents</p>
                    `;
                });
        }

        // Update last updated time
        function updateLastUpdated() {
            const now = new Date();
            const hours = now.getHours().toString().padStart(2, '0');
            const minutes = now.getMinutes().toString().padStart(2, '0');
            document.getElementById('incidents-last-updated').textContent = `Last updated: ${hours}:${minutes}`;
        }
        
        // Refresh incidents
        function refreshIncidents() {
            showMapLoading(true);
            
            // Clear previous data
            for (let marker of markers) {
                marker.remove();
            }
            markers = [];
            
            // Remove heatmap if it exists
            if (map.getSource('incidents-heat')) {
                map.removeLayer('incidents-heat');
                map.removeSource('incidents-heat');
            }
            
            // Reset heatmap state
            heatmapVisible = false;
            document.getElementById('toggle-heatmap').innerHTML = '<i class="fas fa-fire me-1"></i><span class="d-none d-md-inline">Heatmap</span>';
            
            // Show loading in recent incidents
            document.getElementById('recent-incidents-list').innerHTML = `
                <div class="recent-incidents-loading text-center py-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="text-muted mt-2">Refreshing incidents...</p>
                </div>
            `;
            
            // Load fresh data
            loadIncidents();
        }
        
        // Apply quick status filter
        function applyQuickStatusFilter(status) {
            let filteredIncidents;
            
            if (status === 'all') {
                filteredIncidents = incidents;
            } else {
                filteredIncidents = incidents.filter(incident => {
                    return incident.status == status;
                });
            }
            
            // Update markers and incidents list
            renderMarkers(filteredIncidents);
            populateRecentIncidents(filteredIncidents);
            
            // Update active button styles
            document.querySelectorAll('.quick-status').forEach(btn => {
                btn.classList.remove('btn-primary', 'btn-success', 'btn-secondary');
                btn.classList.add('btn-outline-primary', 'btn-outline-success', 'btn-outline-secondary');
                
                // Remove outline class and add solid class for the active button
                if (btn.getAttribute('data-status') === status) {
                    if (status === '2') {
                        btn.classList.remove('btn-outline-primary');
                        btn.classList.add('btn-primary');
                    } else if (status === '3') {
                        btn.classList.remove('btn-outline-success');
                        btn.classList.add('btn-success');
                    } else {
                        btn.classList.remove('btn-outline-secondary');
                        btn.classList.add('btn-secondary');
                    }
                }
            });
        }
        
        // Apply date filters
        function applyFilters() {
            const dateFrom = document.getElementById('filter-date-from').value;
            const dateTo = document.getElementById('filter-date-to').value;
            
            let filteredIncidents = incidents;
            
            // Apply date filters
            if (dateFrom) {
                const fromDate = new Date(dateFrom);
                filteredIncidents = filteredIncidents.filter(incident => {
                    const incidentDate = new Date(incident.dateReported);
                    return incidentDate >= fromDate;
                });
            }
            
            if (dateTo) {
                const toDate = new Date(dateTo);
                // Set time to end of day
                toDate.setHours(23, 59, 59, 999);
                filteredIncidents = filteredIncidents.filter(incident => {
                    const incidentDate = new Date(incident.dateReported);
                    return incidentDate <= toDate;
                });
            }
            
            // Update UI
            renderMarkers(filteredIncidents);
            populateRecentIncidents(filteredIncidents);
        }
        
        // Reset all filters
        function resetFilters() {
            // Clear date inputs
            document.getElementById('filter-date-from').value = '';
            document.getElementById('filter-date-to').value = '';
            
            // Reset status filters
            document.querySelectorAll('.quick-status').forEach(btn => {
                // Reset all buttons to outline style
                if (btn.getAttribute('data-status') === '2') {
                    btn.classList.remove('btn-primary');
                    btn.classList.add('btn-outline-primary');
                } else if (btn.getAttribute('data-status') === '3') {
                    btn.classList.remove('btn-success');
                    btn.classList.add('btn-outline-success');
                } else {
                    btn.classList.remove('btn-secondary');
                    btn.classList.add('btn-outline-secondary');
                }
            });
            
            // Clear search
            document.getElementById('incidents-search').value = '';
            
            // Hide no incidents alert
            document.getElementById('no-incidents-alert').classList.add('d-none');
            
            // Render all incidents
            renderMarkers(incidents);
            populateRecentIncidents(incidents);
        }
        
        // Search incidents
        function searchIncidents() {
            const searchTerm = document.getElementById('incidents-search').value.toLowerCase();
            
            if (!searchTerm) {
                // If search is cleared, show all incidents
                populateRecentIncidents(incidents);
                return;
            }
            
            // Filter incidents by title, description, type, location
            const filteredIncidents = incidents.filter(incident => {
                return (
                    incident.title.toLowerCase().includes(searchTerm) ||
                    incident.description.toLowerCase().includes(searchTerm) ||
                    incident.type.toLowerCase().includes(searchTerm) ||
                    incident.location.toLowerCase().includes(searchTerm) ||
                    (incident.city && incident.city.toLowerCase().includes(searchTerm)) ||
                    (incident.barangay && incident.barangay.toLowerCase().includes(searchTerm))
                );
            });
            
            // Update recent incidents list only, keep map the same
            populateRecentIncidents(filteredIncidents);
        }

        // Update incident count display
        function updateIncidentCount(count) {
            const countElement = document.getElementById('incident-count');
            const inProgressCount = incidents.filter(i => {
                let statusNum = i.status;
                if (typeof statusNum === 'string') {
                    if (statusNum === 'InProgress') statusNum = 2;
                    else if (statusNum === 'Resolved') statusNum = 3;
                    else if (statusNum === 'Pending') statusNum = 0;
                    else if (statusNum === 'Declined') statusNum = 1;
                    else statusNum = -1;
                }
                return statusNum === 2;
            }).length;
            const resolvedCount = incidents.filter(i => i.status === 3).length;
            
            // Update the count display to show both status counts
            countElement.innerHTML = `
                <span class="badge bg-primary me-1">${inProgressCount} In Progress</span>
                <span class="badge bg-success">${resolvedCount} Resolved</span>
                <span class="badge bg-secondary">${count} Total</span>
            `;
        }

        // Populate recent incidents list
        function populateRecentIncidents(data) {
            const list = document.getElementById('recent-incidents-list');
            const countBadge = document.getElementById('recent-count');
            
            // Update count badge
            countBadge.textContent = data.length;
            
            // Clear previous content
            list.innerHTML = '';
            
            // Check if there are incidents
            if (data.length === 0) {
                list.innerHTML = `
                    <div class="text-center py-4">
                        <i class="fas fa-map-marked-alt text-muted fa-2x mb-2"></i>
                        <p class="text-muted">No incidents match your criteria</p>
                    </div>
                `;
                return;
            }
            
            // Sort incidents by date (newest first)
            data.sort((a, b) => new Date(b.dateReported) - new Date(a.dateReported));
            
            // Add each incident to the list
            data.forEach(incident => {
                const item = document.createElement('div');
                item.className = 'list-group-item list-group-item-action p-3 incident-item';
                item.setAttribute('data-incident-id', incident.id);
                
                // Format date
                const date = new Date(incident.dateReported);
                const formattedDate = `${date.toLocaleDateString()} ${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}`;
                
                // Construct type and status badges
                const typeBadge = getTypeBadgeHTML(incident.type);
                const statusBadge = getStatusBadgeHTML(incident.status);
                
                // Create item content
                item.innerHTML = `
                    <div class="d-flex justify-content-between align-items-start">
                        <div>
                            <h6 class="mb-1 text-truncate" style="max-width: 200px;">${incident.title}</h6>
                            <p class="mb-1 small text-muted">${incident.location}</p>
                            <div class="d-flex mt-2">
                                ${typeBadge}
                                ${statusBadge}
                            </div>
                        </div>
                        <small class="text-muted" style="white-space: nowrap;">${formattedDate}</small>
                    </div>
                `;
                
                // Add click event to show incident details
                item.addEventListener('click', () => {
                    // Center map on incident
                    map.flyTo({
                        center: [incident.longitude, incident.latitude],
                        zoom: 14,
                        essential: true
                    });
                    
                    // Remove active class from all items
                    document.querySelectorAll('.incident-item').forEach(el => {
                        el.classList.remove('active');
                    });
                    
                    // Add active class to clicked item
                    item.classList.add('active');
                    
                    // Show incident details modal
                    showIncidentDetails(incident);
                });
                
                list.appendChild(item);
            });
        }

        // Modified renderMarkers function to handle no incidents scenario
        function renderMarkers(data) {
            // Remove existing markers
            for (let marker of markers) {
                marker.remove();
            }
            markers = [];

            // Update incident count
            updateIncidentCount(data.length);
            
            // Hide the no incidents alert by default
            document.getElementById('no-incidents-alert').classList.add('d-none');

            // If no incidents, show alert only if filters were applied
            if (data.length === 0) {
                // Check if filters are active
                const dateFrom = document.getElementById('filter-date-from').value;
                const dateTo = document.getElementById('filter-date-to').value;
                
                const filtersApplied = dateFrom || dateTo;
                
                if (filtersApplied) {
                    // Show the no incidents alert
                    document.getElementById('no-incidents-alert').classList.remove('d-none');
                }
                
                return;
            }

            // Create bounds object to fit all markers
            const bounds = new mapboxgl.LngLatBounds();

            // Add new markers
            for (let incident of data) {
                // Check if incident has valid coordinates
                if (!incident.latitude || !incident.longitude) continue;
                
                // Set marker color based on incident type
                let markerColor, markerIcon;
                switch(incident.type) {
                    case 'Earthquake': 
                        markerColor = '#dc3545'; 
                        markerIcon = 'fa-house-damage';
                        break;
                    case 'Flood': 
                        markerColor = '#0d6efd'; 
                        markerIcon = 'fa-water';
                        break;
                    case 'Fire': 
                        markerColor = '#ffc107'; 
                        markerIcon = 'fa-fire';
                        break;
                    case 'Landslide': 
                        markerColor = '#6c757d'; 
                        markerIcon = 'fa-mountain';
                        break;
                    case 'Storm': 
                        markerColor = '#6610f2'; 
                        markerIcon = 'fa-cloud-showers-heavy';
                        break;
                    case 'Accident': 
                        markerColor = '#fd7e14'; 
                        markerIcon = 'fa-car-crash';
                        break;
                    default: 
                        markerColor = '#343a40';
                        markerIcon = 'fa-exclamation-triangle';
                }

                // Create custom HTML element for marker
                const el = document.createElement('div');
                el.className = 'custom-marker';
                el.style.backgroundColor = markerColor;
                el.innerHTML = `<i class="fas ${markerIcon}"></i>`;
                
                // Add a pulse effect for in-progress incidents
                if (incident.status === 2 || incident.status === 'InProgress') {
                    el.style.animation = 'pulse 2s infinite';
                }
                
                // Create a popup
                const popup = new mapboxgl.Popup({
                    offset: 25,
                    closeButton: false,
                    maxWidth: '300px'
                }).setHTML(`
                    <div style="padding: 0.5rem;">
                        <h6 style="margin-bottom: 0.5rem; font-weight: 600;">${incident.title}</h6>
                        <p style="font-size: 0.875rem; margin-bottom: 0.5rem;">${incident.location}</p>
                        <div style="display: flex; gap: 0.5rem; margin-top: 0.5rem;">
                            <span style="font-size: 0.75rem; padding: 0.25rem 0.5rem; border-radius: 20px; background-color: ${markerColor}20; color: ${markerColor}; font-weight: 500;">
                                ${incident.type}
                            </span>
                            <span style="font-size: 0.75rem; padding: 0.25rem 0.5rem; border-radius: 20px; background-color: ${incident.status === 3 ? '#19875430' : '#0d6efd30'}; color: ${incident.status === 3 ? '#198754' : '#0d6efd'}; font-weight: 500;">
                                ${incident.status === 3 ? 'Resolved' : 'In Progress'}
                            </span>
                        </div>
                        <hr style="margin: 0.5rem 0;">
                        <button class="btn btn-sm btn-primary w-100" onclick="showIncidentDetails(${JSON.stringify(incident).replace(/"/g, '&quot;')})">
                            View Details
                        </button>
                    </div>
                `);

                // Create and add the marker
                const marker = new mapboxgl.Marker(el)
                    .setLngLat([incident.longitude, incident.latitude])
                    .setPopup(popup)
                    .addTo(map);
                
                // Add hover event to show popup
                el.addEventListener('mouseenter', () => {
                    marker.getPopup().addTo(map);
                });
                
                el.addEventListener('mouseleave', () => {
                    setTimeout(() => {
                        if (!marker.getPopup()._content.matches(':hover')) {
                            marker.getPopup().remove();
                        }
                    }, 300);
                });
                
                // Add click event to open modal
                el.addEventListener('click', () => {
                    showIncidentDetails(incident);
                });

                // Add to markers array and bounds
                markers.push(marker);
                bounds.extend([incident.longitude, incident.latitude]);
            }

            // Fit map to bounds if we have markers
            if (markers.length > 0) {
                map.fitBounds(bounds, {
                    padding: 50,
                    maxZoom: 14
                });
            }
        }

        // Get status class for badges
        function getStatusClass(status) {
            switch (status) {
                case 2: return 'bg-primary text-white'; // In Progress
                case 3: return 'bg-success text-white'; // Resolved
                case 0: return 'bg-warning text-dark'; // Pending
                case 1: return 'bg-danger text-white'; // Declined
                default: return 'bg-secondary text-white';
            }
        }
        
        // Format status text
        function formatStatus(status) {
            if (status === 'InProgress') return 'In Progress';
            return status;
        }
        
        // Get type icon
        function getTypeIcon(type) {
            switch (type) {
                case 0: return 'fas fa-house-damage'; // Earthquake
                case 1: return 'fas fa-water'; // Flood
                case 2: return 'fas fa-fire'; // Fire
                case 3: return 'fas fa-mountain'; // Landslide
                case 4: return 'fas fa-cloud-showers-heavy'; // Storm
                case 5: return 'fas fa-car-crash'; // Accident
                case 6: return 'fas fa-question'; // Other
                default: return 'fas fa-exclamation-triangle';
            }
        }
        
        // Get type color
        function getTypeColor(type) {
            switch (type) {
                case 0: return '#dc3545'; // Earthquake - red
                case 1: return '#0d6efd'; // Flood - blue
                case 2: return '#ffc107'; // Fire - yellow
                case 3: return '#6c757d'; // Landslide - gray
                case 4: return '#6610f2'; // Storm - purple
                case 5: return '#fd7e14'; // Accident - orange
                case 6: return '#343a40'; // Other - dark gray
                default: return '#343a40';
            }
        }

        // Show incident details in modal
        function showIncidentDetails(incident) {
            // Update modal title
            document.getElementById('modal-title-text').textContent = 'Incident Report Details';
            
            // Set basic information
            document.getElementById('modal-title-text-content').textContent = incident.title;
            document.getElementById('modal-date-value').textContent = formatDate(incident.dateReported);
            document.getElementById('modal-description').textContent = incident.description || 'No description provided.';
            document.getElementById('modal-location').textContent = incident.location || 'Location not specified';
            
            // Set detailed location if available
            let detailedLocation = '';
            if (incident.barangay) detailedLocation += incident.barangay;
            if (incident.city) {
                if (detailedLocation) detailedLocation += ', ';
                detailedLocation += incident.city;
            }
            document.getElementById('modal-detailed-location').textContent = detailedLocation || '';
            
            // Set reporter information if available
            document.getElementById('modal-reporter-name').textContent = incident.reporterName || 'Anonymous';
            document.getElementById('modal-reporter-email').textContent = incident.reporterEmail || 'Email not provided';
            
            // Set assignment information
            if (incident.assignedTo) {
                document.getElementById('modal-org-name').textContent = incident.assignedTo.organization || 'Not specified';
                document.getElementById('modal-assigned-name').textContent = incident.assignedTo.name || 'Not assigned';
                document.getElementById('modal-assigned-date-value').textContent = formatDate(incident.assignedAt) || 'Not recorded';
            } else {
                document.getElementById('modal-org-name').textContent = 'Not assigned';
                document.getElementById('modal-assigned-name').textContent = 'Not assigned';
                document.getElementById('modal-assigned-date-value').textContent = 'Not applicable';
            }
            
            // Set view details link
            document.getElementById('view-details-link').href = '@Url.Action("ReportDetails", "LGU")/' + incident.id;
            
            // Update type badge
            document.getElementById('modal-type-wrapper').innerHTML = getTypeBadgeHTML(incident.type);
            
            // Update status badge
            document.getElementById('modal-status-wrapper').innerHTML = getStatusBadgeHTML(incident.status);
            
            // Update severity badge
            document.getElementById('modal-severity-wrapper').innerHTML = getSeverityBadgeHTML(incident.severity);
            
            // Show the modal
            incidentModal.show();
        }

        // Helper functions
        function formatDate(dateString) {
            if (!dateString) return 'Not specified';
            
            const date = new Date(dateString);
            return `${date.toLocaleDateString()} ${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}`;
        }
        
        function getTypeBadgeHTML(type) {
            let color, icon;
            
            switch(type) {
                case 'Earthquake': 
                    color = '#dc3545'; 
                    icon = 'fa-house-damage';
                    break;
                case 'Flood': 
                    color = '#0d6efd'; 
                    icon = 'fa-water';
                    break;
                case 'Fire': 
                    color = '#ffc107'; 
                    icon = 'fa-fire';
                    break;
                case 'Landslide': 
                    color = '#6c757d'; 
                    icon = 'fa-mountain';
                    break;
                case 'Storm': 
                    color = '#6610f2'; 
                    icon = 'fa-cloud-showers-heavy';
                    break;
                case 'Accident': 
                    color = '#fd7e14'; 
                    icon = 'fa-car-crash';
                    break;
                default: 
                    color = '#343a40';
                    icon = 'fa-exclamation-triangle';
            }
            
            return `<span class="badge type-badge me-1" style="background-color: ${color}20; color: ${color};">
                <i class="fas ${icon}"></i> ${type}
            </span>`;
        }
        
        function getStatusBadgeHTML(status) {
            let statusText, color, icon;
            
            // Convert string status to number if needed
            if (typeof status === 'string') {
                if (status === 'InProgress') status = 2;
                else if (status === 'Resolved') status = 3;
                else if (status === 'Pending') status = 0;
                else if (status === 'Declined') status = 1;
                else status = -1;
            }
            
            switch(status) {
                case 0:
                    statusText = 'Pending';
                    color = '#6c757d'; // gray
                    icon = 'fa-clock';
                    break;
                case 1:
                    statusText = 'Declined';
                    color = '#dc3545'; // red
                    icon = 'fa-times-circle';
                    break;
                case 2:
                    statusText = 'In Progress';
                    color = '#0d6efd'; // blue
                    icon = 'fa-spinner fa-pulse';
                    break;
                case 3:
                    statusText = 'Resolved';
                    color = '#198754'; // green
                    icon = 'fa-check-circle';
                    break;
                default:
                    statusText = 'Unknown';
                    color = '#6c757d'; // gray
                    icon = 'fa-question-circle';
            }
            
            return `<span class="badge status-badge" style="background-color: ${color}20; color: ${color};">
                <i class="fas ${icon}"></i> ${statusText}
            </span>`;
        }
        
        function getSeverityBadgeHTML(severity) {
            let severityText, color, icon;
            
            // Convert to number if needed
            severity = Number(severity);
            
            switch(severity) {
                case 0:
                    severityText = 'Low';
                    color = '#198754'; // green
                    icon = 'fa-info-circle';
                    break;
                case 1:
                    severityText = 'Medium';
                    color = '#ffc107'; // yellow
                    icon = 'fa-exclamation-circle';
                    break;
                case 2:
                    severityText = 'High';
                    color = '#dc3545'; // red
                    icon = 'fa-radiation';
                    break;
                case 3:
                    severityText = 'Critical';
                    color = '#343a40'; // dark
                    icon = 'fa-skull-crossbones';
                    break;
                default:
                    severityText = 'Unknown';
                    color = '#6c757d'; // gray
                    icon = 'fa-question-circle';
            }
            
            return `<span class="badge severity-badge" style="background-color: ${color}20; color: ${color};">
                <i class="fas ${icon}"></i> ${severityText}
            </span>`;
        }
        
        // Make showIncidentDetails available globally for popup buttons
        window.showIncidentDetails = showIncidentDetails;
    </script>
}

@section Styles {
    <style>
        /* Map container */
        .map-container {
            height: 75vh;
            min-height: 500px;
            position: relative;
            border-radius: 0 0 0.25rem 0.25rem;
            overflow: hidden;
        }
        
        /* Map overlay info */
        .map-overlay-info {
            position: absolute;
            top: 10px;
            left: 10px;
            z-index: 1;
            background-color: rgba(255, 255, 255, 0.9);
            padding: 5px 10px;
            border-radius: 4px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
        
        /* Legend toggle button - repositioned and restyled */
        #legend-toggle {
            bottom: 100px;
            right: 10px;
            z-index: 5;
            border-radius: 4px;
            padding: 8px 15px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
            font-weight: 500;
            color: white;
        }
        
        /* Floating map legend with tabs - updated position to match new button position */
        .map-legend {
            position: absolute;
            bottom: 100px;
            right: 70px;
            z-index: 10;
            width: 280px;
            background-color: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 3px 15px rgba(0, 0, 0, 0.2);
            transform: translateY(20px);
            transition: transform 0.3s ease, opacity 0.3s ease;
            opacity: 0;
        }
        
        .map-legend.visible {
            transform: translateY(0);
            opacity: 1;
        }
        
        .legend-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 15px;
            background-color: #f8f9fa;
            border-bottom: 1px solid #eee;
        }
        
        .legend-tabs {
            display: flex;
            border-bottom: 1px solid #eee;
        }
        
        .legend-tab {
            flex: 1;
            padding: 8px 0;
            text-align: center;
            background: none;
            border: none;
            cursor: pointer;
            font-size: 14px;
            color: #6c757d;
            border-bottom: 3px solid transparent;
            transition: all 0.2s ease;
        }
        
        .legend-tab:hover {
            background-color: #f8f9fa;
            color: #495057;
        }
        
        .legend-tab.active {
            color: #0d6efd;
            border-bottom-color: #0d6efd;
            font-weight: 500;
        }
        
        .legend-body {
            padding: 15px;
            max-height: 250px;
            overflow-y: auto;
        }
        
        .legend-content {
            display: none;
        }
        
        .legend-content.active {
            display: block;
        }
        
        /* Loading indicator */
        .map-loading {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(255, 255, 255, 0.8);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 5;
            font-weight: 500;
        }
        
        /* Error and No data messages */
        .map-error-message,
        .map-no-data-message {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            z-index: 5;
            width: 80%;
            max-width: 500px;
        }
        
        /* Card styling */
        .dashboard-card {
            margin-bottom: 1.5rem;
            border-radius: 0.5rem;
            overflow: hidden;
        }
        
        .card-header {
            padding: 1rem;
            border-bottom: none;
        }
        
        .card-icon {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 12px;
            flex-shrink: 0;
        }
        
        /* Introduction guide */
        .guide-icon {
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-shrink: 0;
        }
        
        .guide-item {
            margin-bottom: 1rem;
        }
        
        /* Legend styling */
        .legend-dot {
            width: 16px;
            height: 16px;
            border-radius: 50%;
            display: inline-block;
        }
        
        /* No incidents alert styling */
        #no-incidents-alert {
            top: 70px;
            left: 50%;
            transform: translateX(-50%);
            z-index: 5;
            max-width: 350px;
            box-shadow: 0 3px 15px rgba(0, 0, 0, 0.2);
            border-left: 4px solid #ffc107;
        }
        
        /* Make the whole UI more responsive */
        @@media (max-width: 768px) {
            .map-container {
                height: 60vh;
            }
            
            #legend-toggle {
                bottom: 70px;
                right: 10px;
                padding: 6px 10px;
            }
            
            .map-legend {
                width: 250px;
                bottom: 70px;
                right: 60px;
            }
            
            #no-incidents-alert {
                top: auto;
                bottom: 20px;
                max-width: 90%;
                font-size: 0.9rem;
            }
        }
        
        /* Incident marker */
        .incident-marker {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            border: 3px solid white;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
            transition: all 0.2s ease;
            cursor: pointer;
        }
        
        .incident-marker:hover {
            transform: scale(1.2);
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.4);
        }
        
        /* Popup styling */
        .mapboxgl-popup {
            max-width: 300px;
        }
        
        .incident-popup .mapboxgl-popup-content {
            padding: 15px;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }
        
        .incident-popup-content {
            min-width: 200px;
        }
        
        /* Modal styling */
        .incident-type-icon {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
        }
        
        .badge-lg {
            font-size: 0.9rem;
            padding: 0.5rem 0.75rem;
        }
        
        .incident-header {
            border-bottom: 1px solid #f1f1f1;
            padding-bottom: 1rem;
        }
        
        .incident-description,
        .incident-location,
        .incident-status,
        .incident-organization {
            position: relative;
        }
        
        /* Filter styling */
        .form-check-inline {
            margin-bottom: 0.5rem;
            margin-right: 0.75rem;
        }
        
        .incident-type-filters, .status-filters, .severity-filters {
            max-height: 150px;
            overflow-y: auto;
            padding: 0.5rem;
            border: 1px solid #eee;
            border-radius: 4px;
            background-color: #f8f9fa;
        }
        
        /* Filter badges */
        #active-filters-container {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
            min-height: 38px;
        }
        
        .filter-badge {
            padding: 0.5rem 0.75rem;
            border-radius: 50px;
            font-weight: normal;
            font-size: 0.85rem;
        }
        
        /* Custom badge colors */
        .bg-purple {
            background-color: #6610f2;
        }
        
        .bg-orange {
            background-color: #fd7e14;
            color: white;
        }
        
        /* Colored checkboxes for filters */
        .type-filter:checked[value="Earthquake"] {
            background-color: #dc3545;
            border-color: #dc3545;
        }
        
        .type-filter:checked[value="Flood"] {
            background-color: #0d6efd;
            border-color: #0d6efd;
        }
        
        .type-filter:checked[value="Fire"] {
            background-color: #ffc107;
            border-color: #ffc107;
        }
        
        .type-filter:checked[value="Landslide"] {
            background-color: #6c757d;
            border-color: #6c757d;
        }
        
        .type-filter:checked[value="Storm"] {
            background-color: #6610f2;
            border-color: #6610f2;
        }
        
        .type-filter:checked[value="Accident"] {
            background-color: #fd7e14;
            border-color: #fd7e14;
        }
        
        /* Quick Filters Bar - refined styling */
        .quick-filters-bar {
            border-top-left-radius: 0;
            border-top-right-radius: 0;
        }
        
        .quick-filter-label {
            font-size: 0.9rem;
            white-space: nowrap;
        }
        
        .quick-filter-section {
            margin-right: 0.5rem;
        }
        
        .quick-filter-section .btn-group {
            box-shadow: 0 1px 3px rgba(0,0,0,0.05);
        }
        
        .quick-filter-section .btn {
            border-color: #dee2e6;
            font-size: 0.85rem;
            padding: 0.375rem 0.75rem;
        }
        
        .quick-filter-section .btn.active {
            font-weight: 500;
            box-shadow: inset 0 3px 5px rgba(0,0,0,0.125);
            border-color: transparent;
        }
        
        /* Active state styling */
        .quick-date.active {
            background-color: #0d6efd;
            color: white;
        }
        
        .quick-status[data-status="Pending"].active {
            background-color: #ffc107;
            color: #212529;
        }
        
        .quick-status[data-status="InProgress"].active {
            background-color: #0d6efd;
            color: white;
        }
        
        .quick-status[data-status="Resolved"].active {
            background-color: #198754;
            color: white;
        }
        
        .quick-status[data-status="all"].active {
            background-color: #6c757d;
            color: white;
        }
        
        /* Responsive adjustments */
        @@media (max-width: 768px) {
            .quick-filters-bar {
                padding: 0.5rem 0.25rem !important;
            }
            
            .quick-filter-section {
                margin-right: 0;
                width: 100%;
            }
            
            .quick-filter-section .btn-group {
                width: 100%;
                display: flex;
            }
            
            .quick-filter-section .btn {
                flex: 1;
                font-size: 0.75rem;
                padding: 0.25rem 0.5rem;
            }
            
            #open-advanced-filters {
                font-size: 0.75rem;
                padding: 0.25rem 0.5rem;
            }
        }
        
        /* Status icon styling */
        .status-icon {
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
        }
        
        /* Recent incidents list styling */
        .incident-list-icon {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 30px;
            font-size: 1.2rem;
            flex-shrink: 0;
        }
        
        .status-dot {
            font-size: 0.9rem;
        }
        
        .list-group-item:hover {
            background-color: #f8f9fa;
        }
        
        .list-group-item h6 {
            font-size: 0.95rem;
            font-weight: 500;
        }
        
        /* Ensure reasonable sizing of list items */
        .recent-incidents-loading {
            min-height: 200px;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
        }
        
        #recent-incidents-list {
            max-height: 600px;
            overflow-y: auto;
            scrollbar-width: thin;
        }
        
        #recent-incidents-list::-webkit-scrollbar {
            width: 6px;
        }
        
        #recent-incidents-list::-webkit-scrollbar-track {
            background: #f1f1f1;
        }
        
        #recent-incidents-list::-webkit-scrollbar-thumb {
            background: #c1c1c1;
            border-radius: 3px;
        }
        
        .incident-time {
            font-size: 0.75rem;
            color: #6c757d;
        }
        
        .incident-description {
            color: #495057;
            line-height: 1.3;
            max-height: 2.6em;
            overflow: hidden;
        }
        
        .list-group-item {
            transition: background-color 0.15s ease-in-out;
            border-left: 3px solid transparent;
        }
        
        .list-group-item:hover {
            background-color: #f8f9fa;
            border-left-color: #0d6efd;
        }
        
        .list-group-item h6 {
            font-size: 0.95rem;
            font-weight: 500;
            color: #212529;
        }
        
        /* Improved badge styling */
        .badge {
            font-weight: 500;
            letter-spacing: 0.3px;
        }
        
        /* Incidents filter bar */
        .incidents-filter-bar {
            border-bottom: 1px solid #eee;
        }
        
        .incidents-filter-bar .form-control:focus {
            box-shadow: none;
            border-color: #ced4da;
        }
        
        /* Active state for list items */
        .list-group-item.active {
            background-color: #f0f7ff !important;
            border-left-color: #0d6efd !important;
            color: #212529 !important;
        }
        
        .list-group-item.active h6 {
            color: #0d6efd !important;
        }
        
        /* Adjust height for recent incidents list */
        #recent-incidents-list {
            max-height: calc(100vh - 300px);
            min-height: 400px;
            overflow-y: auto;
            scrollbar-width: thin;
        }
        
        /* Make card fill available height */
        .h-100 {
            height: 100%;
        }
        
        /* Improved marker styling */
        .incident-marker {
            width: 22px;
            height: 22px;
            border-radius: 50%;
            border: 3px solid white;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
            transition: all 0.2s ease;
            cursor: pointer;
        }
        
        .incident-marker:hover {
            transform: scale(1.3);
            box-shadow: 0 0 15px rgba(0, 0, 0, 0.4);
            z-index: 10;
        }
        
        /* Popup styling improvements */
        .mapboxgl-popup {
            z-index: 5;
        }
        
        .incident-popup .mapboxgl-popup-content {
            padding: 15px;
            border-radius: 8px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        /* Date filter styling */
        .quick-filter-section .input-group {
            min-width: 300px;
        }
        
        .quick-filter-section .input-group-text {
            background-color: #f8f9fa;
            border-color: #dee2e6;
        }
        
        .quick-filter-section .form-control {
            border-color: #dee2e6;
        }
        
        .quick-filter-section .form-control:focus {
            border-color: #86b7fe;
            box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
        }
        
        #apply-date-filter {
            border-top-left-radius: 0;
            border-bottom-left-radius: 0;
        }
        
        @@media (max-width: 768px) {
            .quick-filter-section .input-group {
                min-width: 100%;
            }
            
            .quick-filter-section .input-group-text {
                padding: 0.25rem 0.5rem;
            }
            
            .quick-filter-section .form-control {
                padding: 0.25rem 0.5rem;
            }
        }
    </style>
} 