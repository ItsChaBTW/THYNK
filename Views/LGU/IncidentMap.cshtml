@{
    ViewData["Title"] = "Incident Map";
    Layout = "_LGULayout";
}

<div class="container-fluid px-4">
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h5 class="m-0">Incident Map</h5>
                            <small>View and track incidents in your area</small>
                        </div>
                        <a href="@Url.Action("Dashboard", "LGU")" class="btn btn-light btn-sm">
                            <i class="fas fa-arrow-left me-2"></i>Back to Dashboard
                        </a>
                    </div>
                </div>
                <div class="card-body">
                    <div id="map" style="height: 600px;"></div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
          integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
          crossorigin="" />
    <style>
        .custom-popup .leaflet-popup-content {
            margin: 15px;
            max-width: 300px;
        }
        .severity-marker {
            border-radius: 50%;
            border: 2px solid white;
            box-shadow: 0 0 5px rgba(0,0,0,0.3);
            width: 20px !important;
            height: 20px !important;
            margin-left: -10px !important;
            margin-top: -10px !important;
        }
        .severity-low { background-color: #28a745; }
        .severity-medium { background-color: #ffc107; }
        .severity-high { background-color: #dc3545; }
    </style>
}

@section Scripts {
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
            integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
            crossorigin=""></script>
    <script>
        let map;
        let markers = [];
        let markerLayer;

        function initMap() {
            console.log('Initializing map...'); // Debug log
            
            try {
                // Initialize the map centered on the Philippines
                map = L.map('map').setView([12.8797, 121.7740], 6);
                console.log('Map initialized successfully'); // Debug log

                // Add OpenStreetMap tiles
                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    maxZoom: 19,
                    attribution: 'Â© OpenStreetMap contributors'
                }).addTo(map);
                console.log('Tile layer added successfully'); // Debug log

                // Create a layer group for markers
                markerLayer = L.layerGroup().addTo(map);
                console.log('Marker layer created successfully'); // Debug log

                // Load incident data
                loadIncidents();
            } catch (error) {
                console.error('Error initializing map:', error);
            }
        }

        function loadIncidents() {
            console.log('Loading incidents...'); // Debug log
            
            fetch('/LGU/GetMapData')
                .then(response => {
                    console.log('Response status:', response.status); // Debug log
                    return response.json();
                })
                .then(reports => {
                    console.log('Received reports:', reports); // Debug log

                    // Clear existing markers
                    markerLayer.clearLayers();
                    markers = [];

                    if (!Array.isArray(reports)) {
                        console.error('Reports is not an array:', reports);
                        return;
                    }

                    reports.forEach(report => {
                        console.log('Processing report:', report); // Debug log
                        
                        // Check if coordinates are valid numbers
                        const lat = parseFloat(report.Latitude);
                        const lng = parseFloat(report.Longitude);
                        
                        if (!isNaN(lat) && !isNaN(lng) && lat !== 0 && lng !== 0) {
                            console.log('Creating marker for report:', report.Id, 'at', lat, lng); // Debug log
                            
                            // Create custom marker icon
                            const severityClass = getSeverityClass(report.Severity);
                            const marker = L.divIcon({
                                className: `severity-marker ${severityClass}`,
                                iconSize: [20, 20]
                            });

                            // Create popup content
                            const content = `
                                <div class="custom-popup">
                                    <h6 class="mb-1">${report.Title}</h6>
                                    <p class="mb-1"><strong>Type:</strong> ${report.Type}</p>
                                    <p class="mb-1"><strong>Severity:</strong> ${report.Severity}</p>
                                    <p class="mb-1"><strong>Status:</strong> ${report.Status}</p>
                                    <p class="mb-1"><strong>Location:</strong> ${report.Location || 'Not specified'}</p>
                                    <p class="mb-1"><strong>Date:</strong> ${new Date(report.DateReported).toLocaleString()}</p>
                                    ${report.AssignedTo ? `
                                        <p class="mb-1"><strong>Assigned To:</strong> ${report.AssignedTo.Name}</p>
                                        <p class="mb-0"><strong>Organization:</strong> ${report.AssignedTo.Organization}</p>
                                    ` : ''}
                                    <div class="mt-2">
                                        <a href="/LGU/ReportDetails/${report.Id}" class="btn btn-sm btn-primary">
                                            View Details
                                        </a>
                                    </div>
                                </div>
                            `;

                            try {
                                // Create marker and add to map
                                const mapMarker = L.marker([lat, lng], { icon: marker })
                                    .bindPopup(content)
                                    .addTo(markerLayer);

                                markers.push(mapMarker);
                                console.log('Marker created successfully for report:', report.Id); // Debug log
                            } catch (error) {
                                console.error('Error creating marker for report:', report.Id, error);
                            }
                        } else {
                            console.log('Skipping report:', report.Id, 'due to invalid coordinates:', lat, lng); // Debug log
                        }
                    });

                    // If we have markers, fit the map to show all of them
                    if (markers.length > 0) {
                        try {
                            const group = new L.featureGroup(markers);
                            map.fitBounds(group.getBounds().pad(0.1));
                            console.log('Map bounds adjusted to show all markers'); // Debug log
                        } catch (error) {
                            console.error('Error adjusting map bounds:', error);
                        }
                    } else {
                        console.log('No markers were created'); // Debug log
                    }
                })
                .catch(error => {
                    console.error('Error loading incidents:', error);
                    alert('Error loading incident data. Please try again later.');
                });
        }

        function getSeverityClass(severity) {
            const classes = {
                'Low': 'severity-low',
                'Medium': 'severity-medium',
                'High': 'severity-high'
            };
            return classes[severity] || classes['Low'];
        }

        // Initialize the map when the page loads
        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOM loaded, initializing map...'); // Debug log
            initMap();
        });
    </script>
} 