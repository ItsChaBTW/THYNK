@model IEnumerable<THYNK.Models.DisasterReport>
@using System.Security.Claims
@{
    ViewData["Title"] = "Manage Reports";
    Layout = "_LGULayout";
}

<style>
    /* Enhanced Minimalist Manage Reports Styles */
    .reports-container {
        height: calc(100vh - 80px);
        display: flex;
        flex-direction: column;
        padding: 1.5rem 0;
        overflow: hidden;
    }
    
    .page-header {
        display: flex;
        align-items: center;
        margin-bottom: 1.5rem;
        padding-bottom: 1rem;
        border-bottom: 1px solid rgba(0, 0, 0, 0.05);
        position: relative;
    }
    
    .page-header::after {
        content: '';
        position: absolute;
        bottom: -1px;
        left: 0;
        width: 100px;
        height: 2px;
        background: linear-gradient(to right, #1ABC9C, rgba(26, 188, 156, 0.1));
    }
    
    .page-title {
        font-size: 1.4rem;
        font-weight: 500;
        color: var(--primary);
        margin: 0;
        letter-spacing: 0.01em;
    }
    
    .page-subtitle {
        font-size: 0.85rem;
        color: var(--dark-alt);
        margin-top: 0.25rem;
        max-width: 600px;
    }
    
    .info-notice {
        background-color: rgba(26, 188, 156, 0.05);
        border-left: 3px solid #1ABC9C;
        padding: 1rem 1.25rem;
        margin-bottom: 1.5rem;
        border-radius: 0.25rem;
        font-size: 0.85rem;
        color: var(--dark-alt);
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.02);
        transition: all 0.3s ease;
    }
    
    .info-notice:hover {
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.04);
        transform: translateY(-1px);
    }
    
    .info-notice i {
        color: #1ABC9C;
    }
    
    .controls-section {
        margin-bottom: 1.5rem;
        position: relative;
        z-index: 20;
    }
    
    .controls-row {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
        align-items: center;
        gap: 1rem;
        background-color: rgba(255, 255, 255, 0.8);
        padding: 0.75rem;
        border-radius: 0.5rem;
        backdrop-filter: blur(5px);
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.03);
    }
    
    .filter-group {
        display: flex;
        background-color: #fff;
        border-radius: 0.25rem;
        overflow: hidden;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.03);
        transition: all 0.3s ease;
    }
    
    .filter-group:hover {
        box-shadow: 0 3px 8px rgba(0, 0, 0, 0.05);
    }
    
    .filter-link {
        padding: 0.6rem 1.25rem;
        font-size: 0.85rem;
        color: var(--dark-alt);
        text-decoration: none;
        border: 1px solid rgba(0, 0, 0, 0.07);
        transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
        font-weight: 500;
        position: relative;
        overflow: hidden;
    }
    
    .filter-link:not(:last-child) {
        border-right: none;
    }
    
    .filter-link:hover {
        background-color: rgba(26, 188, 156, 0.05);
        color: #1ABC9C;
    }
    
    .filter-link.active {
        background-color: #1ABC9C;
        color: white;
        border-color: #1ABC9C;
    }
    
    .filter-link.active::after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        height: 2px;
        background-color: rgba(255, 255, 255, 0.4);
    }
    
    .search-form {
        display: flex;
        max-width: 320px;
        position: relative;
    }
    
    .search-input {
        border: 1px solid rgba(0, 0, 0, 0.07);
        border-right: none;
        border-radius: 0.25rem 0 0 0.25rem;
        padding: 0.6rem 1rem;
        font-size: 0.85rem;
        color: var(--dark);
        width: 100%;
        transition: all 0.3s ease;
        background-color: #fff;
    }
    
    .search-input:focus {
        outline: none;
        box-shadow: 0 0 0 2px rgba(26, 188, 156, 0.2);
        border-color: rgba(26, 188, 156, 0.3);
    }
    
    .search-button {
        background-color: #1ABC9C;
        border: none;
        color: #fff;
        padding: 0 1rem;
        border-radius: 0 0.25rem 0.25rem 0;
        cursor: pointer;
        transition: all 0.3s ease;
    }
    
    .search-button:hover {
        background-color: #16a085;
    }
    
    .content-area {
        flex: 1;
        overflow: auto;
        scrollbar-width: thin;
        scrollbar-color: rgba(0, 0, 0, 0.2) transparent;
        position: relative;
        height: calc(100vh - 250px);
    }
    
    .content-area::-webkit-scrollbar {
        width: 6px;
    }
    
    .content-area::-webkit-scrollbar-track {
        background: transparent;
    }
    
    .content-area::-webkit-scrollbar-thumb {
        background-color: rgba(0, 0, 0, 0.2);
        border-radius: 3px;
    }
    
    .content-area::-webkit-scrollbar-thumb:hover {
        background-color: rgba(0, 0, 0, 0.3);
    }
    
    .table-container {
        border-radius: 0.5rem;
        overflow: hidden;
        box-shadow: 0 3px 12px rgba(0, 0, 0, 0.07);
        background-color: #fff;
        animation: fadeIn 0.5s ease;
        height: 100%;
        display: flex;
        flex-direction: column;
    }
    
    .reports-table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0;
    }
    
    .reports-table th {
        background-color: rgba(26, 188, 156, 0.03);
        color: var(--dark-alt);
        font-weight: 500;
        text-transform: uppercase;
        font-size: 0.7rem;
        letter-spacing: 0.08em;
        padding: 1rem 1.25rem;
        text-align: left;
        border-bottom: 1px solid rgba(0, 0, 0, 0.05);
        position: sticky;
        top: 0;
        z-index: 10;
        backdrop-filter: blur(5px);
        white-space: nowrap;
    }
    
    .reports-table td {
        padding: 1.25rem;
        font-size: 0.85rem;
        color: var(--dark);
        border-bottom: 1px solid rgba(0, 0, 0, 0.03);
        vertical-align: middle;
        transition: all 0.2s ease;
    }
    
    .reports-table tr:last-child td {
        border-bottom: none;
    }
    
    .reports-table tr {
        transition: all 0.3s ease;
    }
    
    .reports-table tr:hover td {
        background-color: rgba(26, 188, 156, 0.02);
    }
    
    .reports-table tr:hover {
        transform: translateX(3px);
        box-shadow: -3px 0 0 #1ABC9C;
    }
    
    .badge {
        display: inline-block;
        padding: 0.35em 0.65em;
        font-size: 0.7em;
        font-weight: 500;
        line-height: 1;
        text-align: center;
        white-space: nowrap;
        vertical-align: baseline;
        border-radius: 3px;
        letter-spacing: 0.03em;
        transition: all 0.3s ease;
    }
    
    .severity-badge {
        border-radius: 50px;
        padding: 0.4em 0.8em;
        font-weight: 400;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
    }
    
    .date-cell {
        color: var(--dark-alt);
        font-size: 0.75rem;
        white-space: nowrap;
    }
    
    .actions-cell {
        display: flex;
        gap: 0.5rem;
        justify-content: flex-end;
    }
    
    .action-button {
        padding: 0.4rem 0.8rem;
        border-radius: 0.25rem;
        font-size: 0.75rem;
        font-weight: 500;
        color: var(--dark);
        background-color: transparent;
        border: 1px solid rgba(0, 0, 0, 0.1);
        transition: all 0.3s cubic-bezier(0.25, 0.8, 0.25, 1);
        cursor: pointer;
        display: inline-flex;
        align-items: center;
        gap: 0.3rem;
        text-decoration: none;
    }
    
    .action-button:hover {
        transform: translateY(-2px);
        box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);
    }
    
    .action-view {
        color: #1ABC9C;
        border-color: #1ABC9C;
    }
    
    .action-view:hover {
        background-color: #1ABC9C;
        color: white;
    }
    
    .action-update {
        color: var(--success);
        border-color: var(--success);
    }
    
    .action-update:hover {
        background-color: var(--success);
        color: white;
    }
    
    .empty-state {
        padding: 5rem 2rem;
        text-align: center;
        color: var(--dark-alt);
        background-color: white;
        border-radius: 0.5rem;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        animation: fadeIn 0.5s ease;
        height: 100%;
    }
    
    .empty-icon {
        color: rgba(26, 188, 156, 0.15);
        margin-bottom: 1.5rem;
        font-size: 3rem;
    }
    
    .empty-text {
        font-size: 1rem;
        color: var(--dark-alt);
        margin-bottom: 0.5rem;
    }
    
    .empty-subtext {
        font-size: 0.85rem;
        color: var(--muted);
        max-width: 400px;
        margin: 0 auto;
        line-height: 1.5;
    }
    
    .modal-container {
        border-radius: 0.5rem;
        overflow: hidden;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    }
    
    .modal-header {
        background-color: #fff;
        padding: 1.5rem;
        border-bottom: 1px solid rgba(0, 0, 0, 0.05);
        position: relative;
    }
    
    .modal-header::after {
        content: '';
        position: absolute;
        bottom: -1px;
        left: 0;
        width: 80px;
        height: 2px;
        background: linear-gradient(to right, #1ABC9C, rgba(26, 188, 156, 0.1));
    }
    
    .modal-title {
        font-size: 1.1rem;
        font-weight: 500;
        color: var(--primary);
        margin: 0;
    }
    
    .modal-body {
        padding: 1.5rem;
    }
    
    .form-group {
        margin-bottom: 1.5rem;
    }
    
    .form-label {
        display: block;
        margin-bottom: 0.5rem;
        font-size: 0.85rem;
        font-weight: 500;
        color: var(--dark-alt);
    }
    
    .form-select,
    .form-textarea {
        width: 100%;
        padding: 0.85rem;
        border: 1px solid rgba(0, 0, 0, 0.08);
        border-radius: 0.25rem;
        font-size: 0.85rem;
        color: var(--dark);
        background-color: #fff;
        transition: all 0.3s ease;
    }
    
    .form-select:focus,
    .form-textarea:focus {
        outline: none;
        border-color: #1ABC9C;
        box-shadow: 0 0 0 3px rgba(26, 188, 156, 0.1);
    }
    
    .form-textarea {
        resize: vertical;
        min-height: 120px;
    }
    
    .modal-footer {
        padding: 1rem 1.5rem;
        display: flex;
        justify-content: flex-end;
        gap: 0.75rem;
        border-top: 1px solid rgba(0, 0, 0, 0.05);
        background-color: rgba(0, 0, 0, 0.01);
    }
    
    .btn-cancel {
        background-color: transparent;
        color: var(--dark-alt);
        border: 1px solid rgba(0, 0, 0, 0.1);
        padding: 0.7rem 1.5rem;
        border-radius: 0.25rem;
        font-size: 0.85rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
    }
    
    .btn-cancel:hover {
        background-color: rgba(0, 0, 0, 0.03);
    }
    
    .btn-submit {
        background-color: #1ABC9C;
        color: white;
        border: none;
        padding: 0.7rem 1.5rem;
        border-radius: 0.25rem;
        font-size: 0.85rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
    }
    
    .btn-submit:hover {
        background-color: #16a085;
        transform: translateY(-2px);
        box-shadow: 0 3px 8px rgba(26, 188, 156, 0.3);
    }
    
    @@keyframes fadeIn {
        from { opacity: 0; transform: translateY(10px); }
        to { opacity: 1; transform: translateY(0); }
    }
    
    /* Table animations */
    @@keyframes slideIn {
        from { transform: translateX(-10px); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
    }
    
    .reports-table tr {
        animation: slideIn 0.3s ease forwards;
        opacity: 0;
    }
    
    .reports-table tr:nth-child(1) { animation-delay: 0.05s; }
    .reports-table tr:nth-child(2) { animation-delay: 0.1s; }
    .reports-table tr:nth-child(3) { animation-delay: 0.15s; }
    .reports-table tr:nth-child(4) { animation-delay: 0.2s; }
    .reports-table tr:nth-child(5) { animation-delay: 0.25s; }
    .reports-table tr:nth-child(6) { animation-delay: 0.3s; }
    .reports-table tr:nth-child(7) { animation-delay: 0.35s; }
    .reports-table tr:nth-child(8) { animation-delay: 0.4s; }
    .reports-table tr:nth-child(9) { animation-delay: 0.45s; }
    .reports-table tr:nth-child(10) { animation-delay: 0.5s; }
    
    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .reports-container {
            height: auto;
            min-height: calc(100vh - 80px);
        }
        
        .controls-row {
            flex-direction: column;
            align-items: stretch;
        }
        
        .filter-group,
        .search-form {
            width: 100%;
            max-width: none;
        }
        
        .filter-link {
            flex: 1;
            text-align: center;
            padding: 0.6rem 0.5rem;
        }
        
        .reports-table {
            min-width: 768px;
        }
        
        .content-area {
            overflow-x: auto;
            height: auto;
            max-height: calc(100vh - 300px);
        }
    }

    .highlight-new {
        animation: highlight 2s ease-in-out;
    }

    @@keyframes highlight {
        0% { background-color: rgba(255, 193, 7, 0.2); }
        100% { background-color: transparent; }
    }

    .table-container {
        transition: opacity 0.3s ease-in-out;
    }

    tr[data-report-id] {
        transition: background-color 0.3s ease-in-out;
    }

    /* Priority section headers */
    .priority-section-header {
        background-color: rgba(0, 0, 0, 0.03);
    }
    
    .priority-section-title {
        font-weight: 500;
        color: var(--dark);
        padding: 0.75rem 1.25rem;
        font-size: 0.9rem;
    }
    
    .empty-category-message {
        text-align: center;
        padding: 1.5rem;
        color: var(--dark-alt);
        font-size: 0.85rem;
        font-style: italic;
    }
    
    /* Priority section specific styles */
    tr[data-priority="critical"] {
        border-left: 3px solid #dc3545;
    }
    
    tr[data-priority="high"] {
        border-left: 3px solid #fd7e14;
    }
    
    tr[data-priority="medium"] {
        border-left: 3px solid #ffc107;
    }
    
    tr[data-priority="low"] {
        border-left: 3px solid #0dcaf0;
    }
    
    /* Styling for the priority section headers */
    .priority-section-header:nth-of-type(1) {
        background-color: rgba(220, 53, 69, 0.05);
        border-left: 3px solid #dc3545;
    }
    
    .priority-section-header:nth-of-type(3) {
        background-color: rgba(253, 126, 20, 0.05);
        border-left: 3px solid #fd7e14;
    }
    
    .priority-section-header:nth-of-type(5) {
        background-color: rgba(255, 193, 7, 0.05);
        border-left: 3px solid #ffc107;
    }
    
    .priority-section-header:nth-of-type(7) {
        background-color: rgba(13, 202, 240, 0.05);
        border-left: 3px solid #0dcaf0;
    }
    
    /* Enhanced priority view styles */
    .priority-view .priority-section-header {
        position: sticky;
        top: 0;
        z-index: 5;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }
    
    .priority-view .priority-section-header:nth-of-type(1) {
        background-color: rgba(220, 53, 69, 0.1);
    }
    
    .priority-view .priority-section-header:nth-of-type(3) {
        background-color: rgba(253, 126, 20, 0.1);
    }
    
    .priority-view .priority-section-header:nth-of-type(5) {
        background-color: rgba(255, 193, 7, 0.1);
    }
    
    .priority-view .priority-section-header:nth-of-type(7) {
        background-color: rgba(13, 202, 240, 0.1);
    }
    
    .priority-view tr[data-priority] {
        transition: all 0.3s ease;
    }
    
    .sort-indicator {
        font-size: 0.65rem;
        background-color: rgba(255, 255, 255, 0.25);
        color: rgba(0, 0, 0, 0.7);
        padding: 0.25rem 0.5rem;
        border-radius: 3px;
        margin-left: 0.75rem;
        font-weight: normal;
        vertical-align: middle;
    }
    
    .priority-section-header:nth-of-type(1) .sort-indicator {
        background-color: rgba(220, 53, 69, 0.1);
    }
    
    .priority-section-header:nth-of-type(3) .sort-indicator {
        background-color: rgba(253, 126, 20, 0.1);
    }
    
    .priority-section-header:nth-of-type(5) .sort-indicator {
        background-color: rgba(255, 193, 7, 0.1);
    }
    
    .priority-section-header:nth-of-type(7) .sort-indicator {
        background-color: rgba(13, 202, 240, 0.1);
    }

    /* Severity view specific styles */
    .severity-view tr[data-priority="critical"] {
        background-color: rgba(220, 53, 69, 0.03);
        border-left: 3px solid #dc3545;
    }
    
    .severity-view tr[data-priority="high"] {
        background-color: rgba(253, 126, 20, 0.03);
        border-left: 3px solid #fd7e14;
    }
    
    .severity-view tr[data-priority="medium"] {
        background-color: rgba(255, 193, 7, 0.03);
        border-left: 3px solid #ffc107;
    }
    
    .severity-view tr[data-priority="low"] {
        background-color: rgba(13, 202, 240, 0.03);
        border-left: 3px solid #0dcaf0;
    }
    
    /* Severity level badges */
    .severity-view .severity-badge.bg-dark::before {
        content: "Critical "; 
        font-weight: bold;
    }
    
    .severity-view .severity-badge.bg-danger::before {
        content: "High ";
        font-weight: bold;
    }
    
    .severity-view .severity-badge.bg-warning::before {
        content: "Medium ";
        font-weight: bold;
    }
    
    .severity-view .severity-badge.bg-info::before {
        content: "Low ";
        font-weight: bold;
    }

    .priority-notice {
        background-color: rgba(13, 110, 253, 0.05);
        border-left: 3px solid #0d6efd;
        padding: 1rem 1.25rem;
        margin-bottom: 1.5rem;
        border-radius: 0.25rem;
        font-size: 0.85rem;
        color: var(--dark-alt);
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.02);
        display: flex;
        align-items: center;
        flex-wrap: wrap;
        gap: 8px;
        animation: fadeIn 0.5s ease;
    }
    
    .priority-notice i {
        color: #0d6efd;
    }
    
    .priority-notice .badge {
        margin-left: 5px;
    }
</style>

<div class="reports-container">
    <div class="page-header">
            <div>
            <h1 class="page-title">Manage Incident Reports</h1>
            <p class="page-subtitle">Review, update, and respond to incident reports assigned to your department</p>
        </div>
    </div>
    
    <div class="info-notice">
        <i class="fas fa-info-circle me-2"></i> As an LGU/SLU, your role is to respond to and manage incident reports assigned to your department.
    </div>
    
    @if (ViewBag.CurrentFilter != null && ViewBag.CurrentFilter.ToString() == "InProgress")
    {
        <div class="priority-notice">
            <i class="fas fa-sort-amount-down-alt me-2"></i>
            <strong>Priority Order:</strong> Incidents are automatically sorted by severity level regardless of when they were reported:
            <span class="badge bg-dark">1. Critical</span>
            <span class="badge bg-danger">2. High</span>
            <span class="badge bg-warning">3. Medium</span>
            <span class="badge bg-info">4. Low</span>
        </div>
    }
    
    <div class="controls-section">
        <div class="controls-row">
            <div class="filter-group">
                <a href="@Url.Action("ManageReports", "LGU")" class="filter-link @(ViewBag.CurrentFilter == null ? "active" : "")">All</a>
                <a href="@Url.Action("ManageReports", "LGU", new { status = THYNK.Models.ReportStatus.InProgress })" class="filter-link @(ViewBag.CurrentFilter == THYNK.Models.ReportStatus.InProgress && ViewBag.IsPrioritySorted != true ? "active" : "")">In Progress/Priority</a>
                <a href="@Url.Action("ManageReports", "LGU", new { status = THYNK.Models.ReportStatus.Resolved })" class="filter-link @(ViewBag.CurrentFilter == THYNK.Models.ReportStatus.Resolved ? "active" : "")">Resolved</a>
            </div>
            
            <form method="get" class="search-form">
                <input type="text" name="search" class="search-input" placeholder="Search reports..." value="@ViewBag.CurrentSearch">
                <button type="submit" class="search-button">
                            <i class="fas fa-search"></i>
                        </button>
                    </form>
            </div>
        </div>

    <div class="content-area">
        @if (!Model.Any())
        {
            <div class="empty-state">
                <i class="fas fa-clipboard-check empty-icon"></i>
                <p class="empty-text">No reports found matching your criteria</p>
                <p class="empty-subtext">Try adjusting your filters or search terms to see more results</p>
            </div>
        }
        else
        {
            <div class="table-container">
                <table class="reports-table">
                    <thead>
                        <tr>
                            <th>Title</th>
                            <th>Type</th>   
                            <th>Severity</th>
                            <th>Location</th>
                            <th>Date Reported</th>
                            <th>Status</th>
                            <th style="text-align: right">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var report in Model)
                        {
                            <tr>
                                <td>@report.Title</td>
                                <td>
                                    <span class="badge bg-secondary">@report.Type</span>
                                </td>
                                <td>
                                    <span class="badge severity-badge @(report.Severity == THYNK.Models.SeverityLevel.Critical ? "bg-dark" : 
                                                                   report.Severity == THYNK.Models.SeverityLevel.High ? "bg-danger" : 
                                                                   report.Severity == THYNK.Models.SeverityLevel.Medium ? "bg-warning" : "bg-info")">
                                        @report.Severity
                                    </span>
                                </td>
                                <td>@(string.IsNullOrEmpty(report.Location) ? "Not specified" : report.Location)</td>
                                <td class="date-cell">@report.DateReported.ToString("MMM dd, yyyy HH:mm")</td>
                                <td>
                                    <span class="badge @(report.Status == THYNK.Models.ReportStatus.Pending ? "bg-warning" : 
                                                   report.Status == THYNK.Models.ReportStatus.Verified ? "bg-info" : 
                                                   report.Status == THYNK.Models.ReportStatus.InProgress ? "bg-primary" : 
                                                   report.Status == THYNK.Models.ReportStatus.Resolved ? "bg-success" : "bg-secondary")">
                                        @report.Status
                                    </span>
                                </td>
                                <td class="actions-cell">
                                    <a href="@Url.Action("ReportDetails", "LGU", new { id = report.Id })" class="action-button action-view">
                                        <i class="fas fa-eye"></i> View
                                    </a>
                                    <button type="button" class="action-button action-update" data-bs-toggle="modal" data-bs-target="#updateStatusModal@(report.Id)">
                                        <i class="fas fa-edit"></i> Update
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
</div>

@foreach (var report in Model)
{
                            <!-- Status Update Modal -->
                            <div class="modal fade" id="updateStatusModal@(report.Id)" tabindex="-1" aria-labelledby="updateStatusModalLabel@(report.Id)" aria-hidden="true">
                                <div class="modal-dialog">
            <div class="modal-content modal-container">
                                        <div class="modal-header">
                                            <h5 class="modal-title" id="updateStatusModalLabel@(report.Id)">Update Report Status</h5>
                                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                        </div>
                                        <form asp-action="UpdateReportStatus" asp-route-id="@report.Id" method="post">
                                            @Html.AntiForgeryToken()
                                            <div class="modal-body">
                        <div class="form-group">
                                                    <label for="status@(report.Id)" class="form-label">Status</label>
                                                    <select id="status@(report.Id)" name="status" class="form-select" required>
                                                        @{
                                                            var inProgressSelected = report.Status == THYNK.Models.ReportStatus.InProgress ? "selected" : "";
                                                            var resolvedSelected = report.Status == THYNK.Models.ReportStatus.Resolved ? "selected" : "";
                                                        }
                                                        @Html.Raw($"<option value=\"2\" {inProgressSelected}>In Progress</option>")
                                                        @Html.Raw($"<option value=\"3\" {resolvedSelected}>Resolved</option>")
                                                    </select>
                                                </div>
                        <div class="form-group">
                                                    <label for="notes@(report.Id)" class="form-label">Response Notes</label>
                            <textarea id="notes@(report.Id)" name="notes" class="form-textarea" required placeholder="Describe the actions taken or resolution details..."></textarea>
                                                </div>
                                            </div>
                                            <div class="modal-footer">
                        <button type="button" class="btn-cancel" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn-submit">Update Status</button>
                                            </div>
                                        </form>
                                    </div>
                                </div>
                            </div>
                        }

@section Scripts {
    <script>
        // Function to reload the reports table with a fade effect
        async function reloadReportsTable() {
            const container = document.querySelector('.table-container');
            if (!container) {
                console.error('Table container not found');
                return;
            }

            try {
                // Get current filter values from URL parameters
                const urlParams = new URLSearchParams(window.location.search);
                const status = urlParams.get('status') || '';
                const search = urlParams.get('search') || '';
                const priority = urlParams.get('priority') || '';

                // Show loading state
                container.style.opacity = '0.5';
                container.style.pointerEvents = 'none';

                // Fetch updated table content
                // Controller Implementation Note:
                // public async Task<IActionResult> ManageReports(string status, string search, string priority)
                // {
                //     var currentUserId = User.FindFirstValue(ClaimTypes.NameIdentifier);
                //     var reports = await _context.DisasterReports
                //                    .Where(r => r.AssignedDepartmentId == CurrentUserDepartmentId)
                //                    .ToListAsync();
                //
                //     // Apply status filter if specified
                //     if (!string.IsNullOrEmpty(status) && Enum.TryParse<ReportStatus>(status, out var statusEnum))
                //     {
                //         reports = reports.Where(r => r.Status == statusEnum).ToList();
                //         ViewBag.CurrentFilter = statusEnum;
                //     }
                //
                //     // Priority-based severity sorting
                //     if (priority == "severity") 
                //     {
                //         ViewBag.IsPrioritySorted = true;
                //         
                //         // If no status filter is applied but priority=severity, force InProgress status
                //         if (string.IsNullOrEmpty(status))
                //         {
                //             reports = reports.Where(r => r.Status == ReportStatus.InProgress).ToList();
                //             ViewBag.CurrentFilter = ReportStatus.InProgress;
                //         }
                //         
                //         // CRITICAL REQUIREMENT: 
                //         // Always display incidents in strict severity order, regardless of report time:
                //         //   1. Critical incidents ALWAYS first (even if older)
                //         //   2. High incidents ALWAYS second (even if older)
                //         //   3. Medium incidents ALWAYS third (even if older)
                //         //   4. Low incidents ALWAYS last (even if older)
                //         // This ensures newest Medium incidents never appear above older High incidents
                //         
                //         reports = reports
                //                   .OrderBy(r => (int)r.Severity)                  // PRIMARY SORT: by severity level (Critical=0, High=1, Medium=2, Low=3)
                //                   .ThenByDescending(r => r.DateReported)          // SECONDARY SORT: by date within each severity level
                //                   .ToList();
                //         
                //         // No section headers needed - just a single list sorted by severity
                //     }
                //     else 
                //     {
                //         // For regular views (not severity-sorted), sort by most recent first
                //         reports = reports.OrderByDescending(r => r.DateReported).ToList();
                //     }
                //     
                //     return View(reports);
                // }
                const response = await fetch(`@Url.Action("GetReportsTable", "LGU")?status=${status}&search=${encodeURIComponent(search)}&priority=${priority}`);
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const html = await response.text();
                
                // Create a temporary container to parse the HTML
                const tempContainer = document.createElement('div');
                tempContainer.innerHTML = html;

                // Get the table from the response
                const newTable = tempContainer.querySelector('.reports-table');
                if (!newTable) {
                    throw new Error('Table not found in response');
                }

                // Update the table content with fade effect
                container.style.opacity = '0';
                setTimeout(() => {
                    const currentTable = container.querySelector('.reports-table');
                    if (currentTable) {
                        currentTable.replaceWith(newTable);
                    } else {
                        container.appendChild(newTable);
                    }
                    container.style.opacity = '1';

                    // Add highlight effect to new items
                    const newRows = container.querySelectorAll('tr[data-report-id]');
                    newRows.forEach(row => {
                        row.classList.add('highlight-new');
                        setTimeout(() => row.classList.remove('highlight-new'), 2000);
                    });
                    
                    // Apply priority view class if using severity filter
                    if (priority === 'severity') {
                        container.classList.add('severity-view');
                    } else {
                        container.classList.remove('severity-view');
                    }

                    // Reinitialize action buttons
                    initializeActionButtons();
                }, 300);

            } catch (error) {
                console.error('Error reloading reports table:', error);
                showToast('Error updating reports', 'error');
            } finally {
                // Restore container state
                container.style.pointerEvents = 'auto';
            }
        }

        // Function to initialize action buttons
        function initializeActionButtons() {
            // Initialize view buttons
            document.querySelectorAll('.action-view').forEach(button => {
                button.addEventListener('click', (e) => {
                    e.preventDefault();
                    const reportId = e.target.closest('tr').dataset.reportId;
                    window.location.href = `@Url.Action("ReportDetails", "LGU")/${reportId}`;
                });
            });

            // Initialize update status buttons
            document.querySelectorAll('.action-update').forEach(button => {
                button.addEventListener('click', (e) => {
                    const reportId = e.target.closest('tr').dataset.reportId;
                    const modal = document.querySelector(`#updateStatusModal${reportId}`);
                    if (modal) {
                        const bsModal = new bootstrap.Modal(modal);
                        bsModal.show();
                    }
                });
            });

            // Initialize status update forms
            document.querySelectorAll('form[asp-action="UpdateReportStatus"]').forEach(form => {
                form.addEventListener('submit', async (e) => {
                    e.preventDefault();
                    const formData = new FormData(form);
                    const reportId = form.getAttribute('asp-route-id');

                    try {
                        const response = await fetch(form.action, {
                            method: 'POST',
                            body: formData,
                            headers: {
                                'X-Requested-With': 'XMLHttpRequest'
                            }
                        });

                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }

                        // Close the modal
                        const modal = bootstrap.Modal.getInstance(document.querySelector(`#updateStatusModal${reportId}`));
                        modal?.hide();

                        // Reload the table
                        await reloadReportsTable();
                        showToast('Report status updated successfully', 'success');
                    } catch (error) {
                        console.error('Error updating report status:', error);
                        showToast(error.message || 'Error updating report status', 'error');
                    }
                });
            });
        }

        // Set up periodic refresh
        const refreshInterval = setInterval(reloadReportsTable, 30000);

        // Listen for custom events from SignalR
        document.addEventListener('reportAssigned', (event) => {
            console.log('Report assigned event received:', event.detail);
            reloadReportsTable();
        });

        document.addEventListener('reportStatusUpdated', (event) => {
            console.log('Report status updated event received:', event.detail);
            reloadReportsTable();
        });

        document.addEventListener('newIncidentReport', (event) => {
            console.log('New incident report event received:', event.detail);
            reloadReportsTable();
        });

        // Initialize action buttons on page load
        document.addEventListener('DOMContentLoaded', () => {
            initializeActionButtons();
            reloadReportsTable(); // Initial load
            
            // Check if severity filter is active
            const urlParams = new URLSearchParams(window.location.search);
            if (urlParams.get('priority') === 'severity') {
                document.querySelector('.table-container')?.classList.add('severity-view');
            }
        });

        // Clean up on page unload
        window.addEventListener('beforeunload', () => {
            clearInterval(refreshInterval);
        });

        // Handle filter changes
        document.querySelectorAll('.filter-link').forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                const url = new URL(e.target.closest('a').href);
                
                // Preserve search parameter when clicking filter
                const currentUrl = new URL(window.location.href);
                const currentSearch = currentUrl.searchParams.get('search');
                
                if (currentSearch && !url.searchParams.has('search')) {
                    url.searchParams.set('search', currentSearch);
                }
                
                window.location.href = url.toString();
            });
        });

        // Handle search form submission
        document.querySelector('.search-form')?.addEventListener('submit', (e) => {
            e.preventDefault();
            const searchInput = e.target.querySelector('input[name="search"]');
            const currentUrl = new URL(window.location.href);
            currentUrl.searchParams.set('search', searchInput.value);
            
            // Preserve status and priority parameters when searching
            const status = new URLSearchParams(window.location.search).get('status');
            const priority = new URLSearchParams(window.location.search).get('priority');
            
            if (status) {
                currentUrl.searchParams.set('status', status);
            }
            
            if (priority) {
                currentUrl.searchParams.set('priority', priority);
            }
            
            window.location.href = currentUrl.toString();
        });
    </script>

    <style>
        .table-container {
            transition: opacity 0.3s ease;
        }

        .reports-table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 1rem;
        }

        .reports-table th,
        .reports-table td {
            padding: 0.75rem;
            border-bottom: 1px solid #dee2e6;
        }

        .reports-table th {
            background-color: #f8f9fa;
            font-weight: 600;
            text-align: left;
        }

        .reports-table tbody tr:hover {
            background-color: #f8f9fa;
        }

        .action-button {
            display: inline-flex;
            align-items: center;
            padding: 0.375rem 0.75rem;
            margin: 0 0.25rem;
            border: none;
            border-radius: 0.25rem;
            cursor: pointer;
            text-decoration: none;
            font-size: 0.875rem;
            transition: all 0.2s ease;
        }

        .action-view {
            background-color: #0d6efd;
            color: white;
        }

        .action-update {
            background-color: #198754;
            color: white;
        }

        .action-button:hover {
            opacity: 0.9;
            transform: translateY(-1px);
        }

        .action-button i {
            margin-right: 0.5rem;
        }

        .modal-container {
            border-radius: 0.5rem;
            box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15);
        }

        .form-group {
            margin-bottom: 1rem;
        }

        .form-textarea {
            width: 100%;
            min-height: 100px;
            padding: 0.5rem;
            border: 1px solid #ced4da;
            border-radius: 0.25rem;
            resize: vertical;
        }

        .btn-cancel {
            background-color: #6c757d;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 0.25rem;
            cursor: pointer;
        }

        .btn-submit {
            background-color: #0d6efd;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 0.25rem;
            cursor: pointer;
        }

        .btn-cancel:hover,
        .btn-submit:hover {
            opacity: 0.9;
        }

        @@keyframes highlight {
            0% { background-color: #fff3cd; }
            100% { background-color: transparent; }
        }

        .highlight-new {
            animation: highlight 2s ease-out;
        }

        .severity-badge {
            font-weight: 500;
            padding: 0.35em 0.65em;
        }

        .date-cell {
            white-space: nowrap;
        }

        .actions-cell {
            white-space: nowrap;
            text-align: right;
        }
    </style>
}