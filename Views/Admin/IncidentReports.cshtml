@model IEnumerable<THYNK.Models.DisasterReport>
@{
    ViewData["Title"] = "Incident Reports";
    Layout = "_AdminLayout";
}

<div class="card admin-card mb-4">
    <div class="card-header bg-primary text-white">
        <div class="d-flex align-items-center">
            <div class="card-icon bg-white text-primary">
                <i class="fas fa-exclamation-triangle"></i>
            </div>
            <div>
                <h5 class="m-0">Incident Reports</h5>
                <small>Review, verify, and assign reports to appropriate LGU/SLU users</small>
            </div>
        </div>
    </div>
    <div class="card-body">
        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                <i class="fas fa-check-circle me-2"></i>@TempData["SuccessMessage"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }
        @if (TempData["ErrorMessage"] != null)
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                <i class="fas fa-exclamation-circle me-2"></i>@TempData["ErrorMessage"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }

        <div class="row mb-3">
            <div class="col-md-6">
                <form method="get" class="d-flex">
                    <input type="text" name="search" class="form-control me-2" placeholder="Search reports..." value="@Context.Request.Query["search"]" />
                    <button type="submit" class="btn btn-primary">Search</button>
                </form>
            </div>
            <div class="col-md-6 text-end">
                <div class="btn-group">
                    <a href="@Url.Action("IncidentReports", "Admin")" class="btn @(ViewBag.CurrentFilter == null ? "btn-primary" : "btn-outline-primary")">All</a>
                    <a href="@Url.Action("IncidentReports", "Admin", new { status = THYNK.Models.ReportStatus.Pending })" class="btn @(ViewBag.CurrentFilter == THYNK.Models.ReportStatus.Pending ? "btn-primary" : "btn-outline-primary")">Pending</a>
                    <a href="@Url.Action("IncidentReports", "Admin", new { status = THYNK.Models.ReportStatus.Verified })" class="btn @(ViewBag.CurrentFilter == THYNK.Models.ReportStatus.Verified ? "btn-primary" : "btn-outline-primary")">Verified</a>
                    <a href="@Url.Action("IncidentReports", "Admin", new { status = THYNK.Models.ReportStatus.InProgress })" class="btn @(ViewBag.CurrentFilter == THYNK.Models.ReportStatus.InProgress ? "btn-primary" : "btn-outline-primary")">In Progress</a>
                    <a href="@Url.Action("IncidentReports", "Admin", new { status = THYNK.Models.ReportStatus.Resolved })" class="btn @(ViewBag.CurrentFilter == THYNK.Models.ReportStatus.Resolved ? "btn-primary" : "btn-outline-primary")">Resolved</a>
                </div>
            </div>
        </div>

        @if (!Model.Any())
        {
            <div class="alert alert-info">
                <i class="fas fa-info-circle me-2"></i> No reports found matching your criteria.
            </div>
        }
        else
        {
            <div id="reportsList">
                @await Html.PartialAsync("_IncidentReportsTable", Model)
            </div>
        }
    </div>
</div>

@section Styles {
    <style>
        /* Custom Modal Styles */
        .custom-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 9999;
        }

        .custom-modal[style*="display: block"] {
            display: block !important;
        }

        .custom-modal-dialog {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 90%;
            max-width: 500px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        .custom-modal-content {
            position: relative;
            display: flex;
            flex-direction: column;
            width: 100%;
            background-color: #fff;
            border-radius: 8px;
        }

        .custom-modal-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 1rem 1.5rem;
            background: #f8f9fa;
            border-bottom: 1px solid #e9ecef;
            border-radius: 8px 8px 0 0;
        }

        .custom-modal-title {
            margin: 0;
            font-size: 1.25rem;
            font-weight: 500;
        }

        .custom-modal-close {
            background: none;
            border: none;
            font-size: 1.5rem;
            font-weight: 700;
            line-height: 1;
            color: #000;
            opacity: .5;
            cursor: pointer;
            padding: 0;
        }

        .custom-modal-body {
            position: relative;
            flex: 1 1 auto;
            padding: 1.5rem;
            background: white;
        }

        .custom-modal-footer {
            display: flex;
            align-items: center;
            justify-content: flex-end;
            padding: 1rem 1.5rem;
            background: #f8f9fa;
            border-top: 1px solid #e9ecef;
            gap: 0.5rem;
            border-radius: 0 0 8px 8px;
        }

        /* Form Elements */
        .form-control {
            border: 1px solid #ced4da;
            border-radius: 4px;
            padding: 0.5rem 0.75rem;
        }

        .form-control:focus {
            border-color: #80bdff;
            box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
        }

        /* Buttons */
        .btn {
            padding: 0.5rem 1rem;
            border-radius: 4px;
            font-weight: 500;
        }

        /* Alert Styles */
        .alert {
            border-radius: 4px;
            padding: 1rem;
            margin-bottom: 1rem;
        }

        .alert-light {
            background-color: #f8f9fa;
            border: 1px solid #e9ecef;
        }

        /* Report Details */
        .report-details {
            background: #f8f9fa;
            border-radius: 4px;
            padding: 1rem;
            margin-bottom: 1rem;
        }

        .report-details p {
            margin-bottom: 0.5rem;
            color: #495057;
        }

        .report-details strong {
            color: #212529;
        }

        /* Modal Icons */
        .modal-icon {
            width: 32px;
            height: 32px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            margin-right: 0.75rem;
        }

        .modal-icon.danger {
            background-color: rgba(220, 53, 69, 0.1);
            color: #dc3545;
        }

        .modal-icon.primary {
            background-color: rgba(13, 110, 253, 0.1);
            color: #0d6efd;
        }
    </style>
}

@section Scripts {
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        function openModal(modalId) {
            // Hide all other modals
            document.querySelectorAll('.custom-modal').forEach(m => {
                m.style.display = 'none';
            });
            const modal = document.getElementById(modalId);
            if (modal) {
                modal.style.display = 'block';
                document.body.style.overflow = 'hidden';
            }
        }

        function closeModal(modalId) {
            const modal = document.getElementById(modalId);
            if (modal) {
                modal.style.display = 'none';
                document.body.style.overflow = '';
            }
        }

        // Close modal when clicking outside
        window.addEventListener('click', function(e) {
            if (e.target.classList.contains('custom-modal')) {
                closeModal(e.target.id);
            }
        });

        // Debug check for modals on page load
        document.addEventListener('DOMContentLoaded', function() {
            const modals = document.querySelectorAll('.custom-modal');
            console.log('Found modals:', modals.length); // Debug log
            modals.forEach(modal => {
                console.log('Modal ID:', modal.id); // Debug log
            });
        });

        // Connect to SignalR
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/adminHub")
            .withAutomaticReconnect()
            .build();

        connection.start()
            .then(() => console.log("SignalR Connected"))
            .catch(err => console.error("SignalR Connection Error: ", err));

        // Function to reload the reports list
        function reloadReportsList() {
            $.get(window.location.pathname + window.location.search, function (data) {
                // Parse the returned HTML and extract the #reportsList content
                const html = $(data);
                const newList = html.find("#reportsList").html();
                $("#reportsList").html(newList);
            });
        }

        // Listen for real-time updates
        connection.on("RecentReportUpdated", function(report) {
            reloadReportsList();
        });
    </script>
}