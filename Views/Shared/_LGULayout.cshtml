@using Microsoft.AspNetCore.Identity
@using THYNK.Models
@using System.Security.Claims
@using Microsoft.AspNetCore.SignalR
@using THYNK.Hubs
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IHubContext<CommunityHub> CommunityHubContext
@inject IHubContext<AdminHub> HubContext

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - THYNK LGU Portal</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/community.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/lgu-styles.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/THYNK.styles.css" asp-append-version="true" />
    <!-- FontAwesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" />
    <!-- Mapbox CSS -->
    <link href='https://api.mapbox.com/mapbox-gl-js/v2.9.1/mapbox-gl.css' rel='stylesheet' />
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        primary: '#545454',
                        primaryDark: '#3c3c3c',
                        primaryLight: '#6e6e6e',
                        secondary: '#E5DFD2',
                        secondaryDark: '#d6cfbf',
                        secondaryLight: '#f4f0e5',
                        accent: '#F5F5F5',
                        sidebarBg: '#2C3E50',
                        sidebarLight: '#34495E',
                        sidebarAccent: '#3498DB',
                        sidebarText: '#ECF0F1',
                        sidebarHover: '#1ABC9C',
                        sidebarHoverLight: '#2CD3AF',
                        danger: '#b56357',
                        success: '#6a8d73',
                        warning: '#e0a458'
                    }
                }
            }
        }
    </script>
    <style type="text/tailwindcss">
        :root {
            --primary: #545454;
            --primary-dark: #3c3c3c;
            --primary-light: #6e6e6e;
            --primary-rgb: 84, 84, 84;
            
            --secondary: #E5DFD2;
            --secondary-dark: #d6cfbf;
            --secondary-light: #f4f0e5;
            --secondary-rgb: 229, 223, 210;
            
            --accent: #F5F5F5;
            --accent-rgb: 245, 245, 245;
            
            --sidebar-bg: #2C3E50;
            --sidebar-light: #34495E;
            --sidebar-accent: #3498DB;
            --sidebar-text: #ECF0F1;
            --sidebar-hover: #1ABC9C;
            --sidebar-hover-light: #2CD3AF;
            
            --success: #6a8d73;
            --warning: #e0a458;
            --danger: #b56357;
            --danger-rgb: 181, 99, 87;
            
            --dark: #545454;
            --dark-alt: #696969;
            --dark-light: #7e7e7e;
            --light: #F5F5F5;
            --muted: #a0a0a0;
            
            --body-bg: #E5DFD2;
            --body-color: #545454;
        }
        
        body {
            @@apply bg-secondary text-primary font-sans;
        }
        
        .sidebar {
            @@apply fixed top-0 left-0 h-screen shadow-lg transition-all duration-300 ease-in-out overflow-hidden flex flex-col;
            background: linear-gradient(180deg, var(--sidebar-bg) 0%, var(--sidebar-light) 100%);
            z-index: 50;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
        }
        
        .sidebar-content {
            @@apply flex flex-col h-full;
            position: relative;
        }
        
        .sidebar-nav {
            @@apply overflow-y-auto px-4 py-1;
            position: absolute;
            top: 140px;
            bottom: 120px;
            left: 0;
            right: 0;
            scrollbar-width: thin;
            scrollbar-color: rgba(110, 110, 110, 0.3) transparent;
            scroll-behavior: smooth;
        }
        
        .sidebar-nav::-webkit-scrollbar {
            width: 4px;
        }
        
        .sidebar-nav::-webkit-scrollbar-track {
            @@apply bg-transparent;
        }
        
        .sidebar-nav::-webkit-scrollbar-thumb {
            @@apply rounded-full;
            background-color: rgba(236, 240, 241, 0.3);
        }
        
        /* Only show scrollbar when hovering over the navigation area */
        .sidebar-nav:hover::-webkit-scrollbar-thumb {
            background-color: rgba(236, 240, 241, 0.5);
        }
        
        .sidebar-collapsed {
            width: 0;
        }
        
        .sidebar-expanded {
            @@apply w-64;
        }
        
        .nav-item {
            @@apply flex items-center py-2 px-4 transition-colors duration-200 w-full;
            transition: all 0.3s ease;
            border-radius: 8px;
            margin-bottom: 2px;
            color: var(--sidebar-text);
        }
        
        .nav-item:hover {
            background-color: var(--sidebar-hover-light);
            transform: translateX(3px);
            color: white !important;
        }
        
        .nav-item.active {
            background-color: var(--sidebar-hover);
            position: relative;
        }
        
        .nav-item.active::before {
            content: '';
            position: absolute;
            left: 0;
            top: 0;
            bottom: 0;
            width: 3px;
            background: white;
            border-radius: 0 2px 2px 0;
        }
        
        .nav-icon {
            @@apply text-lg mr-3 flex items-center justify-center w-8;
            color: var(--sidebar-text);
            transition: all 0.3s ease;
        }
        
        .nav-item:hover .nav-icon {
            transform: scale(1.1);
            color: white;
        }
        
        .nav-text {
            @@apply text-sm font-medium;
        }
        
        .hamburger {
            @@apply fixed top-4 left-4 flex flex-col justify-center items-center w-10 h-10 text-white rounded-md shadow-md transition-all duration-200 focus:outline-none;
            background-color: var(--sidebar-bg);
            z-index: 60;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        }
        
        .hamburger:hover {
            background-color: var(--sidebar-light);
            transform: scale(1.05);
        }
        
        .hamburger-line {
            @@apply w-6 h-0.5 bg-white my-0.5 transition-all duration-300;
        }
        
        .hamburger.active .hamburger-line:nth-child(1) {
            @@apply transform rotate-45 translate-y-1.5;
        }
        
        .hamburger.active .hamburger-line:nth-child(2) {
            @@apply opacity-0;
        }
        
        .hamburger.active .hamburger-line:nth-child(3) {
            @@apply transform -rotate-45 -translate-y-1.5;
        }
        
        .overlay {
            @@apply fixed inset-0 bg-black bg-opacity-50 transition-opacity duration-300;
            pointer-events: none;
            opacity: 0;
            z-index: 40;
        }
        
        .overlay.active {
            opacity: 1;
            pointer-events: auto;
        }
        
        .main-content {
            @@apply transition-all duration-300 ease-in-out;
            z-index: 10;
            background-color:#FAF7F0;
        }
        
        /* Header Bar */
        header {
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.03);
            transition: all 0.3s ease;
            background: linear-gradient(to right, #ffffff 0%, #fafafa 100%);
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
        }
        
        .header-title-container {
            position: relative;
        }
        
        /* User dropdown styles */
        .user-dropdown-container {
            position: relative;
        }
        
        .user-dropdown-trigger {
            cursor: pointer;
            position: relative;
            padding: 2px 4px;
            transition: all 0.2s ease;
            border-radius: 4px;
        }
        
        .user-dropdown-trigger:hover {
            background-color: var(--secondary-light);
        }
        
        .user-dropdown-trigger::after {
            content: "\f107";
            font-family: "Font Awesome 6 Free";
            font-weight: 900;
            margin-left: 5px;
            font-size: 0.85em;
            opacity: 0.7;
            transition: transform 0.2s ease;
        }
        
        .user-dropdown-container:hover .user-dropdown-trigger::after {
            transform: rotate(180deg);
        }
        
        .user-dropdown-menu {
            position: absolute;
            top: 100%;
            right: 0;
            width: 180px;
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            opacity: 0;
            visibility: hidden;
            transform: translateY(10px);
            transition: all 0.3s ease;
            z-index: 100;
            overflow: hidden;
            margin-top: 5px;
            border: 1px solid rgba(0,0,0,0.05);
        }
        
        .user-dropdown-container:hover .user-dropdown-menu {
            opacity: 1;
            visibility: visible;
            transform: translateY(0);
        }
        
        .user-dropdown-content {
            padding: 5px 0;
        }
        
        .user-dropdown-item {
            display: flex;
            align-items: center;
            padding: 8px 12px;
            color: var(--primary);
            font-size: 0.875rem;
            transition: all 0.2s ease;
            text-decoration: none;
        }
        
        .user-dropdown-item:hover {
            background-color: var(--secondary-light);
            color: var(--primary-dark);
        }
        
        .user-dropdown-item i {
            width: 20px;
            text-align: center;
            margin-right: 8px;
            font-size: 0.9em;
        }

        /* Animations and UI Effects */
        @@keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
    </style>
    @await RenderSectionAsync("Styles", required: false)
</head>
<body class="bg-secondary">
    <!-- Hamburger Menu Button -->
    <button id="hamburger" class="hamburger md:hidden">
        <span class="hamburger-line"></span>
        <span class="hamburger-line"></span>
        <span class="hamburger-line"></span>
    </button>

    <!-- Header Bar -->
    <header class="fixed top-0 left-0 right-0 shadow-md z-20">
        <div class="container mx-auto relative z-10">
            <div class="flex items-center justify-between px-4 py-3">
                <div class="md:ml-64 ml-12 flex items-center transition-all duration-300">
                    <div class="relative flex items-center header-title-container">
                        <h2 class="text-primary text-xl font-semibold relative z-10">@ViewData["Title"]</h2>
                        <div class="ml-2 h-6 w-1 bg-primary rounded-full opacity-30"></div>
                        <span class="ml-2 text-sm text-sidebar-bg font-medium">THYNK LGU/SLU</span>
                    </div>
                </div>
                
                <div class="flex items-center space-x-3">
                    @if (User.Identity.IsAuthenticated)
                    {
                        <div class="hidden md:flex items-center border-l border-gray-200 pl-3 user-dropdown-container">
                            <div class="w-8 h-8 rounded-full flex items-center justify-center mr-2 shadow-sm" style="background-color: #1ABC9C; color: white;">
                                @(User.Identity.Name != null && User.Identity.Name.Length > 0 ? User.Identity.Name.Substring(0, 1).ToUpper() : "U")
                            </div>
                            <span class="text-sidebar-bg text-sm font-medium cursor-pointer user-dropdown-trigger">@User.Identity.Name</span>
                            
                            <!-- Dropdown Menu -->
                            <div class="user-dropdown-menu">
                                <div class="user-dropdown-content">
                                    <a href="@Url.Action("Profile", "LGU")" class="user-dropdown-item">
                                        <i class="fas fa-user-cog me-2"></i>Profile
                                    </a>
                                    <div class="user-dropdown-item sound-toggle-item">
                                        <i class="fas fa-volume-up me-2"></i>
                                        <span>Sound Notifications</span>
                                        <label class="switch ml-auto">
                                            <input type="checkbox" id="soundToggleCheckbox" checked>
                                            <span class="slider round"></span>
                                        </label>
                                    </div>
                                    <button type="button" data-logout-trigger class="user-dropdown-item w-full text-left">
                                        <i class="fas fa-sign-out-alt me-2"></i>Logout
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </header>
    
    <!-- Overlay for mobile -->
    <div id="overlay" class="overlay"></div>
    
        <!-- Sidebar -->
    <nav id="sidebar" class="sidebar sidebar-collapsed">
        <div class="sidebar-content">
            <!-- Fixed Header -->
            <div class="pt-8 px-2">
                <div class="text-center mb-3">
                    <h3 class="font-bold text-xl text-sidebar-text text-white">THYNK</h3>
                    <p class="text-xs opacity-80 text-sidebar-text text-white">LGU/SLU Dashboard</p>
                </div>
                <hr class="border-sidebar-light my-2 text-white" />
            </div>
            
            <!-- Scrollable Navigation Area -->
            <div class="sidebar-nav" style="margin-top:-2.2rem !important;">
                <div class="space-y-1">
                    <a href="@Url.Action("Dashboard", "LGU")" class="nav-item @(ViewContext.RouteData.Values["Action"].ToString() == "Dashboard" ? "active" : "")">
                        <span class="nav-icon"><i class="fas fa-tachometer-alt"></i></span>
                        <span class="nav-text">Dashboard</span>
                    </a>

                <a href="@Url.Action("Analytics", "LGU")" class="nav-item @(ViewContext.RouteData.Values["Action"].ToString() == "Analytics" ? "active" : "")">
                        <span class="nav-icon"><i class="fas fa-chart-line"></i></span>
                        <span class="nav-text">Analytics</span>
                    </a>
                    
                    <a href="@Url.Action("ManageReports", "LGU")" class="nav-item @(ViewContext.RouteData.Values["Action"].ToString() == "ManageReports" || ViewContext.RouteData.Values["Action"].ToString() == "ReportDetails" ? "active" : "")">
                        <span class="nav-icon"><i class="fas fa-clipboard-list"></i></span>
                        <span class="nav-text">Manage Reports</span>
                    </a>
                    
                    @* <a href="@Url.Action("CreateAlert", "LGU")" class="nav-item @(ViewContext.RouteData.Values["Action"].ToString() == "CreateAlert" ? "active" : "")">
                        <span class="nav-icon"><i class="fas fa-bell"></i></span>
                        <span class="nav-text">Create Alert</span>
                    </a> *@
                    
                    <a href="@Url.Action("ManageAlerts", "LGU")" class="nav-item @(ViewContext.RouteData.Values["Action"].ToString() == "ManageAlerts" ? "active" : "")">
                        <span class="nav-icon"><i class="fas fa-bell-slash"></i></span>
                        <span class="nav-text">Manage Alerts</span>
                    </a>
                    
                    <a href="@Url.Action("IncidentMap", "LGU")" class="nav-item @(ViewContext.RouteData.Values["Action"].ToString() == "IncidentMap" ? "active" : "")">
                        <span class="nav-icon"><i class="fas fa-map-marked-alt"></i></span>
                        <span class="nav-text">Incident Map</span>
                    </a>
                    
                    <a href="@Url.Action("EvacuationSites", "LGU")" class="nav-item @(ViewContext.RouteData.Values["Action"].ToString() == "EvacuationSites" ? "active" : "")">
                        <span class="nav-icon"><i class="fas fa-map-pin"></i></span>
                        <span class="nav-text">Evacuation Sites</span>
                    </a>
                    
                    
                    <a href="@Url.Action("ManageResources", "LGU")" class="nav-item @(ViewContext.RouteData.Values["Action"].ToString() == "ManageResources" ? "active" : "")">
                        <span class="nav-icon"><i class="fas fa-book"></i></span>
                        <span class="nav-text">Manage Resources</span>
                    </a>
                    
                    <a href="@Url.Action("CommunityFeed", "LGU")" class="nav-item @(ViewContext.RouteData.Values["Action"].ToString() == "CommunityFeed" ? "active" : "")">
                        <span class="nav-icon"><i class="fas fa-users"></i></span>
                        <span class="nav-text">Community Feed</span>
                    </a>
                    
                    <a href="@Url.Action("ChatSupport", "LGU")" class="nav-item @(ViewContext.RouteData.Values["Action"].ToString() == "ChatSupport" ? "active" : "")">
                        <span class="nav-icon"><i class="fas fa-question-circle"></i></span>
                        <span class="nav-text">Support & FAQs</span>
                    </a>
                </div>
            </div>
            
            <!-- User Profile at Bottom of Sidebar -->
            <div class="mt-auto px-4 py-3 border-t border-sidebar-light">
                @if (User.Identity.IsAuthenticated)
                {
                    <div class="flex items-center mb-2">
                        <div class="w-8 h-8 rounded-full flex items-center justify-center mr-2" style="background-color: #1ABC9C; color: white;">
                            @(User.Identity.Name != null && User.Identity.Name.Length > 0 ? User.Identity.Name.Substring(0, 1).ToUpper() : "U")
                        </div>
                        <div class="overflow-hidden">
                            <p class="text-sm font-medium truncate text-white">@User.Identity.Name</p>
                            <p class="text-xs opacity-70 text-white">LGU/SLU Account</p>
                        </div>
                    </div>
                    <div class="flex flex-col space-y-1 mt-3">
                        <a href="@Url.Action("Profile", "LGU")" class="nav-item py-1">
                            <span class="nav-icon"><i class="fas fa-user-cog"></i></span>
                            <span class="nav-text text-xs">Manage Account</span>
                        </a>
                        <button type="button" data-logout-trigger class="nav-item py-1 w-full text-left">
                            <span class="nav-icon"><i class="fas fa-sign-out-alt"></i></span>
                            <span class="nav-text text-xs">Logout</span>
                        </button>
                    </div>
                 }
            </div>
        </div>
    </nav>
    
    <!-- Main Content -->
    <main id="main-content" class="main-content pt-20 md:px-4 px-0 pb-6 transition-all duration-300 md:ml-64">
        <div class="max-w-7xl mx-auto">
            <!-- Content -->
            <div class="bg-white rounded-lg shadow-md p-3 md:p-3 p-0" style="height: 100vh !important;">
                @RenderBody()
            </div>
        </div>
    </main>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <!-- Add SignalR client library -->
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
    <script>
        // Sidebar toggle
        const hamburger = document.getElementById('hamburger');
        const sidebar = document.getElementById('sidebar');
        const overlay = document.getElementById('overlay');
        const mainContent = document.getElementById('main-content');
        const sidebarNav = document.querySelector('.sidebar-nav');
        
        // Add entrance animations to content elements
        function addEntranceAnimations() {
            const contentElements = document.querySelectorAll('.bg-white > *');
            contentElements.forEach((el, index) => {
                el.style.animation = `fadeIn 0.5s ease forwards ${index * 0.1}s`;
                el.style.opacity = '0';
            });
        }
        
        // Responsive sidebar height adjustments
        function adjustSidebarHeight() {
            const windowHeight = window.innerHeight;
            
            if (windowHeight <= 480) {
                sidebarNav.classList.add('sidebar-nav-small');
                sidebarNav.classList.remove('sidebar-nav-medium');
            } else if (windowHeight <= 580) {
                sidebarNav.classList.add('sidebar-nav-medium');
                sidebarNav.classList.remove('sidebar-nav-small');
            } else {
                sidebarNav.classList.remove('sidebar-nav-medium');
                sidebarNav.classList.remove('sidebar-nav-small');
            }
        }
        
        // Handle responsive sidebar behavior
        function handleSidebarResponsiveness() {
            if (window.innerWidth >= 768) {
                // Desktop: Always show sidebar and adjust main content
                sidebar.classList.replace('sidebar-collapsed', 'sidebar-expanded');
                mainContent.classList.add('md:ml-64');
                overlay.classList.remove('active');
            } else {
                // Mobile: Check saved state
                const sidebarState = localStorage.getItem('sidebarStateLGU') || 'collapsed';
                
                if (sidebarState === 'expanded') {
                    sidebar.classList.replace('sidebar-collapsed', 'sidebar-expanded');
                    hamburger.classList.add('active');
                    overlay.classList.add('active');
                } else {
                    sidebar.classList.replace('sidebar-expanded', 'sidebar-collapsed');
                    hamburger.classList.remove('active');
                    overlay.classList.remove('active');
                }
                
                // Always remove margin adjustment on mobile
                mainContent.classList.remove('md:ml-64');
            }
        }
        
        // Call once on load
        adjustSidebarHeight();
        addEntranceAnimations();
        handleSidebarResponsiveness();
        
        // Update on resize
        window.addEventListener('resize', () => {
            adjustSidebarHeight();
            handleSidebarResponsiveness();
        });
        
        hamburger.addEventListener('click', () => {
            hamburger.classList.toggle('active');
            
            if (sidebar.classList.contains('sidebar-collapsed')) {
                sidebar.classList.replace('sidebar-collapsed', 'sidebar-expanded');
                overlay.classList.add('active');
                
                // Only adjust margin on larger screens
                if (window.innerWidth >= 768) {
                    mainContent.classList.add('md:ml-64');
                }
                
                localStorage.setItem('sidebarStateLGU', 'expanded');
            } else {
                sidebar.classList.replace('sidebar-expanded', 'sidebar-collapsed');
                overlay.classList.remove('active');
                
                // Only adjust margin on mobile
                if (window.innerWidth < 768) {
                    mainContent.classList.remove('md:ml-64');
                }
                
                localStorage.setItem('sidebarStateLGU', 'collapsed');
            }
        });
        
        // Close sidebar when clicking overlay
        overlay.addEventListener('click', () => {
            sidebar.classList.replace('sidebar-expanded', 'sidebar-collapsed');
            hamburger.classList.remove('active');
            overlay.classList.remove('active');
            
            if (window.innerWidth < 768) {
                mainContent.classList.remove('md:ml-64');
            }
            
            localStorage.setItem('sidebarStateLGU', 'collapsed');
        });
    </script>
    @await RenderSectionAsync("Scripts", required: false)
    
    <!-- Logout Confirmation Modal -->
    <div class="modal fade" id="logoutConfirmModal" tabindex="-1" aria-labelledby="logoutConfirmModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content rounded-lg shadow-lg border-0">
                <div class="modal-header border-bottom border-gray-100">
                    <h5 class="modal-title font-medium" style="color: var(--sidebar-bg);" id="logoutConfirmModalLabel">
                        Confirm Logout
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body py-4">
                    <p class="text-dark-alt mb-0">Are you sure you want to log out of your account?</p>
                </div>
                <div class="modal-footer border-top border-gray-100">
                    <button type="button" class="btn rounded-pill px-4 text-white" style="background-color: var(--success);" data-bs-dismiss="modal">
                        Cancel
                    </button>
                    <button type="button" id="confirmLogoutBtn" class="btn rounded-pill px-4 text-white" style="background-color: var(--danger);">
                        Logout
                    </button>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Logout Form (Hidden) -->
    <form id="logoutForm" class="d-none" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
    </form>
    
    <!-- Notification Sound Element -->
    <audio id="notificationSound" preload="auto">
        <source src="~/sounds/alarm.mp3" type="audio/mpeg">
    </audio>
    
    <script>
        let connection = null;
        let isInitialized = false;
        let isConnecting = false;
        let retryCount = 0;
        const maxRetries = 5;
        let soundEnabled = localStorage.getItem('soundEnabled') !== 'false'; // Default to true
        let hasUserInteracted = false;
        let hasCheckedInProgress = false;

        // Function to play notification sound with retry
        async function playNotificationSound(retryCount = 0) {
            if (!soundEnabled) {
                console.log('Sound notifications are disabled');
                return;
            }

            const sound = document.getElementById('notificationSound');
            if (!sound) {
                console.error('Sound element not found');
                return;
            }

            try {
                // Reset the sound to the beginning
                sound.currentTime = 0;
                
                // Try to play the sound
                const playPromise = sound.play();
                if (playPromise !== undefined) {
                    await playPromise;
                    console.log('Sound played successfully');
                }
            } catch (err) {
                console.error('Error playing sound:', err);
                
                // If we haven't retried too many times and it's a user interaction error
                if (retryCount < 3 && err.name === 'NotAllowedError') {
                    console.log('Retrying sound playback...');
                    // Wait a bit and try again
                    setTimeout(() => playNotificationSound(retryCount + 1), 1000);
                } else {
                    // If there's an error, try to reload the sound
                    sound.load();
                }
            }
        }

        // Function to handle notifications with sound
        async function handleNotification(message, type = 'info', playSound = true) {
            console.log('Handling notification:', { message, type, playSound });
            showToast(message, type);
            
            if (playSound) {
                // For important notifications, try to play sound even if user hasn't interacted
                if (type === 'warning' || type === 'error' || type === 'info') {
                    await playNotificationSound();
                }
            }
        }

        // Function to show toast notification
        function showToast(message, type = 'info') {
            const toastContainer = document.getElementById('toastContainer');
            if (!toastContainer) return;

            const toast = document.createElement('div');
            toast.className = `toast align-items-center text-white bg-${type} border-0`;
            toast.setAttribute('role', 'alert');
            toast.setAttribute('aria-live', 'assertive');
            toast.setAttribute('aria-atomic', 'true');

            toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">
                        ${message}
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>
            `;

            toastContainer.appendChild(toast);
            const bsToast = new bootstrap.Toast(toast);
            bsToast.show();

            // Remove toast after it's hidden
            toast.addEventListener('hidden.bs.toast', () => {
                toast.remove();
            });
        }

        // Function to toggle sound notifications
        function toggleSoundNotifications(enabled) {
            soundEnabled = enabled;
            localStorage.setItem('soundEnabled', enabled);
            
            // If enabling sound, try to play a test sound
            if (enabled && hasUserInteracted) {
                playNotificationSound();
            }
        }

        // Function to check in-progress reports
        async function checkInProgressReports() {
            if (hasCheckedInProgress) return; // Only check once per page load
            
            try {
                console.log('Checking for in-progress reports...');
                const response = await fetch('@Url.Action("GetInProgressReportsCount", "LGU")');
                if (!response.ok) throw new Error('Failed to fetch report count');
                
                const data = await response.json();
                console.log('In-progress reports count:', data.count);
                
                if (data.count > 0) {
                    const message = `You have ${data.count} in-progress report${data.count > 1 ? 's' : ''} that need${data.count > 1 ? '' : 's'} attention`;
                    showToast(message, 'warning');
                    
                    // Try to play sound even if user hasn't interacted yet
                    // This is important for in-progress reports on page load
                    try {
                        const sound = document.getElementById('notificationSound');
                        if (sound) {
                            sound.currentTime = 0;
                            await sound.play();
                            console.log('In-progress reports sound played');
                        }
                    } catch (err) {
                        console.log('Could not play in-progress reports sound:', err.message);
                    }
                }
            } catch (error) {
                console.error('Error checking in-progress reports:', error);
            } finally {
                hasCheckedInProgress = true;
            }
        }

        // Initialize sound toggle checkbox and user interaction detection
        document.addEventListener('DOMContentLoaded', () => {
            console.log('Initializing sound notifications...');
            
            const soundToggle = document.getElementById('soundToggleCheckbox');
            if (soundToggle) {
                soundToggle.checked = soundEnabled;
                soundToggle.addEventListener('change', (e) => {
                    console.log('Sound notifications:', e.target.checked ? 'enabled' : 'disabled');
                    toggleSoundNotifications(e.target.checked);
                });
            }

            // Mark user interaction for sound playback
            const enableSound = () => {
                if (!hasUserInteracted) {
                    hasUserInteracted = true;
                    console.log('User interaction detected, sound notifications enabled');
                    // Check in-progress reports again after user interaction
                    checkInProgressReports();
                }
            };

            document.addEventListener('click', enableSound, { once: true });
            document.addEventListener('keydown', enableSound, { once: true });

            // Preload the sound
            const sound = document.getElementById('notificationSound');
            if (sound) {
                sound.load();
                console.log('Sound file preloaded');
            }
        });

        // Update SignalR initialization with improved event handlers
        async function initializeSignalR() {
            if (isInitialized || isConnecting) return;
            isConnecting = true;

            try {
                if (!connection) {
                    connection = new signalR.HubConnectionBuilder()
                        .withUrl("/communityHub")
                        .withAutomaticReconnect([0, 2000, 5000, 10000, 20000])
                        .configureLogging(signalR.LogLevel.Information)
                        .build();

                    // Handle connection state changes
                    connection.onreconnecting(error => {
                        console.log('SignalR Reconnecting:', error);
                        handleNotification('Connection lost. Attempting to reconnect...', 'warning', false);
                    });

                    connection.onreconnected(connectionId => {
                        console.log('SignalR Reconnected:', connectionId);
                        handleNotification('Connection restored', 'success', false);
                        // Rejoin user group after reconnection
                        const userId = '@User.FindFirstValue(ClaimTypes.NameIdentifier)';
                        if (userId) {
                            connection.invoke("JoinUserGroup", userId)
                                .catch(err => console.error('Error rejoining group:', err));
                        }
                    });

                    connection.onclose(error => {
                        console.log('SignalR Connection Closed:', error);
                        if (retryCount < maxRetries) {
                            retryCount++;
                            setTimeout(initializeSignalR, 5000);
                        } else {
                            handleNotification('Connection lost. Please refresh the page.', 'error', false);
                        }
                    });

                    // Define client methods that the server can call
                    connection.on("JoinedGroup", (groupId) => {
                        console.log('Joined group:', groupId);
                    });

                    connection.on("NewReportAssigned", async (reportId, reportTitle) => {
                        console.log('New report assigned:', reportId, reportTitle);
                        // Dispatch custom event
                        document.dispatchEvent(new CustomEvent('reportAssigned', {
                            detail: { reportId, reportTitle }
                        }));
                        // Show notification and play sound
                        await handleNotification(`New report assigned: ${reportTitle}`, 'info', true);
                    });

                    connection.on("ReportStatusUpdated", (reportId, status, reportTitle) => {
                        console.log('Report status updated:', reportId, status, reportTitle);
                        // Dispatch custom event
                        document.dispatchEvent(new CustomEvent('reportStatusUpdated', {
                            detail: { reportId, status, reportTitle }
                        }));
                        // Show notification without sound for status updates
                        handleNotification(`Report "${reportTitle}" status updated to ${status}`, 'info', false);
                    });

                    connection.on("NewIncidentReport", async (reportId, reportTitle) => {
                        console.log('New incident report:', reportId, reportTitle);
                        // Dispatch custom event
                        document.dispatchEvent(new CustomEvent('newIncidentReport', {
                            detail: { reportId, reportTitle }
                        }));
                        // Show notification and play sound
                        await handleNotification(`New incident report: ${reportTitle}`, 'info', true);
                    });

                    connection.on("NotificationReceived", async (notification) => {
                        console.log('Notification received:', notification);
                        // Show notification and play sound for important notifications
                        await handleNotification(
                            notification.message, 
                            notification.notificationType || 'info',
                            notification.notificationType === 'warning' || 
                            notification.notificationType === 'error' || 
                            notification.notificationType === 'info'
                        );
                    });
                }

                await connection.start();
                console.log('SignalR Connected');

                // Join user group
                const userId = '@User.FindFirstValue(ClaimTypes.NameIdentifier)';
                if (userId) {
                    await connection.invoke("JoinUserGroup", userId);
                    console.log('Joined user group:', userId);
                }

                isInitialized = true;
                retryCount = 0;

                // Check for in-progress reports after connection
                await checkInProgressReports();

            } catch (err) {
                console.error('SignalR Connection Error:', err);
                isConnecting = false;
                if (retryCount < maxRetries) {
                    retryCount++;
                    setTimeout(initializeSignalR, 5000);
                } else {
                    handleNotification('Failed to establish real-time connection. Please refresh the page.', 'error', false);
                }
            } finally {
                isConnecting = false;
            }
        }

        // Initialize SignalR when the document is ready
        document.addEventListener('DOMContentLoaded', () => {
            initializeSignalR();
        });

        // Clean up on page unload
        window.addEventListener('beforeunload', () => {
            if (connection) {
                connection.stop();
            }
        });
    </script>
    
    <!-- Add toast container -->
    <div id="toastContainer" class="toast-container position-fixed bottom-0 end-0 p-3"></div>

    <!-- Notification Badge Styles -->
    <style>
        /* Notification Badge Styles */
        .notification-badge {
            position: absolute;
            top: -5px;
            right: -5px;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background-color: #e74c3c;
            color: white;
            font-size: 11px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            box-shadow: 0 0 0 0 rgba(231, 76, 60, 0.7);
            animation: pulse 2s infinite;
        }
        
        /* Toggle Switch Styles */
        .switch {
            position: relative;
            display: inline-block;
            width: 40px;
            height: 20px;
            margin-left: auto;
        }
        
        .switch input { 
            opacity: 0;
            width: 0;
            height: 0;
        }
        
        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .4s;
        }
        
        .slider:before {
            position: absolute;
            content: "";
            height: 16px;
            width: 16px;
            left: 2px;
            bottom: 2px;
            background-color: white;
            transition: .4s;
        }
        
        input:checked + .slider {
            background-color: #1ABC9C;
        }
        
        input:focus + .slider {
            box-shadow: 0 0 1px #1ABC9C;
        }
        
        input:checked + .slider:before {
            transform: translateX(20px);
        }
        
        .slider.round {
            border-radius: 34px;
        }
        
        .slider.round:before {
            border-radius: 50%;
        }
    </style>
    
    <!-- Add logout confirmation script -->
    <script>
        // Logout confirmation handling
        document.addEventListener('DOMContentLoaded', function() {
            // Get all logout buttons
            const logoutBtns = document.querySelectorAll('[data-logout-trigger]');
            const logoutModal = new bootstrap.Modal(document.getElementById('logoutConfirmModal'));
            const confirmLogoutBtn = document.getElementById('confirmLogoutBtn');
            const logoutForm = document.getElementById('logoutForm');
            
            // Add click event to all logout buttons
            logoutBtns.forEach(btn => {
                btn.addEventListener('click', function(e) {
                    e.preventDefault();
                    logoutModal.show();
                });
            });
            
            // Confirm logout button event
            confirmLogoutBtn.addEventListener('click', function() {
                logoutForm.submit();
            });
        });
    </script>
</body>
</html> 